
../../initrfs/init:     file format elf32-i386
../../initrfs/init
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20000590

Program Header:
    LOAD off    0x00001000 vaddr 0x20000000 paddr 0x20000000 align 2**12
         filesz 0x0000104d memsz 0x0000104d flags r-x
    LOAD off    0x00003000 vaddr 0x20002000 paddr 0x20002000 align 2**12
         filesz 0x00001100 memsz 0x00043034 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000104d  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000001  20002000  20002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .rodata       0000009c  20003000  20003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata.str1.1 00000064  2000309c  2000309c  0000409c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .bss          00041034  20004000  20004000  00004100  2**5
                  ALLOC
  5 .stab         00004134  00000000  00000000  00004100  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      000000a2  00000000  00000000  00008234  2**0
                  CONTENTS, READONLY
  7 .stabstr      00001c5a  00000000  00000000  000082d6  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20000000 l    d  .text	00000000 .text
20002000 l    d  .data	00000000 .data
20003000 l    d  .rodata	00000000 .rodata
2000309c l    d  .rodata.str1.1	00000000 .rodata.str1.1
20004000 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 init.c
20004000 l     O .bss	00000004 state
20004020 l     O .bss	00040000 files
00000000 l    df *ABS*	00000000 tar.c
2000026c l     F .text	00000045 tar_parse_number
00000000 l    df *ABS*	00000000 process.c
00000000 l    df *ABS*	00000000 syscall.c
00000000 l    df *ABS*	00000000 console.c
20002000 l     O .data	00000001 color
20044020 l     O .bss	00000004 kprintf_res
00000000 l    df *ABS*	00000000 rpc.c
20044024 l     O .bss	00001000 rpcHandlers
20003084 l     O .rodata	00000018 C.2.870
00000000 l    df *ABS*	00000000 driver.c
00000000 l    df *ABS*	00000000 memory.c
00000000 l    df *ABS*	00000000 stdlib.c
20000e46 l     F .text	00000069 pop_unused_node
20000a77 g     F .text	0000003e inb
20000be5 g     F .text	00000039 register_driver
20000615 g     F .text	0000003e kputc
200009bf g     F .text	0000003c fModify
200005b8 g     F .text	00000050 syscall
20000837 g     F .text	00000042 rpc_init
20000608 g     F .text	0000000d setclr
20000c3c g     F .text	00000026 memcpy
2000004e g     F .text	00000102 dRead
20000ce6 g     F .text	00000057 pcalloc
20000ca9 g     F .text	0000003d pfree
20000eaf g     F .text	00000108 malloc
20000b6e g     F .text	0000003c register_irq_rpc
200003c2 g     F .text	00000017 execn
200003d9 g     F .text	0000003c thread
20000150 g     F .text	0000008a createDriver
200007ac g     F .text	0000003d rpc_check_future
200007e9 g     F .text	0000004e rpc_map
2004502c g     O .bss	00000004 first_free
20000000 g     F .text	0000001d dModify
20000784 g     F .text	00000028 rpc_register_handler
20000a39 g     F .text	0000003e inw
20045030 g     O .bss	00000004 malloced
20001019 g     F .text	00000034 calloc
2000001d g     F .text	00000027 dCall
20000415 g     F .text	0000003e getargsptr
20000948 g     F .text	0000003c fWrite
20000388 g     F .text	0000003a exec
20000490 g     F .text	000000ec execp
20000590 g     F .text	00000026 _start
200009fb g     F .text	0000003e inl
20000fb7 g     F .text	00000062 realloc
20000c62 g     F .text	00000047 memcmp
20000d3d g     F .text	0000000f palloc
20000b30 g     F .text	0000003e outb
20045024 g     O .bss	00000004 first_unused
20000c20 g     F .text	0000001c memset
200001da g     F .text	0000008f main
200008c2 g     F .text	0000004a rpc_handler
2000067a g     F .text	0000003b kputn
20000984 g     F .text	0000003b fCall
20000653 g     F .text	00000027 kputs
20045028 g     O .bss	00000004 first_used
20000af2 g     F .text	0000003e outw
20000879 g     F .text	00000049 rpc_return
20000ab5 g     F .text	0000003d outl
200006b5 g     F .text	000000ce kprintf
20000453 g     F .text	0000003d exit
2000057c g     F .text	00000014 execpn
200002b1 g     F .text	000000d7 tar_extract
2000090c g     F .text	0000003c fRead
20000044 g     F .text	0000000a dWrite
20000baa g     F .text	0000003b register_path
20000d4c g     F .text	000000fa free



Disassembly of section .text:

20000000 <dModify>:

static uint32_t state;

static struct file* files[INITRFS_MAX_FILE_COUNT];

int dModify(int resourceID, void* data) {
20000000:	55                   	push   %ebp
20000001:	89 e5                	mov    %esp,%ebp
20000003:	83 ec 08             	sub    $0x8,%esp
	kprintf("initrfs driver modify");
20000006:	83 ec 0c             	sub    $0xc,%esp
20000009:	68 00 30 00 20       	push   $0x20003000
2000000e:	e8 a2 06 00 00       	call   200006b5 <kprintf>
20000013:	83 c4 10             	add    $0x10,%esp
	return 0;
20000016:	b8 00 00 00 00       	mov    $0x0,%eax
}
2000001b:	c9                   	leave  
2000001c:	c3                   	ret    

2000001d <dCall>:

int dCall(int arg0, void* data) {
2000001d:	55                   	push   %ebp
2000001e:	89 e5                	mov    %esp,%ebp
20000020:	83 ec 08             	sub    $0x8,%esp
	state = 0;
20000023:	c7 05 00 40 00 20 00 	movl   $0x0,0x20004000
2000002a:	00 00 00 
	kprintf("initrfs driver call");
2000002d:	83 ec 0c             	sub    $0xc,%esp
20000030:	68 16 30 00 20       	push   $0x20003016
20000035:	e8 7b 06 00 00       	call   200006b5 <kprintf>
2000003a:	83 c4 10             	add    $0x10,%esp
	return 0;
2000003d:	b8 00 00 00 00       	mov    $0x0,%eax
}
20000042:	c9                   	leave  
20000043:	c3                   	ret    

20000044 <dWrite>:

int dWrite(int resourceID, void* data) {
20000044:	55                   	push   %ebp
20000045:	89 e5                	mov    %esp,%ebp
	return 0;
20000047:	b8 00 00 00 00       	mov    $0x0,%eax
}
2000004c:	5d                   	pop    %ebp
2000004d:	c3                   	ret    

2000004e <dRead>:

int dRead(int resourceID, void* data) {
2000004e:	55                   	push   %ebp
2000004f:	89 e5                	mov    %esp,%ebp
20000051:	53                   	push   %ebx
20000052:	83 ec 14             	sub    $0x14,%esp
	struct driver_data* drvData = data;
20000055:	8b 45 0c             	mov    0xc(%ebp),%eax
20000058:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(drvData == 0) return 0;
2000005b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
2000005f:	75 0a                	jne    2000006b <dRead+0x1d>
20000061:	b8 00 00 00 00       	mov    $0x0,%eax
20000066:	e9 e0 00 00 00       	jmp    2000014b <dRead+0xfd>

	if(drvData->pos >= files[resourceID]->size) {
2000006b:	8b 45 f4             	mov    -0xc(%ebp),%eax
2000006e:	8b 08                	mov    (%eax),%ecx
20000070:	8b 58 04             	mov    0x4(%eax),%ebx
20000073:	8b 45 08             	mov    0x8(%ebp),%eax
20000076:	8b 04 85 20 40 00 20 	mov    0x20004020(,%eax,4),%eax
2000007d:	8b 00                	mov    (%eax),%eax
2000007f:	ba 00 00 00 00       	mov    $0x0,%edx
20000084:	39 d3                	cmp    %edx,%ebx
20000086:	72 26                	jb     200000ae <dRead+0x60>
20000088:	39 d3                	cmp    %edx,%ebx
2000008a:	77 04                	ja     20000090 <dRead+0x42>
2000008c:	39 c1                	cmp    %eax,%ecx
2000008e:	72 1e                	jb     200000ae <dRead+0x60>
		drvData->result = E_ERROR;
20000090:	8b 45 f4             	mov    -0xc(%ebp),%eax
20000093:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
		drvData->bytesDone = 0;
2000009a:	8b 45 f4             	mov    -0xc(%ebp),%eax
2000009d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
		return 0;
200000a4:	b8 00 00 00 00       	mov    $0x0,%eax
200000a9:	e9 9d 00 00 00       	jmp    2000014b <dRead+0xfd>
	}

	drvData->bytesDone = (drvData->pos + drvData->length <= files[resourceID]->size) ? drvData->length : (files[resourceID]->size - drvData->pos);
200000ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
200000b1:	8b 08                	mov    (%eax),%ecx
200000b3:	8b 58 04             	mov    0x4(%eax),%ebx
200000b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
200000b9:	8b 40 08             	mov    0x8(%eax),%eax
200000bc:	ba 00 00 00 00       	mov    $0x0,%edx
200000c1:	01 c1                	add    %eax,%ecx
200000c3:	11 d3                	adc    %edx,%ebx
200000c5:	8b 45 08             	mov    0x8(%ebp),%eax
200000c8:	8b 04 85 20 40 00 20 	mov    0x20004020(,%eax,4),%eax
200000cf:	8b 00                	mov    (%eax),%eax
200000d1:	ba 00 00 00 00       	mov    $0x0,%edx
200000d6:	39 d3                	cmp    %edx,%ebx
200000d8:	77 10                	ja     200000ea <dRead+0x9c>
200000da:	39 d3                	cmp    %edx,%ebx
200000dc:	72 04                	jb     200000e2 <dRead+0x94>
200000de:	39 c1                	cmp    %eax,%ecx
200000e0:	77 08                	ja     200000ea <dRead+0x9c>
200000e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
200000e5:	8b 40 08             	mov    0x8(%eax),%eax
200000e8:	eb 1a                	jmp    20000104 <dRead+0xb6>
200000ea:	8b 45 08             	mov    0x8(%ebp),%eax
200000ed:	8b 04 85 20 40 00 20 	mov    0x20004020(,%eax,4),%eax
200000f4:	8b 08                	mov    (%eax),%ecx
200000f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
200000f9:	8b 50 04             	mov    0x4(%eax),%edx
200000fc:	8b 00                	mov    (%eax),%eax
200000fe:	89 ca                	mov    %ecx,%edx
20000100:	29 c2                	sub    %eax,%edx
20000102:	89 d0                	mov    %edx,%eax
20000104:	8b 55 f4             	mov    -0xc(%ebp),%edx
20000107:	89 42 0c             	mov    %eax,0xc(%edx)

	memcpy(drvData->data, &(files[resourceID]->content) + drvData->pos, drvData->bytesDone);
2000010a:	8b 45 f4             	mov    -0xc(%ebp),%eax
2000010d:	8b 48 0c             	mov    0xc(%eax),%ecx
20000110:	8b 45 08             	mov    0x8(%ebp),%eax
20000113:	8b 04 85 20 40 00 20 	mov    0x20004020(,%eax,4),%eax
2000011a:	8d 58 04             	lea    0x4(%eax),%ebx
2000011d:	8b 45 f4             	mov    -0xc(%ebp),%eax
20000120:	8b 50 04             	mov    0x4(%eax),%edx
20000123:	8b 00                	mov    (%eax),%eax
20000125:	8d 14 03             	lea    (%ebx,%eax,1),%edx
20000128:	8b 45 f4             	mov    -0xc(%ebp),%eax
2000012b:	83 c0 14             	add    $0x14,%eax
2000012e:	83 ec 04             	sub    $0x4,%esp
20000131:	51                   	push   %ecx
20000132:	52                   	push   %edx
20000133:	50                   	push   %eax
20000134:	e8 03 0b 00 00       	call   20000c3c <memcpy>
20000139:	83 c4 10             	add    $0x10,%esp
	drvData->result = S_OK;
2000013c:	8b 45 f4             	mov    -0xc(%ebp),%eax
2000013f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

	return 0;
20000146:	b8 00 00 00 00       	mov    $0x0,%eax
}
2000014b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
2000014e:	c9                   	leave  
2000014f:	c3                   	ret    

20000150 <createDriver>:

void createDriver(void* initrfsPtr) {
20000150:	55                   	push   %ebp
20000151:	89 e5                	mov    %esp,%ebp
20000153:	83 ec 28             	sub    $0x28,%esp
	int dModifyID = rpc_register_handler(&dModify);
20000156:	83 ec 0c             	sub    $0xc,%esp
20000159:	68 00 00 00 20       	push   $0x20000000
2000015e:	e8 21 06 00 00       	call   20000784 <rpc_register_handler>
20000163:	83 c4 10             	add    $0x10,%esp
20000166:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	int dCallID = rpc_register_handler(&dCall);
20000169:	83 ec 0c             	sub    $0xc,%esp
2000016c:	68 1d 00 00 20       	push   $0x2000001d
20000171:	e8 0e 06 00 00       	call   20000784 <rpc_register_handler>
20000176:	83 c4 10             	add    $0x10,%esp
20000179:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int dReadID = rpc_register_handler(&dRead);
2000017c:	83 ec 0c             	sub    $0xc,%esp
2000017f:	68 4e 00 00 20       	push   $0x2000004e
20000184:	e8 fb 05 00 00       	call   20000784 <rpc_register_handler>
20000189:	83 c4 10             	add    $0x10,%esp
2000018c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int dWriteID = rpc_register_handler(&dWrite);
2000018f:	83 ec 0c             	sub    $0xc,%esp
20000192:	68 44 00 00 20       	push   $0x20000044
20000197:	e8 e8 05 00 00       	call   20000784 <rpc_register_handler>
2000019c:	83 c4 10             	add    $0x10,%esp
2000019f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	int driverID = register_driver(dModifyID, dCallID, dReadID, dWriteID, "initrfs");
200001a2:	83 ec 0c             	sub    $0xc,%esp
200001a5:	68 2a 30 00 20       	push   $0x2000302a
200001aa:	ff 75 f0             	pushl  -0x10(%ebp)
200001ad:	ff 75 ec             	pushl  -0x14(%ebp)
200001b0:	ff 75 e8             	pushl  -0x18(%ebp)
200001b3:	ff 75 e4             	pushl  -0x1c(%ebp)
200001b6:	e8 2a 0a 00 00       	call   20000be5 <register_driver>
200001bb:	83 c4 20             	add    $0x20,%esp
200001be:	89 45 f4             	mov    %eax,-0xc(%ebp)

	tar_extract(initrfsPtr, (uint32_t**)files, driverID);
200001c1:	b8 20 40 00 20       	mov    $0x20004020,%eax
200001c6:	83 ec 04             	sub    $0x4,%esp
200001c9:	ff 75 f4             	pushl  -0xc(%ebp)
200001cc:	50                   	push   %eax
200001cd:	ff 75 08             	pushl  0x8(%ebp)
200001d0:	e8 dc 00 00 00       	call   200002b1 <tar_extract>
200001d5:	83 c4 10             	add    $0x10,%esp
}
200001d8:	c9                   	leave  
200001d9:	c3                   	ret    

200001da <main>:

int main(void* initrfsPtr) {
200001da:	8d 4c 24 04          	lea    0x4(%esp),%ecx
200001de:	83 e4 f0             	and    $0xfffffff0,%esp
200001e1:	ff 71 fc             	pushl  -0x4(%ecx)
200001e4:	55                   	push   %ebp
200001e5:	89 e5                	mov    %esp,%ebp
200001e7:	51                   	push   %ecx
200001e8:	83 ec 04             	sub    $0x4,%esp
200001eb:	89 c8                	mov    %ecx,%eax
	if(!initrfsPtr) {
200001ed:	83 38 00             	cmpl   $0x0,(%eax)
200001f0:	75 17                	jne    20000209 <main+0x2f>
		kprintf("Init called without initrfsptr!\nTerminating...\n");
200001f2:	83 ec 0c             	sub    $0xc,%esp
200001f5:	68 34 30 00 20       	push   $0x20003034
200001fa:	e8 b6 04 00 00       	call   200006b5 <kprintf>
200001ff:	83 c4 10             	add    $0x10,%esp
		return 0;
20000202:	b8 00 00 00 00       	mov    $0x0,%eax
20000207:	eb 58                	jmp    20000261 <main+0x87>
	}

	createDriver(initrfsPtr);
20000209:	83 ec 0c             	sub    $0xc,%esp
2000020c:	ff 30                	pushl  (%eax)
2000020e:	e8 3d ff ff ff       	call   20000150 <createDriver>
20000213:	83 c4 10             	add    $0x10,%esp

	state = 1;
20000216:	c7 05 00 40 00 20 01 	movl   $0x1,0x20004000
2000021d:	00 00 00 
	execpn("drivers/fifo");
20000220:	83 ec 0c             	sub    $0xc,%esp
20000223:	68 64 30 00 20       	push   $0x20003064
20000228:	e8 4f 03 00 00       	call   2000057c <execpn>
2000022d:	83 c4 10             	add    $0x10,%esp
	while(state); //wait for backcall
20000230:	a1 00 40 00 20       	mov    0x20004000,%eax
20000235:	85 c0                	test   %eax,%eax
20000237:	75 f7                	jne    20000230 <main+0x56>

	state =1;
20000239:	c7 05 00 40 00 20 01 	movl   $0x1,0x20004000
20000240:	00 00 00 
	execpn("drivers/keyboard");
20000243:	83 ec 0c             	sub    $0xc,%esp
20000246:	68 71 30 00 20       	push   $0x20003071
2000024b:	e8 2c 03 00 00       	call   2000057c <execpn>
20000250:	83 c4 10             	add    $0x10,%esp
	while(state); //wait for backcall
20000253:	a1 00 40 00 20       	mov    0x20004000,%eax
20000258:	85 c0                	test   %eax,%eax
2000025a:	75 f7                	jne    20000253 <main+0x79>

	return 0;
2000025c:	b8 00 00 00 00       	mov    $0x0,%eax
}
20000261:	8b 4d fc             	mov    -0x4(%ebp),%ecx
20000264:	c9                   	leave  
20000265:	8d 61 fc             	lea    -0x4(%ecx),%esp
20000268:	c3                   	ret    
20000269:	00 00                	add    %al,(%eax)
	...

2000026c <tar_parse_number>:
#include "stdlib.h"
#include "stdint.h"
#include "string.h"

static uint32_t tar_parse_number(const char *in)
{
2000026c:	55                   	push   %ebp
2000026d:	89 e5                	mov    %esp,%ebp
2000026f:	83 ec 10             	sub    $0x10,%esp
    unsigned int size = 0;
20000272:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    unsigned int j;
    unsigned int count = 1;
20000279:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

    for (j = 11; j > 0; j--, count *= 8)
20000280:	c7 45 f8 0b 00 00 00 	movl   $0xb,-0x8(%ebp)
20000287:	eb 1d                	jmp    200002a6 <tar_parse_number+0x3a>
        size += ((in[j - 1] - '0') * count);
20000289:	8b 45 f8             	mov    -0x8(%ebp),%eax
2000028c:	48                   	dec    %eax
2000028d:	03 45 08             	add    0x8(%ebp),%eax
20000290:	8a 00                	mov    (%eax),%al
20000292:	0f be c0             	movsbl %al,%eax
20000295:	83 e8 30             	sub    $0x30,%eax
20000298:	0f af 45 fc          	imul   -0x4(%ebp),%eax
2000029c:	01 45 f4             	add    %eax,-0xc(%ebp)
{
    unsigned int size = 0;
    unsigned int j;
    unsigned int count = 1;

    for (j = 11; j > 0; j--, count *= 8)
2000029f:	ff 4d f8             	decl   -0x8(%ebp)
200002a2:	c1 65 fc 03          	shll   $0x3,-0x4(%ebp)
200002a6:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
200002aa:	75 dd                	jne    20000289 <tar_parse_number+0x1d>
        size += ((in[j - 1] - '0') * count);

    return size;
200002ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
200002af:	c9                   	leave  
200002b0:	c3                   	ret    

200002b1 <tar_extract>:

void tar_extract(void* tarball, uint32_t** files, int driverID) {
200002b1:	55                   	push   %ebp
200002b2:	89 e5                	mov    %esp,%ebp
200002b4:	53                   	push   %ebx
200002b5:	83 ec 14             	sub    $0x14,%esp
    void* address = tarball;
200002b8:	8b 45 08             	mov    0x8(%ebp),%eax
200002bb:	89 45 e8             	mov    %eax,-0x18(%ebp)

    uint32_t i;

    for (i = 0; ; i++)
200002be:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    {
        struct tar_header *header = (struct tar_header*)address;
200002c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
200002c8:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if (header->name[0] == '\0')
200002cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
200002ce:	8a 00                	mov    (%eax),%al
200002d0:	84 c0                	test   %al,%al
200002d2:	0f 84 ab 00 00 00    	je     20000383 <tar_extract+0xd2>
            break;

        uint32_t size = tar_parse_number(header->size);
200002d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
200002db:	83 c0 7c             	add    $0x7c,%eax
200002de:	50                   	push   %eax
200002df:	e8 88 ff ff ff       	call   2000026c <tar_parse_number>
200002e4:	83 c4 04             	add    $0x4,%esp
200002e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        address += 512;
200002ea:	81 45 e8 00 02 00 00 	addl   $0x200,-0x18(%ebp)

        if(size != 0) {
200002f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
200002f5:	74 65                	je     2000035c <tar_extract+0xab>
            files[i] = malloc(size + 4);
200002f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
200002fa:	c1 e0 02             	shl    $0x2,%eax
200002fd:	89 c3                	mov    %eax,%ebx
200002ff:	03 5d 0c             	add    0xc(%ebp),%ebx
20000302:	8b 45 f4             	mov    -0xc(%ebp),%eax
20000305:	83 c0 04             	add    $0x4,%eax
20000308:	83 ec 0c             	sub    $0xc,%esp
2000030b:	50                   	push   %eax
2000030c:	e8 9e 0b 00 00       	call   20000eaf <malloc>
20000311:	83 c4 10             	add    $0x10,%esp
20000314:	89 03                	mov    %eax,(%ebx)
            files[i][0] = size;
20000316:	8b 45 ec             	mov    -0x14(%ebp),%eax
20000319:	c1 e0 02             	shl    $0x2,%eax
2000031c:	03 45 0c             	add    0xc(%ebp),%eax
2000031f:	8b 00                	mov    (%eax),%eax
20000321:	8b 55 f4             	mov    -0xc(%ebp),%edx
20000324:	89 10                	mov    %edx,(%eax)
            memcpy(&files[i][1], address, size);
20000326:	8b 45 ec             	mov    -0x14(%ebp),%eax
20000329:	c1 e0 02             	shl    $0x2,%eax
2000032c:	03 45 0c             	add    0xc(%ebp),%eax
2000032f:	8b 00                	mov    (%eax),%eax
20000331:	83 c0 04             	add    $0x4,%eax
20000334:	83 ec 04             	sub    $0x4,%esp
20000337:	ff 75 f4             	pushl  -0xc(%ebp)
2000033a:	ff 75 e8             	pushl  -0x18(%ebp)
2000033d:	50                   	push   %eax
2000033e:	e8 f9 08 00 00       	call   20000c3c <memcpy>
20000343:	83 c4 10             	add    $0x10,%esp

            register_path(header->name, driverID, i);
20000346:	8b 55 ec             	mov    -0x14(%ebp),%edx
20000349:	8b 45 f0             	mov    -0x10(%ebp),%eax
2000034c:	83 ec 04             	sub    $0x4,%esp
2000034f:	52                   	push   %edx
20000350:	ff 75 10             	pushl  0x10(%ebp)
20000353:	50                   	push   %eax
20000354:	e8 51 08 00 00       	call   20000baa <register_path>
20000359:	83 c4 10             	add    $0x10,%esp
        }

        address += (size / 512) * 512;
2000035c:	8b 45 f4             	mov    -0xc(%ebp),%eax
2000035f:	c1 e8 09             	shr    $0x9,%eax
20000362:	c1 e0 09             	shl    $0x9,%eax
20000365:	01 45 e8             	add    %eax,-0x18(%ebp)

        if (size % 512)
20000368:	8b 45 f4             	mov    -0xc(%ebp),%eax
2000036b:	25 ff 01 00 00       	and    $0x1ff,%eax
20000370:	85 c0                	test   %eax,%eax
20000372:	74 07                	je     2000037b <tar_extract+0xca>
            address += 512;
20000374:	81 45 e8 00 02 00 00 	addl   $0x200,-0x18(%ebp)
void tar_extract(void* tarball, uint32_t** files, int driverID) {
    void* address = tarball;

    uint32_t i;

    for (i = 0; ; i++)
2000037b:	ff 45 ec             	incl   -0x14(%ebp)

        address += (size / 512) * 512;

        if (size % 512)
            address += 512;
    }
2000037e:	e9 42 ff ff ff       	jmp    200002c5 <tar_extract+0x14>

    return;
}
20000383:	8b 5d fc             	mov    -0x4(%ebp),%ebx
20000386:	c9                   	leave  
20000387:	c3                   	ret    

20000388 <exec>:

THREAD execn(void* elf, uint32_t elfSize) {
	return exec(elf, elfSize, 0, 0);
}

THREAD exec(void* elf, uint32_t elfSize, void* data, uint32_t dataSize) {
20000388:	55                   	push   %ebp
20000389:	89 e5                	mov    %esp,%ebp
2000038b:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x501,
			.ebx = (uint32_t)data,
			.ecx = (uint32_t)dataSize,
			.edx = (uint32_t)elf,
			.esi = (uint32_t)elfSize,
			.edi = 0 };
2000038e:	8b 45 10             	mov    0x10(%ebp),%eax
20000391:	c7 45 e0 01 05 00 00 	movl   $0x501,-0x20(%ebp)
20000398:	89 45 e4             	mov    %eax,-0x1c(%ebp)
2000039b:	8b 45 14             	mov    0x14(%ebp),%eax
2000039e:	89 45 e8             	mov    %eax,-0x18(%ebp)
200003a1:	8b 45 08             	mov    0x8(%ebp),%eax
200003a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
200003a7:	8b 45 0c             	mov    0xc(%ebp),%eax
200003aa:	89 45 f0             	mov    %eax,-0x10(%ebp)

	syscall(&state);
200003ad:	8d 45 e0             	lea    -0x20(%ebp),%eax
200003b0:	50                   	push   %eax
			.eax = 0x501,
			.ebx = (uint32_t)data,
			.ecx = (uint32_t)dataSize,
			.edx = (uint32_t)elf,
			.esi = (uint32_t)elfSize,
			.edi = 0 };
200003b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
200003b8:	e8 fb 01 00 00       	call   200005b8 <syscall>

	return state.eax;
}
200003bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
200003c0:	c9                   	leave  
200003c1:	c3                   	ret    

200003c2 <execn>:

THREAD execpn(char* path) {
	return execp(path, 0, 0);
}

THREAD execn(void* elf, uint32_t elfSize) {
200003c2:	55                   	push   %ebp
200003c3:	89 e5                	mov    %esp,%ebp
200003c5:	83 ec 08             	sub    $0x8,%esp
	return exec(elf, elfSize, 0, 0);
200003c8:	6a 00                	push   $0x0
200003ca:	6a 00                	push   $0x0
200003cc:	ff 75 0c             	pushl  0xc(%ebp)
200003cf:	ff 75 08             	pushl  0x8(%ebp)
200003d2:	e8 b1 ff ff ff       	call   20000388 <exec>
}
200003d7:	c9                   	leave  
200003d8:	c3                   	ret    

200003d9 <thread>:

	return (void*) state.eax;
}


THREAD thread(void* function, void* args) {
200003d9:	55                   	push   %ebp
200003da:	89 e5                	mov    %esp,%ebp
200003dc:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x500,
			.ebx = (uint32_t)function,
			.ecx = (uint32_t)args,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
200003df:	8b 45 08             	mov    0x8(%ebp),%eax
200003e2:	c7 45 e0 00 05 00 00 	movl   $0x500,-0x20(%ebp)
200003e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
200003ec:	8b 45 0c             	mov    0xc(%ebp),%eax
200003ef:	89 45 e8             	mov    %eax,-0x18(%ebp)

	syscall(&state);
200003f2:	8d 45 e0             	lea    -0x20(%ebp),%eax
200003f5:	50                   	push   %eax
			.eax = 0x500,
			.ebx = (uint32_t)function,
			.ecx = (uint32_t)args,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
200003f6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
200003fd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000404:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
2000040b:	e8 a8 01 00 00       	call   200005b8 <syscall>

	return state.eax;
}
20000410:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000413:	c9                   	leave  
20000414:	c3                   	ret    

20000415 <getargsptr>:

	while (1) {
	}
}

void* getargsptr() {
20000415:	55                   	push   %ebp
20000416:	89 e5                	mov    %esp,%ebp
20000418:	83 ec 34             	sub    $0x34,%esp
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };

	syscall(&state);
2000041b:	8d 45 e0             	lea    -0x20(%ebp),%eax
			.eax = 0x2,
			.ebx = 0,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
2000041e:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)

	syscall(&state);
20000425:	50                   	push   %eax
			.eax = 0x2,
			.ebx = 0,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000426:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
2000042d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000434:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
2000043b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000442:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000449:	e8 6a 01 00 00       	call   200005b8 <syscall>

	return (void*) state.eax;
}
2000044e:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000451:	c9                   	leave  
20000452:	c3                   	ret    

20000453 <exit>:
	int result = main(getargsptr());

	exit(result);
}

void exit(int returncode) {
20000453:	55                   	push   %ebp
20000454:	89 e5                	mov    %esp,%ebp
20000456:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x1,
			.ebx = returncode,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000459:	8b 45 08             	mov    0x8(%ebp),%eax
2000045c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
20000463:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	syscall(&state);
20000466:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000469:	50                   	push   %eax
			.eax = 0x1,
			.ebx = returncode,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
2000046a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000471:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000478:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
2000047f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000486:	e8 2d 01 00 00       	call   200005b8 <syscall>
2000048b:	83 c4 10             	add    $0x10,%esp
2000048e:	eb fe                	jmp    2000048e <exit+0x3b>

20000490 <execp>:
	syscall(&state);

	return state.eax;
}

THREAD execp(char* path, void* data, uint32_t datasize) {
20000490:	55                   	push   %ebp
20000491:	89 e5                	mov    %esp,%ebp
20000493:	57                   	push   %edi
20000494:	56                   	push   %esi
20000495:	53                   	push   %ebx
20000496:	83 ec 1c             	sub    $0x1c,%esp
		if(driverData->pos + driverData->bytesDone >= elfsize) {
			elfsize *= 2;
			elf = realloc(elf, elfsize);
		}

		if(driverData->bytesDone) memcpy(elf + driverData->pos, driverData->data, driverData->bytesDone);
20000499:	bf d8 0e 00 00       	mov    $0xed8,%edi

	return state.eax;
}

THREAD execp(char* path, void* data, uint32_t datasize) {
	struct driver_data* driverData = palloc();
2000049e:	e8 9a 08 00 00       	call   20000d3d <palloc>

	uint32_t elfsize = MAX_IO_BUFFER;
	void* elf = malloc(elfsize); //256KB for init load
200004a3:	83 ec 0c             	sub    $0xc,%esp

	return state.eax;
}

THREAD execp(char* path, void* data, uint32_t datasize) {
	struct driver_data* driverData = palloc();
200004a6:	89 c3                	mov    %eax,%ebx

	uint32_t elfsize = MAX_IO_BUFFER;
	void* elf = malloc(elfsize); //256KB for init load
200004a8:	68 d8 0e 00 00       	push   $0xed8
200004ad:	e8 fd 09 00 00       	call   20000eaf <malloc>

	driverData->length = MAX_IO_BUFFER;
200004b2:	c7 43 08 d8 0e 00 00 	movl   $0xed8,0x8(%ebx)

THREAD execp(char* path, void* data, uint32_t datasize) {
	struct driver_data* driverData = palloc();

	uint32_t elfsize = MAX_IO_BUFFER;
	void* elf = malloc(elfsize); //256KB for init load
200004b9:	89 c6                	mov    %eax,%esi

	driverData->length = MAX_IO_BUFFER;

	kprintf("Reading init...\n");
200004bb:	c7 04 24 9c 30 00 20 	movl   $0x2000309c,(%esp)
200004c2:	e8 ee 01 00 00       	call   200006b5 <kprintf>
		if(driverData->pos + driverData->bytesDone >= elfsize) {
			elfsize *= 2;
			elf = realloc(elf, elfsize);
		}

		if(driverData->bytesDone) memcpy(elf + driverData->pos, driverData->data, driverData->bytesDone);
200004c7:	8d 43 14             	lea    0x14(%ebx),%eax
200004ca:	83 c4 10             	add    $0x10,%esp
200004cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	driverData->length = MAX_IO_BUFFER;

	kprintf("Reading init...\n");

	do {
		FUTURE f = fRead(path, driverData);
200004d0:	50                   	push   %eax
200004d1:	50                   	push   %eax
200004d2:	53                   	push   %ebx
200004d3:	ff 75 08             	pushl  0x8(%ebp)
200004d6:	e8 31 04 00 00       	call   2000090c <fRead>
200004db:	83 c4 10             	add    $0x10,%esp
200004de:	89 c2                	mov    %eax,%edx
		while(rpc_check_future(f));
200004e0:	83 ec 0c             	sub    $0xc,%esp
200004e3:	89 55 e0             	mov    %edx,-0x20(%ebp)
200004e6:	52                   	push   %edx
200004e7:	e8 c0 02 00 00       	call   200007ac <rpc_check_future>
200004ec:	83 c4 10             	add    $0x10,%esp
200004ef:	8b 55 e0             	mov    -0x20(%ebp),%edx
200004f2:	85 c0                	test   %eax,%eax
200004f4:	75 ea                	jne    200004e0 <execp+0x50>

		if(driverData->pos + driverData->bytesDone >= elfsize) {
200004f6:	8b 43 0c             	mov    0xc(%ebx),%eax
200004f9:	31 d2                	xor    %edx,%edx
200004fb:	03 03                	add    (%ebx),%eax
200004fd:	13 53 04             	adc    0x4(%ebx),%edx
20000500:	83 fa 00             	cmp    $0x0,%edx
20000503:	77 04                	ja     20000509 <execp+0x79>
20000505:	39 f8                	cmp    %edi,%eax
20000507:	72 10                	jb     20000519 <execp+0x89>
			elfsize *= 2;
20000509:	01 ff                	add    %edi,%edi
			elf = realloc(elf, elfsize);
2000050b:	51                   	push   %ecx
2000050c:	51                   	push   %ecx
2000050d:	57                   	push   %edi
2000050e:	56                   	push   %esi
2000050f:	e8 a3 0a 00 00       	call   20000fb7 <realloc>
20000514:	83 c4 10             	add    $0x10,%esp
20000517:	89 c6                	mov    %eax,%esi
		}

		if(driverData->bytesDone) memcpy(elf + driverData->pos, driverData->data, driverData->bytesDone);
20000519:	8b 43 0c             	mov    0xc(%ebx),%eax
2000051c:	85 c0                	test   %eax,%eax
2000051e:	74 12                	je     20000532 <execp+0xa2>
20000520:	52                   	push   %edx
20000521:	50                   	push   %eax
20000522:	ff 75 e4             	pushl  -0x1c(%ebp)
20000525:	8b 03                	mov    (%ebx),%eax
20000527:	01 f0                	add    %esi,%eax
20000529:	50                   	push   %eax
2000052a:	e8 0d 07 00 00       	call   20000c3c <memcpy>
2000052f:	83 c4 10             	add    $0x10,%esp

		driverData->pos += driverData->bytesDone;
20000532:	8b 43 0c             	mov    0xc(%ebx),%eax
20000535:	31 d2                	xor    %edx,%edx
20000537:	01 03                	add    %eax,(%ebx)
20000539:	11 53 04             	adc    %edx,0x4(%ebx)
	} while(driverData->bytesDone != 0);
2000053c:	83 7b 0c 00          	cmpl   $0x0,0xc(%ebx)
20000540:	75 8e                	jne    200004d0 <execp+0x40>

	kprintf("Executing init from init...\n");
20000542:	83 ec 0c             	sub    $0xc,%esp
20000545:	68 ad 30 00 20       	push   $0x200030ad
2000054a:	e8 66 01 00 00       	call   200006b5 <kprintf>
	THREAD ret = exec(elf, driverData->pos, data, datasize);
2000054f:	ff 75 10             	pushl  0x10(%ebp)
20000552:	ff 75 0c             	pushl  0xc(%ebp)
20000555:	ff 33                	pushl  (%ebx)
20000557:	56                   	push   %esi
20000558:	e8 2b fe ff ff       	call   20000388 <exec>

	pfree(driverData);
2000055d:	83 c4 14             	add    $0x14,%esp
20000560:	89 45 e0             	mov    %eax,-0x20(%ebp)
20000563:	53                   	push   %ebx
20000564:	e8 40 07 00 00       	call   20000ca9 <pfree>
	free(elf);
20000569:	89 34 24             	mov    %esi,(%esp)
2000056c:	e8 db 07 00 00       	call   20000d4c <free>

	return ret;
}
20000571:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000574:	8d 65 f4             	lea    -0xc(%ebp),%esp
20000577:	5b                   	pop    %ebx
20000578:	5e                   	pop    %esi
20000579:	5f                   	pop    %edi
2000057a:	5d                   	pop    %ebp
2000057b:	c3                   	ret    

2000057c <execpn>:

THREAD execpn(char* path) {
2000057c:	55                   	push   %ebp
2000057d:	89 e5                	mov    %esp,%ebp
2000057f:	83 ec 0c             	sub    $0xc,%esp
	return execp(path, 0, 0);
20000582:	6a 00                	push   $0x0
20000584:	6a 00                	push   $0x0
20000586:	ff 75 08             	pushl  0x8(%ebp)
20000589:	e8 02 ff ff ff       	call   20000490 <execp>
}
2000058e:	c9                   	leave  
2000058f:	c3                   	ret    

20000590 <_start>:
	syscall(&state);

	return state.eax;
}

void _start() {
20000590:	55                   	push   %ebp
20000591:	89 e5                	mov    %esp,%ebp
20000593:	83 ec 08             	sub    $0x8,%esp
	rpc_init();
20000596:	e8 9c 02 00 00       	call   20000837 <rpc_init>

	int result = main(getargsptr());
2000059b:	e8 75 fe ff ff       	call   20000415 <getargsptr>
200005a0:	83 ec 0c             	sub    $0xc,%esp
200005a3:	50                   	push   %eax
200005a4:	e8 31 fc ff ff       	call   200001da <main>

	exit(result);
200005a9:	89 04 24             	mov    %eax,(%esp)
200005ac:	e8 a2 fe ff ff       	call   20000453 <exit>
200005b1:	83 c4 10             	add    $0x10,%esp
}
200005b4:	c9                   	leave  
200005b5:	c3                   	ret    
	...

200005b8 <syscall>:
#include "syscall.h"

void syscall(struct regstate* state) {
200005b8:	55                   	push   %ebp
200005b9:	89 e5                	mov    %esp,%ebp
200005bb:	57                   	push   %edi
200005bc:	56                   	push   %esi
200005bd:	53                   	push   %ebx
200005be:	83 ec 10             	sub    $0x10,%esp
	asm("int $0x30"
200005c1:	8b 55 08             	mov    0x8(%ebp),%edx
200005c4:	8b 45 08             	mov    0x8(%ebp),%eax
200005c7:	8b 72 0c             	mov    0xc(%edx),%esi
200005ca:	8b 00                	mov    (%eax),%eax
200005cc:	89 75 e4             	mov    %esi,-0x1c(%ebp)
200005cf:	8b 5a 04             	mov    0x4(%edx),%ebx
200005d2:	8b 4a 08             	mov    0x8(%edx),%ecx
200005d5:	8b 72 10             	mov    0x10(%edx),%esi
200005d8:	8b 7a 14             	mov    0x14(%edx),%edi
200005db:	89 45 ec             	mov    %eax,-0x14(%ebp)
200005de:	8b 55 e4             	mov    -0x1c(%ebp),%edx
200005e1:	cd 30                	int    $0x30
200005e3:	89 55 e8             	mov    %edx,-0x18(%ebp)
200005e6:	8b 55 08             	mov    0x8(%ebp),%edx
200005e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
200005ec:	89 02                	mov    %eax,(%edx)
200005ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
200005f1:	89 5a 04             	mov    %ebx,0x4(%edx)
200005f4:	89 4a 08             	mov    %ecx,0x8(%edx)
200005f7:	89 42 0c             	mov    %eax,0xc(%edx)
200005fa:	89 72 10             	mov    %esi,0x10(%edx)
200005fd:	89 7a 14             	mov    %edi,0x14(%edx)
			"b" (state->ebx),
			"c" (state->ecx),
			"d" (state->edx),
			"S" (state->esi),
			"D" (state->edi));
}
20000600:	83 c4 10             	add    $0x10,%esp
20000603:	5b                   	pop    %ebx
20000604:	5e                   	pop    %esi
20000605:	5f                   	pop    %edi
20000606:	5d                   	pop    %ebp
20000607:	c3                   	ret    

20000608 <setclr>:
        x /= base;
    } while (x);
    kputs(p);
}

void setclr(char clr) {
20000608:	55                   	push   %ebp
20000609:	89 e5                	mov    %esp,%ebp
    color = clr;
2000060b:	8b 45 08             	mov    0x8(%ebp),%eax
}
2000060e:	5d                   	pop    %ebp
    } while (x);
    kputs(p);
}

void setclr(char clr) {
    color = clr;
2000060f:	a2 00 20 00 20       	mov    %al,0x20002000
}
20000614:	c3                   	ret    

20000615 <kputc>:
static int x = 0;
static int y = 0;
static int kprintf_res = 0;
static char color = 0x07;

void kputc(char c) {
20000615:	55                   	push   %ebp
20000616:	89 e5                	mov    %esp,%ebp
20000618:	83 ec 34             	sub    $0x34,%esp
2000061b:	0f be 45 08          	movsbl 0x8(%ebp),%eax
			.eax = 0x100,
			.ebx = (uint32_t) c,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
2000061f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	syscall(&state);
20000622:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000625:	50                   	push   %eax
			.eax = 0x100,
			.ebx = (uint32_t) c,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000626:	c7 45 e0 00 01 00 00 	movl   $0x100,-0x20(%ebp)
2000062d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000634:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
2000063b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000642:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000649:	e8 6a ff ff ff       	call   200005b8 <syscall>
2000064e:	83 c4 10             	add    $0x10,%esp
}
20000651:	c9                   	leave  
20000652:	c3                   	ret    

20000653 <kputs>:

void kputs(const char* s) {
20000653:	55                   	push   %ebp
20000654:	89 e5                	mov    %esp,%ebp
20000656:	53                   	push   %ebx
20000657:	83 ec 04             	sub    $0x4,%esp
2000065a:	8b 5d 08             	mov    0x8(%ebp),%ebx
    while (*s) {
2000065d:	eb 10                	jmp    2000066f <kputs+0x1c>
        kputc(*s++);
2000065f:	83 ec 0c             	sub    $0xc,%esp
20000662:	43                   	inc    %ebx
20000663:	0f be c0             	movsbl %al,%eax
20000666:	50                   	push   %eax
20000667:	e8 a9 ff ff ff       	call   20000615 <kputc>
2000066c:	83 c4 10             	add    $0x10,%esp

	syscall(&state);
}

void kputs(const char* s) {
    while (*s) {
2000066f:	8a 03                	mov    (%ebx),%al
20000671:	84 c0                	test   %al,%al
20000673:	75 ea                	jne    2000065f <kputs+0xc>
        kputc(*s++);
    }
}
20000675:	8b 5d fc             	mov    -0x4(%ebp),%ebx
20000678:	c9                   	leave  
20000679:	c3                   	ret    

2000067a <kputn>:

void kputn(unsigned long x, int base) {
2000067a:	55                   	push   %ebp
2000067b:	89 e5                	mov    %esp,%ebp
2000067d:	53                   	push   %ebx
2000067e:	83 ec 54             	sub    $0x54,%esp
20000681:	8b 5d 0c             	mov    0xc(%ebp),%ebx
20000684:	8b 45 08             	mov    0x8(%ebp),%eax
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* p;

    if (base > 36) {
20000687:	83 fb 24             	cmp    $0x24,%ebx
2000068a:	7f 24                	jg     200006b0 <kputn+0x36>
        return;
    }

    p = buf + 64;
    *p = '\0';
2000068c:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
20000690:	8d 4d f7             	lea    -0x9(%ebp),%ecx
    do {
        *--p = digits[x % base];
20000693:	31 d2                	xor    %edx,%edx
20000695:	49                   	dec    %ecx
20000696:	f7 f3                	div    %ebx
        x /= base;
    } while (x);
20000698:	85 c0                	test   %eax,%eax
    }

    p = buf + 64;
    *p = '\0';
    do {
        *--p = digits[x % base];
2000069a:	8a 92 ca 30 00 20    	mov    0x200030ca(%edx),%dl
200006a0:	88 11                	mov    %dl,(%ecx)
        x /= base;
    } while (x);
200006a2:	75 ef                	jne    20000693 <kputn+0x19>
    kputs(p);
200006a4:	83 ec 0c             	sub    $0xc,%esp
200006a7:	51                   	push   %ecx
200006a8:	e8 a6 ff ff ff       	call   20000653 <kputs>
200006ad:	83 c4 10             	add    $0x10,%esp
}
200006b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
200006b3:	c9                   	leave  
200006b4:	c3                   	ret    

200006b5 <kprintf>:

void setclr(char clr) {
    color = clr;
}

int kprintf(const char* fmt, ...) {
200006b5:	55                   	push   %ebp
200006b6:	89 e5                	mov    %esp,%ebp
200006b8:	57                   	push   %edi
200006b9:	56                   	push   %esi
200006ba:	53                   	push   %ebx
200006bb:	83 ec 0c             	sub    $0xc,%esp
200006be:	8d 5d 0c             	lea    0xc(%ebp),%ebx
200006c1:	8b 75 08             	mov    0x8(%ebp),%esi
    const char* s;
    unsigned long n;
    char c;

    va_start(ap, fmt);
    kprintf_res = 0;
200006c4:	c7 05 20 40 04 20 00 	movl   $0x0,0x20044020
200006cb:	00 00 00 
    while (*fmt) {
200006ce:	e9 99 00 00 00       	jmp    2000076c <kprintf+0xb7>
        if (*fmt == '%') {
200006d3:	3c 25                	cmp    $0x25,%al
200006d5:	0f 85 81 00 00 00    	jne    2000075c <kprintf+0xa7>
            fmt++;
200006db:	46                   	inc    %esi
            switch (*fmt) {
200006dc:	8a 06                	mov    (%esi),%al
200006de:	3c 70                	cmp    $0x70,%al
200006e0:	74 40                	je     20000722 <kprintf+0x6d>
200006e2:	7f 1a                	jg     200006fe <kprintf+0x49>
200006e4:	3c 63                	cmp    $0x63,%al
200006e6:	74 4c                	je     20000734 <kprintf+0x7f>
200006e8:	7f 0e                	jg     200006f8 <kprintf+0x43>
200006ea:	84 c0                	test   %al,%al
200006ec:	0f 84 84 00 00 00    	je     20000776 <kprintf+0xc1>
200006f2:	3c 25                	cmp    $0x25,%al
200006f4:	75 56                	jne    2000074c <kprintf+0x97>
200006f6:	eb 4d                	jmp    20000745 <kprintf+0x90>
200006f8:	3c 64                	cmp    $0x64,%al
200006fa:	75 50                	jne    2000074c <kprintf+0x97>
200006fc:	eb 1b                	jmp    20000719 <kprintf+0x64>
200006fe:	3c 75                	cmp    $0x75,%al
20000700:	74 17                	je     20000719 <kprintf+0x64>
20000702:	3c 78                	cmp    $0x78,%al
20000704:	74 1c                	je     20000722 <kprintf+0x6d>
20000706:	3c 73                	cmp    $0x73,%al
20000708:	75 42                	jne    2000074c <kprintf+0x97>
            case 's':
                s = va_arg(ap, char*);
                kputs(s);
2000070a:	83 ec 0c             	sub    $0xc,%esp
    while (*fmt) {
        if (*fmt == '%') {
            fmt++;
            switch (*fmt) {
            case 's':
                s = va_arg(ap, char*);
2000070d:	8d 7b 04             	lea    0x4(%ebx),%edi
                kputs(s);
20000710:	ff 33                	pushl  (%ebx)
20000712:	e8 3c ff ff ff       	call   20000653 <kputs>
20000717:	eb 17                	jmp    20000730 <kprintf+0x7b>
                break;
            case 'd':
            case 'u':
                n = va_arg(ap, unsigned long int);
20000719:	8d 7b 04             	lea    0x4(%ebx),%edi
                kputn(n, 10);
2000071c:	51                   	push   %ecx
2000071d:	51                   	push   %ecx
2000071e:	6a 0a                	push   $0xa
20000720:	eb 07                	jmp    20000729 <kprintf+0x74>
                break;
            case 'x':
            case 'p':
                n = va_arg(ap, unsigned long int);
20000722:	8d 7b 04             	lea    0x4(%ebx),%edi
                kputn(n, 16);
20000725:	52                   	push   %edx
20000726:	52                   	push   %edx
20000727:	6a 10                	push   $0x10
20000729:	ff 33                	pushl  (%ebx)
2000072b:	e8 4a ff ff ff       	call   2000067a <kputn>
20000730:	89 fb                	mov    %edi,%ebx
20000732:	eb 34                	jmp    20000768 <kprintf+0xb3>
                break;
            case 'c':
                c = va_arg(ap, int);
                kputc(c);
20000734:	83 ec 0c             	sub    $0xc,%esp
            case 'p':
                n = va_arg(ap, unsigned long int);
                kputn(n, 16);
                break;
            case 'c':
                c = va_arg(ap, int);
20000737:	8d 7b 04             	lea    0x4(%ebx),%edi
                kputc(c);
2000073a:	0f be 03             	movsbl (%ebx),%eax
2000073d:	50                   	push   %eax
2000073e:	e8 d2 fe ff ff       	call   20000615 <kputc>
20000743:	eb eb                	jmp    20000730 <kprintf+0x7b>
                break;
            case '%':
                kputc('%');
20000745:	83 ec 0c             	sub    $0xc,%esp
20000748:	6a 25                	push   $0x25
2000074a:	eb 17                	jmp    20000763 <kprintf+0xae>
                break;
            case '\0':
                goto out;
            default:
                kputc('%');
2000074c:	83 ec 0c             	sub    $0xc,%esp
2000074f:	6a 25                	push   $0x25
20000751:	e8 bf fe ff ff       	call   20000615 <kputc>
                kputc(*fmt);
20000756:	58                   	pop    %eax
20000757:	0f be 06             	movsbl (%esi),%eax
2000075a:	eb 06                	jmp    20000762 <kprintf+0xad>
                break;
            }
        } else {
            kputc(*fmt);
2000075c:	83 ec 0c             	sub    $0xc,%esp
2000075f:	0f be c0             	movsbl %al,%eax
20000762:	50                   	push   %eax
20000763:	e8 ad fe ff ff       	call   20000615 <kputc>
20000768:	83 c4 10             	add    $0x10,%esp
        }

        fmt++;
2000076b:	46                   	inc    %esi
    unsigned long n;
    char c;

    va_start(ap, fmt);
    kprintf_res = 0;
    while (*fmt) {
2000076c:	8a 06                	mov    (%esi),%al
2000076e:	84 c0                	test   %al,%al
20000770:	0f 85 5d ff ff ff    	jne    200006d3 <kprintf+0x1e>

    out:
    va_end(ap);

    return kprintf_res;
}
20000776:	a1 20 40 04 20       	mov    0x20044020,%eax
2000077b:	8d 65 f4             	lea    -0xc(%ebp),%esp
2000077e:	5b                   	pop    %ebx
2000077f:	5e                   	pop    %esi
20000780:	5f                   	pop    %edi
20000781:	5d                   	pop    %ebp
20000782:	c3                   	ret    
	...

20000784 <rpc_register_handler>:
	syscall(&state);

	return state.eax;
}

int rpc_register_handler(int(*fptr)(int, void*)) {
20000784:	55                   	push   %ebp
20000785:	31 c0                	xor    %eax,%eax
20000787:	89 e5                	mov    %esp,%ebp
	for(int i = 0; i < RPC_HANDLERS; i++) {
		if(rpcHandlers[i] == (int(*)(int, void*))0) {
20000789:	83 3c 85 24 40 04 20 	cmpl   $0x0,0x20044024(,%eax,4)
20000790:	00 
20000791:	75 0c                	jne    2000079f <rpc_register_handler+0x1b>
			rpcHandlers[i] = fptr;
20000793:	8b 55 08             	mov    0x8(%ebp),%edx
20000796:	89 14 85 24 40 04 20 	mov    %edx,0x20044024(,%eax,4)
			return i;
2000079d:	eb 0b                	jmp    200007aa <rpc_register_handler+0x26>

	return state.eax;
}

int rpc_register_handler(int(*fptr)(int, void*)) {
	for(int i = 0; i < RPC_HANDLERS; i++) {
2000079f:	40                   	inc    %eax
200007a0:	3d 00 04 00 00       	cmp    $0x400,%eax
200007a5:	75 e2                	jne    20000789 <rpc_register_handler+0x5>
200007a7:	83 c8 ff             	or     $0xffffffff,%eax
			rpcHandlers[i] = fptr;
			return i;
		}
	}
	return -1;
}
200007aa:	5d                   	pop    %ebp
200007ab:	c3                   	ret    

200007ac <rpc_check_future>:
	*rpcARG0 = state.ecx;
	return (void*) state.eax;
}


int rpc_check_future(FUTURE fut) {
200007ac:	55                   	push   %ebp
200007ad:	89 e5                	mov    %esp,%ebp
200007af:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x203,
			.ebx = fut,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
200007b2:	8b 45 08             	mov    0x8(%ebp),%eax
200007b5:	c7 45 e0 03 02 00 00 	movl   $0x203,-0x20(%ebp)
200007bc:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	syscall(&state);
200007bf:	8d 45 e0             	lea    -0x20(%ebp),%eax
200007c2:	50                   	push   %eax
			.eax = 0x203,
			.ebx = fut,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
200007c3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
200007ca:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
200007d1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
200007d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
200007df:	e8 d4 fd ff ff       	call   200005b8 <syscall>

	return state.eax;
}
200007e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
200007e7:	c9                   	leave  
200007e8:	c3                   	ret    

200007e9 <rpc_map>:
			.edi = 0 };

	syscall(&state);
}

void* rpc_map(uint32_t* rpcID, uint32_t* rpcARG0) {
200007e9:	55                   	push   %ebp
200007ea:	89 e5                	mov    %esp,%ebp
200007ec:	83 ec 34             	sub    $0x34,%esp
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };

	syscall(&state);
200007ef:	8d 45 e0             	lea    -0x20(%ebp),%eax
			.eax = 0x200,
			.ebx = 0,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
200007f2:	c7 45 e0 00 02 00 00 	movl   $0x200,-0x20(%ebp)

	syscall(&state);
200007f9:	50                   	push   %eax
			.eax = 0x200,
			.ebx = 0,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
200007fa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
20000801:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000808:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
2000080f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000816:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
2000081d:	e8 96 fd ff ff       	call   200005b8 <syscall>

	*rpcID = state.ebx;
20000822:	8b 45 08             	mov    0x8(%ebp),%eax
20000825:	8b 55 e4             	mov    -0x1c(%ebp),%edx
20000828:	89 10                	mov    %edx,(%eax)
	*rpcARG0 = state.ecx;
2000082a:	8b 45 0c             	mov    0xc(%ebp),%eax
2000082d:	8b 55 e8             	mov    -0x18(%ebp),%edx
20000830:	89 10                	mov    %edx,(%eax)
	return (void*) state.eax;
}
20000832:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000835:	c9                   	leave  
20000836:	c3                   	ret    

20000837 <rpc_init>:
	kprintf("RET RPC NO WORK\n");
	while(1) {
	}
}

void rpc_init() {
20000837:	55                   	push   %ebp
20000838:	31 c0                	xor    %eax,%eax
2000083a:	89 e5                	mov    %esp,%ebp
2000083c:	57                   	push   %edi
2000083d:	56                   	push   %esi
2000083e:	83 ec 20             	sub    $0x20,%esp
	for(int i = 0; i < RPC_HANDLERS; i++) {
		rpcHandlers[i] = (int(*)(int, void*))0;
20000841:	c7 04 85 24 40 04 20 	movl   $0x0,0x20044024(,%eax,4)
20000848:	00 00 00 00 
	while(1) {
	}
}

void rpc_init() {
	for(int i = 0; i < RPC_HANDLERS; i++) {
2000084c:	40                   	inc    %eax
2000084d:	3d 00 04 00 00       	cmp    $0x400,%eax
20000852:	75 ed                	jne    20000841 <rpc_init+0xa>
			.eax = 0x202,
			.ebx = (uint32_t)&rpc_handler,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000854:	8d 7d e0             	lea    -0x20(%ebp),%edi
20000857:	be 84 30 00 20       	mov    $0x20003084,%esi
2000085c:	b9 06 00 00 00       	mov    $0x6,%ecx

	syscall(&state);
20000861:	83 ec 0c             	sub    $0xc,%esp
			.eax = 0x202,
			.ebx = (uint32_t)&rpc_handler,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000864:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	syscall(&state);
20000866:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000869:	50                   	push   %eax
2000086a:	e8 49 fd ff ff       	call   200005b8 <syscall>
2000086f:	83 c4 10             	add    $0x10,%esp
}
20000872:	8d 65 f8             	lea    -0x8(%ebp),%esp
20000875:	5e                   	pop    %esi
20000876:	5f                   	pop    %edi
20000877:	5d                   	pop    %ebp
20000878:	c3                   	ret    

20000879 <rpc_return>:

#define RPC_HANDLERS 1024

static int(*rpcHandlers[RPC_HANDLERS])(int, void*);

void rpc_return(int returnCode) {
20000879:	55                   	push   %ebp
2000087a:	89 e5                	mov    %esp,%ebp
2000087c:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x201,
			.ebx = returnCode,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
2000087f:	8b 45 08             	mov    0x8(%ebp),%eax
20000882:	c7 45 e0 01 02 00 00 	movl   $0x201,-0x20(%ebp)
20000889:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	syscall(&state);
2000088c:	8d 45 e0             	lea    -0x20(%ebp),%eax
2000088f:	50                   	push   %eax
			.eax = 0x201,
			.ebx = returnCode,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000890:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000897:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
2000089e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
200008a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
200008ac:	e8 07 fd ff ff       	call   200005b8 <syscall>

	kprintf("RET RPC NO WORK\n");
200008b1:	c7 04 24 ef 30 00 20 	movl   $0x200030ef,(%esp)
200008b8:	e8 f8 fd ff ff       	call   200006b5 <kprintf>
200008bd:	83 c4 10             	add    $0x10,%esp
200008c0:	eb fe                	jmp    200008c0 <rpc_return+0x47>

200008c2 <rpc_handler>:
		}
	}
	return -1;
}

void rpc_handler() {
200008c2:	55                   	push   %ebp
200008c3:	89 e5                	mov    %esp,%ebp
200008c5:	83 ec 20             	sub    $0x20,%esp
	uint32_t rpcID;
	uint32_t rpcARG0;
	void* rpcData = rpc_map(&rpcID, &rpcARG0);
200008c8:	8d 45 f0             	lea    -0x10(%ebp),%eax
200008cb:	50                   	push   %eax
200008cc:	8d 45 f4             	lea    -0xc(%ebp),%eax
200008cf:	50                   	push   %eax
200008d0:	e8 14 ff ff ff       	call   200007e9 <rpc_map>

	int returnValue = -1;

	if(rpcID < RPC_HANDLERS && rpcHandlers[rpcID] != 0) {
200008d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
200008d8:	83 c4 10             	add    $0x10,%esp
200008db:	81 fa ff 03 00 00    	cmp    $0x3ff,%edx
200008e1:	77 18                	ja     200008fb <rpc_handler+0x39>
200008e3:	8b 14 95 24 40 04 20 	mov    0x20044024(,%edx,4),%edx
200008ea:	85 d2                	test   %edx,%edx
200008ec:	74 0d                	je     200008fb <rpc_handler+0x39>
		returnValue = rpcHandlers[rpcID](rpcARG0, rpcData);
200008ee:	51                   	push   %ecx
200008ef:	51                   	push   %ecx
200008f0:	50                   	push   %eax
200008f1:	ff 75 f0             	pushl  -0x10(%ebp)
200008f4:	ff d2                	call   *%edx
200008f6:	83 c4 10             	add    $0x10,%esp
200008f9:	eb 03                	jmp    200008fe <rpc_handler+0x3c>
200008fb:	83 c8 ff             	or     $0xffffffff,%eax
	}

	rpc_return(returnValue);
200008fe:	83 ec 0c             	sub    $0xc,%esp
20000901:	50                   	push   %eax
20000902:	e8 72 ff ff ff       	call   20000879 <rpc_return>
20000907:	83 c4 10             	add    $0x10,%esp
}
2000090a:	c9                   	leave  
2000090b:	c3                   	ret    

2000090c <fRead>:
	syscall(&state);

	return state.eax;
}

FUTURE fRead(char* path, struct driver_data* drvData) {
2000090c:	55                   	push   %ebp
2000090d:	89 e5                	mov    %esp,%ebp
2000090f:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x305,
			.ebx = (uint32_t)path,
			.ecx = (uint32_t)drvData,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000912:	8b 45 08             	mov    0x8(%ebp),%eax
20000915:	c7 45 e0 05 03 00 00 	movl   $0x305,-0x20(%ebp)
2000091c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
2000091f:	8b 45 0c             	mov    0xc(%ebp),%eax
20000922:	89 45 e8             	mov    %eax,-0x18(%ebp)

	syscall(&state);
20000925:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000928:	50                   	push   %eax
			.eax = 0x305,
			.ebx = (uint32_t)path,
			.ecx = (uint32_t)drvData,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000929:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000930:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000937:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
2000093e:	e8 75 fc ff ff       	call   200005b8 <syscall>

	return state.eax;
}
20000943:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000946:	c9                   	leave  
20000947:	c3                   	ret    

20000948 <fWrite>:
	syscall(&state);

	return state.eax;
}

FUTURE fWrite(char* path, struct driver_data* drvData) {
20000948:	55                   	push   %ebp
20000949:	89 e5                	mov    %esp,%ebp
2000094b:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x304,
			.ebx = (uint32_t)path,
			.ecx = (uint32_t)drvData,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
2000094e:	8b 45 08             	mov    0x8(%ebp),%eax
20000951:	c7 45 e0 04 03 00 00 	movl   $0x304,-0x20(%ebp)
20000958:	89 45 e4             	mov    %eax,-0x1c(%ebp)
2000095b:	8b 45 0c             	mov    0xc(%ebp),%eax
2000095e:	89 45 e8             	mov    %eax,-0x18(%ebp)

	syscall(&state);
20000961:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000964:	50                   	push   %eax
			.eax = 0x304,
			.ebx = (uint32_t)path,
			.ecx = (uint32_t)drvData,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000965:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
2000096c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000973:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
2000097a:	e8 39 fc ff ff       	call   200005b8 <syscall>

	return state.eax;
}
2000097f:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000982:	c9                   	leave  
20000983:	c3                   	ret    

20000984 <fCall>:
	syscall(&state);

	return state.eax;
}

FUTURE fCall(char* driverName, int callID, struct driver_data* drvData) {
20000984:	55                   	push   %ebp
20000985:	89 e5                	mov    %esp,%ebp
20000987:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x303,
			.ebx = (uint32_t)driverName,
			.ecx = (uint32_t)drvData,
			.edx = callID,
			.esi = 0,
			.edi = 0 };
2000098a:	8b 45 08             	mov    0x8(%ebp),%eax
2000098d:	c7 45 e0 03 03 00 00 	movl   $0x303,-0x20(%ebp)
20000994:	89 45 e4             	mov    %eax,-0x1c(%ebp)
20000997:	8b 45 10             	mov    0x10(%ebp),%eax
2000099a:	89 45 e8             	mov    %eax,-0x18(%ebp)
2000099d:	8b 45 0c             	mov    0xc(%ebp),%eax
200009a0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	syscall(&state);
200009a3:	8d 45 e0             	lea    -0x20(%ebp),%eax
200009a6:	50                   	push   %eax
			.eax = 0x303,
			.ebx = (uint32_t)driverName,
			.ecx = (uint32_t)drvData,
			.edx = callID,
			.esi = 0,
			.edi = 0 };
200009a7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
200009ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
200009b5:	e8 fe fb ff ff       	call   200005b8 <syscall>

	return state.eax;
}
200009ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
200009bd:	c9                   	leave  
200009be:	c3                   	ret    

200009bf <fModify>:
	syscall(&state);

	return state.eax;
}

FUTURE fModify(char* path, struct driver_data* drvData) {
200009bf:	55                   	push   %ebp
200009c0:	89 e5                	mov    %esp,%ebp
200009c2:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x302,
			.ebx = (uint32_t)path,
			.ecx = (uint32_t)drvData,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
200009c5:	8b 45 08             	mov    0x8(%ebp),%eax
200009c8:	c7 45 e0 02 03 00 00 	movl   $0x302,-0x20(%ebp)
200009cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
200009d2:	8b 45 0c             	mov    0xc(%ebp),%eax
200009d5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	syscall(&state);
200009d8:	8d 45 e0             	lea    -0x20(%ebp),%eax
200009db:	50                   	push   %eax
			.eax = 0x302,
			.ebx = (uint32_t)path,
			.ecx = (uint32_t)drvData,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
200009dc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
200009e3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
200009ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
200009f1:	e8 c2 fb ff ff       	call   200005b8 <syscall>

	return state.eax;
}
200009f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
200009f9:	c9                   	leave  
200009fa:	c3                   	ret    

200009fb <inl>:
	syscall(&state);

	return state.eax;
}

uint32_t inl(uint16_t port) {
200009fb:	55                   	push   %ebp
200009fc:	89 e5                	mov    %esp,%ebp
200009fe:	83 ec 34             	sub    $0x34,%esp
20000a01:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
			.eax = 0x606,
			.ebx = port,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000a05:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	syscall(&state);
20000a08:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000a0b:	50                   	push   %eax
			.eax = 0x606,
			.ebx = port,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000a0c:	c7 45 e0 06 06 00 00 	movl   $0x606,-0x20(%ebp)
20000a13:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000a1a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000a21:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000a28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000a2f:	e8 84 fb ff ff       	call   200005b8 <syscall>

	return state.eax;
}
20000a34:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000a37:	c9                   	leave  
20000a38:	c3                   	ret    

20000a39 <inw>:
	syscall(&state);

	return state.eax;
}

uint16_t inw(uint16_t port) {
20000a39:	55                   	push   %ebp
20000a3a:	89 e5                	mov    %esp,%ebp
20000a3c:	83 ec 34             	sub    $0x34,%esp
20000a3f:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
			.eax = 0x605,
			.ebx = port,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000a43:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	syscall(&state);
20000a46:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000a49:	50                   	push   %eax
			.eax = 0x605,
			.ebx = port,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000a4a:	c7 45 e0 05 06 00 00 	movl   $0x605,-0x20(%ebp)
20000a51:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000a58:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000a5f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000a66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000a6d:	e8 46 fb ff ff       	call   200005b8 <syscall>

	return state.eax;
}
20000a72:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000a75:	c9                   	leave  
20000a76:	c3                   	ret    

20000a77 <inb>:
			.edi = 0 };

	syscall(&state);
}

uint8_t inb(uint16_t port) {
20000a77:	55                   	push   %ebp
20000a78:	89 e5                	mov    %esp,%ebp
20000a7a:	83 ec 34             	sub    $0x34,%esp
20000a7d:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
			.eax = 0x604,
			.ebx = port,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000a81:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	syscall(&state);
20000a84:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000a87:	50                   	push   %eax
			.eax = 0x604,
			.ebx = port,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000a88:	c7 45 e0 04 06 00 00 	movl   $0x604,-0x20(%ebp)
20000a8f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000a96:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000a9d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000aa4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000aab:	e8 08 fb ff ff       	call   200005b8 <syscall>

	return state.eax;
}
20000ab0:	8a 45 e0             	mov    -0x20(%ebp),%al
20000ab3:	c9                   	leave  
20000ab4:	c3                   	ret    

20000ab5 <outl>:
			.edi = 0 };

	syscall(&state);
}

void outl(uint16_t port, uint32_t value) {
20000ab5:	55                   	push   %ebp
20000ab6:	89 e5                	mov    %esp,%ebp
20000ab8:	83 ec 34             	sub    $0x34,%esp
20000abb:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
			.eax = 0x603,
			.ebx = port,
			.ecx = value,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000abf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
20000ac2:	8b 45 0c             	mov    0xc(%ebp),%eax
20000ac5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	syscall(&state);
20000ac8:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000acb:	50                   	push   %eax
			.eax = 0x603,
			.ebx = port,
			.ecx = value,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000acc:	c7 45 e0 03 06 00 00 	movl   $0x603,-0x20(%ebp)
20000ad3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000ada:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000ae1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000ae8:	e8 cb fa ff ff       	call   200005b8 <syscall>
20000aed:	83 c4 10             	add    $0x10,%esp
}
20000af0:	c9                   	leave  
20000af1:	c3                   	ret    

20000af2 <outw>:
			.edi = 0 };

	syscall(&state);
}

void outw(uint16_t port, uint16_t value) {
20000af2:	55                   	push   %ebp
20000af3:	89 e5                	mov    %esp,%ebp
20000af5:	83 ec 34             	sub    $0x34,%esp
20000af8:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
20000afc:	0f b7 55 08          	movzwl 0x8(%ebp),%edx
			.eax = 0x602,
			.ebx = port,
			.ecx = value,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000b00:	89 45 e8             	mov    %eax,-0x18(%ebp)

	syscall(&state);
20000b03:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000b06:	50                   	push   %eax
			.eax = 0x602,
			.ebx = port,
			.ecx = value,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000b07:	c7 45 e0 02 06 00 00 	movl   $0x602,-0x20(%ebp)
20000b0e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
20000b11:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000b18:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000b1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000b26:	e8 8d fa ff ff       	call   200005b8 <syscall>
20000b2b:	83 c4 10             	add    $0x10,%esp
}
20000b2e:	c9                   	leave  
20000b2f:	c3                   	ret    

20000b30 <outb>:
	syscall(&state);

	return state.eax;
}

void outb(uint16_t port, uint8_t value) {
20000b30:	55                   	push   %ebp
20000b31:	89 e5                	mov    %esp,%ebp
20000b33:	83 ec 34             	sub    $0x34,%esp
20000b36:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
			.eax = 0x601,
			.ebx = port,
			.ecx = value,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000b3a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
20000b3d:	c7 45 e0 01 06 00 00 	movl   $0x601,-0x20(%ebp)
20000b44:	0f b6 45 0c          	movzbl 0xc(%ebp),%eax
20000b48:	89 45 e8             	mov    %eax,-0x18(%ebp)

	syscall(&state);
20000b4b:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000b4e:	50                   	push   %eax
			.eax = 0x601,
			.ebx = port,
			.ecx = value,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000b4f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000b56:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000b5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000b64:	e8 4f fa ff ff       	call   200005b8 <syscall>
20000b69:	83 c4 10             	add    $0x10,%esp
}
20000b6c:	c9                   	leave  
20000b6d:	c3                   	ret    

20000b6e <register_irq_rpc>:
	syscall(&state);

	return state.eax;
}

int register_irq_rpc(uint32_t irqID, int rpcID) {
20000b6e:	55                   	push   %ebp
20000b6f:	89 e5                	mov    %esp,%ebp
20000b71:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x600,
			.ebx = irqID,
			.ecx = rpcID,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000b74:	8b 45 08             	mov    0x8(%ebp),%eax
20000b77:	c7 45 e0 00 06 00 00 	movl   $0x600,-0x20(%ebp)
20000b7e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
20000b81:	8b 45 0c             	mov    0xc(%ebp),%eax
20000b84:	89 45 e8             	mov    %eax,-0x18(%ebp)

	syscall(&state);
20000b87:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000b8a:	50                   	push   %eax
			.eax = 0x600,
			.ebx = irqID,
			.ecx = rpcID,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000b8b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000b92:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000b99:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000ba0:	e8 13 fa ff ff       	call   200005b8 <syscall>

	return state.eax;
}
20000ba5:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000ba8:	c9                   	leave  
20000ba9:	c3                   	ret    

20000baa <register_path>:
	syscall(&state);

	return state.eax;
}

int register_path(char* path, int driverID, int resourceID) {
20000baa:	55                   	push   %ebp
20000bab:	89 e5                	mov    %esp,%ebp
20000bad:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x301,
			.ebx = (uint32_t)path,
			.ecx = driverID,
			.edx = resourceID,
			.esi = 0,
			.edi = 0 };
20000bb0:	8b 45 08             	mov    0x8(%ebp),%eax
20000bb3:	c7 45 e0 01 03 00 00 	movl   $0x301,-0x20(%ebp)
20000bba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
20000bbd:	8b 45 0c             	mov    0xc(%ebp),%eax
20000bc0:	89 45 e8             	mov    %eax,-0x18(%ebp)
20000bc3:	8b 45 10             	mov    0x10(%ebp),%eax
20000bc6:	89 45 ec             	mov    %eax,-0x14(%ebp)

	syscall(&state);
20000bc9:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000bcc:	50                   	push   %eax
			.eax = 0x301,
			.ebx = (uint32_t)path,
			.ecx = driverID,
			.edx = resourceID,
			.esi = 0,
			.edi = 0 };
20000bcd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000bd4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000bdb:	e8 d8 f9 ff ff       	call   200005b8 <syscall>

	return state.eax;
}
20000be0:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000be3:	c9                   	leave  
20000be4:	c3                   	ret    

20000be5 <register_driver>:
#include "driver.h"
#include "syscall.h"
#include "memory.h"

int register_driver(int dModifyID, int dInfoID, int dReadID, int dWriteID, char* drvName) {
20000be5:	55                   	push   %ebp
20000be6:	89 e5                	mov    %esp,%ebp
20000be8:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x300,
			.ebx = dModifyID,
			.ecx = dInfoID,
			.edx = dReadID,
			.esi = dWriteID,
			.edi = (uint32_t)drvName };
20000beb:	8b 45 08             	mov    0x8(%ebp),%eax
20000bee:	c7 45 e0 00 03 00 00 	movl   $0x300,-0x20(%ebp)
20000bf5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
20000bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
20000bfb:	89 45 e8             	mov    %eax,-0x18(%ebp)
20000bfe:	8b 45 10             	mov    0x10(%ebp),%eax
20000c01:	89 45 ec             	mov    %eax,-0x14(%ebp)
20000c04:	8b 45 14             	mov    0x14(%ebp),%eax
20000c07:	89 45 f0             	mov    %eax,-0x10(%ebp)
20000c0a:	8b 45 18             	mov    0x18(%ebp),%eax
20000c0d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	syscall(&state);
20000c10:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000c13:	50                   	push   %eax
20000c14:	e8 9f f9 ff ff       	call   200005b8 <syscall>

	return state.eax;
}
20000c19:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000c1c:	c9                   	leave  
20000c1d:	c3                   	ret    
	...

20000c20 <memset>:
			.edi = 0 };

	syscall(&state);
}

void* memset(void* buf, int c, uint32_t n) {
20000c20:	55                   	push   %ebp
20000c21:	89 e5                	mov    %esp,%ebp
20000c23:	53                   	push   %ebx
20000c24:	8b 45 08             	mov    0x8(%ebp),%eax
20000c27:	8b 5d 0c             	mov    0xc(%ebp),%ebx
20000c2a:	8b 4d 10             	mov    0x10(%ebp),%ecx
	unsigned char* p = buf;
20000c2d:	89 c2                	mov    %eax,%edx

	while (n--) {
20000c2f:	eb 04                	jmp    20000c35 <memset+0x15>
		*p++ = c;
20000c31:	88 1a                	mov    %bl,(%edx)
20000c33:	49                   	dec    %ecx
20000c34:	42                   	inc    %edx
}

void* memset(void* buf, int c, uint32_t n) {
	unsigned char* p = buf;

	while (n--) {
20000c35:	85 c9                	test   %ecx,%ecx
20000c37:	75 f8                	jne    20000c31 <memset+0x11>
		*p++ = c;
	}

	return buf;
}
20000c39:	5b                   	pop    %ebx
20000c3a:	5d                   	pop    %ebp
20000c3b:	c3                   	ret    

20000c3c <memcpy>:

void* memcpy(void* dest, const void* src, uint32_t n) {
20000c3c:	55                   	push   %ebp
	unsigned char* d = dest;
	const unsigned char* s = src;

	if (n == 0)
20000c3d:	31 c9                	xor    %ecx,%ecx
	}

	return buf;
}

void* memcpy(void* dest, const void* src, uint32_t n) {
20000c3f:	89 e5                	mov    %esp,%ebp
20000c41:	56                   	push   %esi
20000c42:	53                   	push   %ebx
20000c43:	8b 75 10             	mov    0x10(%ebp),%esi
20000c46:	8b 45 08             	mov    0x8(%ebp),%eax
20000c49:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	unsigned char* d = dest;
	const unsigned char* s = src;

	if (n == 0)
20000c4c:	85 f6                	test   %esi,%esi
20000c4e:	75 04                	jne    20000c54 <memcpy+0x18>
20000c50:	31 c0                	xor    %eax,%eax
20000c52:	eb 0a                	jmp    20000c5e <memcpy+0x22>
		return 0;

	while (n--) {
		*(d++) = *(s++);
20000c54:	8a 14 0b             	mov    (%ebx,%ecx,1),%dl
20000c57:	88 14 08             	mov    %dl,(%eax,%ecx,1)
20000c5a:	41                   	inc    %ecx
	const unsigned char* s = src;

	if (n == 0)
		return 0;

	while (n--) {
20000c5b:	4e                   	dec    %esi
20000c5c:	75 f6                	jne    20000c54 <memcpy+0x18>
		*(d++) = *(s++);
	}

	return dest;
}
20000c5e:	5b                   	pop    %ebx
20000c5f:	5e                   	pop    %esi
20000c60:	5d                   	pop    %ebp
20000c61:	c3                   	ret    

20000c62 <memcmp>:

int memcmp(const void* ptr1, const void* ptr2, uint32_t num) {
20000c62:	55                   	push   %ebp
	if (ptr1 == 0)
20000c63:	83 c8 ff             	or     $0xffffffff,%eax
	}

	return dest;
}

int memcmp(const void* ptr1, const void* ptr2, uint32_t num) {
20000c66:	89 e5                	mov    %esp,%ebp
20000c68:	57                   	push   %edi
20000c69:	56                   	push   %esi
20000c6a:	53                   	push   %ebx
20000c6b:	8b 75 08             	mov    0x8(%ebp),%esi
20000c6e:	8b 7d 0c             	mov    0xc(%ebp),%edi
20000c71:	8b 5d 10             	mov    0x10(%ebp),%ebx
	if (ptr1 == 0)
20000c74:	85 f6                	test   %esi,%esi
20000c76:	74 2c                	je     20000ca4 <memcmp+0x42>
		return -1;
	if (ptr2 == 0)
20000c78:	b8 01 00 00 00       	mov    $0x1,%eax
20000c7d:	85 ff                	test   %edi,%edi
20000c7f:	74 23                	je     20000ca4 <memcmp+0x42>
		return 1;
	if (num == 0)
20000c81:	31 d2                	xor    %edx,%edx
20000c83:	85 db                	test   %ebx,%ebx
20000c85:	75 17                	jne    20000c9e <memcmp+0x3c>
20000c87:	eb 19                	jmp    20000ca2 <memcmp+0x40>

	const uint8_t* pa = ptr1;
	const uint8_t* pb = ptr2;

	for (uint32_t i = 0; i < num; i++) {
		if (pa[i] != pb[i]) {
20000c89:	8a 04 16             	mov    (%esi,%edx,1),%al
20000c8c:	8a 0c 17             	mov    (%edi,%edx,1),%cl
20000c8f:	38 c8                	cmp    %cl,%al
20000c91:	74 0a                	je     20000c9d <memcmp+0x3b>
			return pa[i] - pb[i];
20000c93:	0f b6 c0             	movzbl %al,%eax
20000c96:	0f b6 c9             	movzbl %cl,%ecx
20000c99:	29 c8                	sub    %ecx,%eax
20000c9b:	eb 07                	jmp    20000ca4 <memcmp+0x42>
		return 0;

	const uint8_t* pa = ptr1;
	const uint8_t* pb = ptr2;

	for (uint32_t i = 0; i < num; i++) {
20000c9d:	42                   	inc    %edx
20000c9e:	39 da                	cmp    %ebx,%edx
20000ca0:	72 e7                	jb     20000c89 <memcmp+0x27>
20000ca2:	31 c0                	xor    %eax,%eax
		if (pa[i] != pb[i]) {
			return pa[i] - pb[i];
		}
	}
	return 0;
}
20000ca4:	5b                   	pop    %ebx
20000ca5:	5e                   	pop    %esi
20000ca6:	5f                   	pop    %edi
20000ca7:	5d                   	pop    %ebp
20000ca8:	c3                   	ret    

20000ca9 <pfree>:
	memset((void*)state.eax, 0, pages * 0x1000);

	return (void*)state.eax;
}

void pfree(void* page) {
20000ca9:	55                   	push   %ebp
20000caa:	89 e5                	mov    %esp,%ebp
20000cac:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x401,
			.ebx = (uint32_t)page,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000caf:	8b 45 08             	mov    0x8(%ebp),%eax
20000cb2:	c7 45 e0 01 04 00 00 	movl   $0x401,-0x20(%ebp)
20000cb9:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	syscall(&state);
20000cbc:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000cbf:	50                   	push   %eax
			.eax = 0x401,
			.ebx = (uint32_t)page,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000cc0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000cc7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000cce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000cd5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000cdc:	e8 d7 f8 ff ff       	call   200005b8 <syscall>
20000ce1:	83 c4 10             	add    $0x10,%esp
}
20000ce4:	c9                   	leave  
20000ce5:	c3                   	ret    

20000ce6 <pcalloc>:

void* palloc() {
	return pcalloc(1);
}

void* pcalloc(uint32_t pages) {
20000ce6:	55                   	push   %ebp
20000ce7:	89 e5                	mov    %esp,%ebp
20000ce9:	53                   	push   %ebx
20000cea:	83 ec 30             	sub    $0x30,%esp
20000ced:	8b 5d 08             	mov    0x8(%ebp),%ebx
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };

	syscall(&state);
20000cf0:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000cf3:	50                   	push   %eax
			.eax = 0x400,
			.ebx = pages,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000cf4:	c7 45 e0 00 04 00 00 	movl   $0x400,-0x20(%ebp)
20000cfb:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
20000cfe:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000d05:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000d0c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000d13:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000d1a:	e8 99 f8 ff ff       	call   200005b8 <syscall>

	memset((void*)state.eax, 0, pages * 0x1000);
20000d1f:	89 da                	mov    %ebx,%edx

	syscall(&state);
}

void* memset(void* buf, int c, uint32_t n) {
	unsigned char* p = buf;
20000d21:	8b 45 e0             	mov    -0x20(%ebp),%eax
			.esi = 0,
			.edi = 0 };

	syscall(&state);

	memset((void*)state.eax, 0, pages * 0x1000);
20000d24:	c1 e2 0c             	shl    $0xc,%edx

	syscall(&state);
}

void* memset(void* buf, int c, uint32_t n) {
	unsigned char* p = buf;
20000d27:	83 c4 10             	add    $0x10,%esp
20000d2a:	eb 05                	jmp    20000d31 <pcalloc+0x4b>

	while (n--) {
		*p++ = c;
20000d2c:	c6 00 00             	movb   $0x0,(%eax)
20000d2f:	4a                   	dec    %edx
20000d30:	40                   	inc    %eax
}

void* memset(void* buf, int c, uint32_t n) {
	unsigned char* p = buf;

	while (n--) {
20000d31:	85 d2                	test   %edx,%edx
20000d33:	75 f7                	jne    20000d2c <pcalloc+0x46>
	syscall(&state);

	memset((void*)state.eax, 0, pages * 0x1000);

	return (void*)state.eax;
}
20000d35:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000d38:	8b 5d fc             	mov    -0x4(%ebp),%ebx
20000d3b:	c9                   	leave  
20000d3c:	c3                   	ret    

20000d3d <palloc>:
#include "memory.h"
#include "syscall.h"

void* palloc() {
20000d3d:	55                   	push   %ebp
20000d3e:	89 e5                	mov    %esp,%ebp
20000d40:	83 ec 14             	sub    $0x14,%esp
	return pcalloc(1);
20000d43:	6a 01                	push   $0x1
20000d45:	e8 9c ff ff ff       	call   20000ce6 <pcalloc>
}
20000d4a:	c9                   	leave  
20000d4b:	c3                   	ret    

20000d4c <free>:
		cur = cur->next;
	}
	return NULL;
}

void free(void* ptr) {
20000d4c:	55                   	push   %ebp
20000d4d:	89 e5                	mov    %esp,%ebp
20000d4f:	57                   	push   %edi
20000d50:	56                   	push   %esi
20000d51:	53                   	push   %ebx
20000d52:	83 ec 2c             	sub    $0x2c,%esp
20000d55:	8b 45 08             	mov    0x8(%ebp),%eax
	struct memory_node* cur = first_used;
20000d58:	8b 1d 28 50 04 20    	mov    0x20045028,%ebx

	while (cur != NULL) {
20000d5e:	e9 d3 00 00 00       	jmp    20000e36 <free+0xea>
		if (cur->address == (uint32_t) ptr) {
20000d63:	3b 43 04             	cmp    0x4(%ebx),%eax
20000d66:	0f 85 c7 00 00 00    	jne    20000e33 <free+0xe7>
			memset(ptr, 0, cur->size);
20000d6c:	52                   	push   %edx
20000d6d:	ff 33                	pushl  (%ebx)
20000d6f:	6a 00                	push   $0x0
20000d71:	50                   	push   %eax
20000d72:	e8 a9 fe ff ff       	call   20000c20 <memset>
			malloced -= cur->size;
20000d77:	8b 03                	mov    (%ebx),%eax
20000d79:	29 05 30 50 04 20    	sub    %eax,0x20045030
struct memory_node* first_used = 0;
struct memory_node* first_free = 0;

static void remove_from_list(struct memory_node** root, struct memory_node* element) {
	struct memory_node* last = 0;
	struct memory_node* cur = *root;
20000d7f:	31 d2                	xor    %edx,%edx
20000d81:	a1 28 50 04 20       	mov    0x20045028,%eax
20000d86:	83 c4 10             	add    $0x10,%esp
20000d89:	eb 22                	jmp    20000dad <free+0x61>

	while (cur != NULL) {
		if (cur == element) {
20000d8b:	39 d8                	cmp    %ebx,%eax
20000d8d:	75 19                	jne    20000da8 <free+0x5c>
			if (last == NULL) {
20000d8f:	85 d2                	test   %edx,%edx
20000d91:	8b 43 08             	mov    0x8(%ebx),%eax
20000d94:	75 0d                	jne    20000da3 <free+0x57>
				*root = cur->next;
20000d96:	a3 28 50 04 20       	mov    %eax,0x20045028
20000d9b:	8b 15 2c 50 04 20    	mov    0x2004502c,%edx
20000da1:	eb 10                	jmp    20000db3 <free+0x67>
				return;
			} else {
				last->next = cur->next;
20000da3:	89 42 08             	mov    %eax,0x8(%edx)
20000da6:	eb f3                	jmp    20000d9b <free+0x4f>
				return;
			}
		}
		last = cur;
		cur = cur->next;
20000da8:	89 c2                	mov    %eax,%edx
20000daa:	8b 40 08             	mov    0x8(%eax),%eax

static void remove_from_list(struct memory_node** root, struct memory_node* element) {
	struct memory_node* last = 0;
	struct memory_node* cur = *root;

	while (cur != NULL) {
20000dad:	85 c0                	test   %eax,%eax
20000daf:	75 da                	jne    20000d8b <free+0x3f>
20000db1:	eb e8                	jmp    20000d9b <free+0x4f>
20000db3:	89 d0                	mov    %edx,%eax
20000db5:	eb 6d                	jmp    20000e24 <free+0xd8>
	struct memory_node* cur;

	editedList: cur = first_free;

	while (cur != NULL) {
		if (cur->address + cur->size == tf->address) {
20000db7:	8b 48 04             	mov    0x4(%eax),%ecx
20000dba:	8b 30                	mov    (%eax),%esi
20000dbc:	8b 7b 04             	mov    0x4(%ebx),%edi
20000dbf:	89 7d d4             	mov    %edi,-0x2c(%ebp)
20000dc2:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
20000dc5:	89 7d e4             	mov    %edi,-0x1c(%ebp)
20000dc8:	8b 7d d4             	mov    -0x2c(%ebp),%edi
20000dcb:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
20000dce:	75 18                	jne    20000de8 <free+0x9c>
			tf->address = cur->address;
20000dd0:	89 4b 04             	mov    %ecx,0x4(%ebx)
20000dd3:	31 f6                	xor    %esi,%esi
20000dd5:	89 d1                	mov    %edx,%ecx
20000dd7:	eb 09                	jmp    20000de2 <free+0x96>
static void remove_from_list(struct memory_node** root, struct memory_node* element) {
	struct memory_node* last = 0;
	struct memory_node* cur = *root;

	while (cur != NULL) {
		if (cur == element) {
20000dd9:	39 c1                	cmp    %eax,%ecx
20000ddb:	74 29                	je     20000e06 <free+0xba>
				last->next = cur->next;
				return;
			}
		}
		last = cur;
		cur = cur->next;
20000ddd:	89 ce                	mov    %ecx,%esi
20000ddf:	8b 49 08             	mov    0x8(%ecx),%ecx

static void remove_from_list(struct memory_node** root, struct memory_node* element) {
	struct memory_node* last = 0;
	struct memory_node* cur = *root;

	while (cur != NULL) {
20000de2:	85 c9                	test   %ecx,%ecx
20000de4:	75 f3                	jne    20000dd9 <free+0x8d>
20000de6:	eb cb                	jmp    20000db3 <free+0x67>
			tf->address = cur->address;
			remove_from_list(&first_free, cur);
			goto editedList;
		}

		if (cur->address == tf->address + tf->size) {
20000de8:	8b 3b                	mov    (%ebx),%edi
20000dea:	89 7d e4             	mov    %edi,-0x1c(%ebp)
20000ded:	8b 7d d4             	mov    -0x2c(%ebp),%edi
20000df0:	03 7d e4             	add    -0x1c(%ebp),%edi
20000df3:	39 f9                	cmp    %edi,%ecx
20000df5:	75 2a                	jne    20000e21 <free+0xd5>
			tf->size += cur->size;
20000df7:	03 75 e4             	add    -0x1c(%ebp),%esi
20000dfa:	89 d1                	mov    %edx,%ecx
20000dfc:	89 33                	mov    %esi,(%ebx)
20000dfe:	31 f6                	xor    %esi,%esi
20000e00:	eb 19                	jmp    20000e1b <free+0xcf>
static void remove_from_list(struct memory_node** root, struct memory_node* element) {
	struct memory_node* last = 0;
	struct memory_node* cur = *root;

	while (cur != NULL) {
		if (cur == element) {
20000e02:	39 c1                	cmp    %eax,%ecx
20000e04:	75 10                	jne    20000e16 <free+0xca>
			if (last == NULL) {
20000e06:	85 f6                	test   %esi,%esi
20000e08:	8b 41 08             	mov    0x8(%ecx),%eax
20000e0b:	75 04                	jne    20000e11 <free+0xc5>
				*root = cur->next;
20000e0d:	89 c2                	mov    %eax,%edx
20000e0f:	eb a2                	jmp    20000db3 <free+0x67>
				return;
			} else {
				last->next = cur->next;
20000e11:	89 46 08             	mov    %eax,0x8(%esi)
20000e14:	eb 9d                	jmp    20000db3 <free+0x67>
				return;
			}
		}
		last = cur;
		cur = cur->next;
20000e16:	89 ce                	mov    %ecx,%esi
20000e18:	8b 49 08             	mov    0x8(%ecx),%ecx

static void remove_from_list(struct memory_node** root, struct memory_node* element) {
	struct memory_node* last = 0;
	struct memory_node* cur = *root;

	while (cur != NULL) {
20000e1b:	85 c9                	test   %ecx,%ecx
20000e1d:	75 e3                	jne    20000e02 <free+0xb6>
20000e1f:	eb 92                	jmp    20000db3 <free+0x67>
			tf->size += cur->size;
			remove_from_list(&first_free, cur);
			goto editedList;
		}

		cur = cur->next;
20000e21:	8b 40 08             	mov    0x8(%eax),%eax

	struct memory_node* cur;

	editedList: cur = first_free;

	while (cur != NULL) {
20000e24:	85 c0                	test   %eax,%eax
20000e26:	75 8f                	jne    20000db7 <free+0x6b>
		cur = cur->next;
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
20000e28:	89 53 08             	mov    %edx,0x8(%ebx)
	*root = element;
20000e2b:	89 1d 2c 50 04 20    	mov    %ebx,0x2004502c
		if (cur->address == (uint32_t) ptr) {
			memset(ptr, 0, cur->size);
			malloced -= cur->size;

			merge_into_frees(cur);
			break;
20000e31:	eb 0b                	jmp    20000e3e <free+0xf2>
		}
		cur = cur->next;
20000e33:	8b 5b 08             	mov    0x8(%ebx),%ebx
}

void free(void* ptr) {
	struct memory_node* cur = first_used;

	while (cur != NULL) {
20000e36:	85 db                	test   %ebx,%ebx
20000e38:	0f 85 25 ff ff ff    	jne    20000d63 <free+0x17>
			merge_into_frees(cur);
			break;
		}
		cur = cur->next;
	}
}
20000e3e:	8d 65 f4             	lea    -0xc(%ebp),%esp
20000e41:	5b                   	pop    %ebx
20000e42:	5e                   	pop    %esi
20000e43:	5f                   	pop    %edi
20000e44:	5d                   	pop    %ebp
20000e45:	c3                   	ret    

20000e46 <pop_unused_node>:
	for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
		append_to_list(&first_unused, &(new_nodes[i]));
	}
}

static struct memory_node* pop_unused_node() {
20000e46:	55                   	push   %ebp
20000e47:	89 e5                	mov    %esp,%ebp
20000e49:	53                   	push   %ebx
20000e4a:	83 ec 04             	sub    $0x4,%esp
	element->next = *root;
	*root = element;
}

static struct memory_node* pop_from_list(struct memory_node** root) {
	if (*root == NULL) return NULL;
20000e4d:	a1 24 50 04 20       	mov    0x20045024,%eax
20000e52:	eb 45                	jmp    20000e99 <pop_unused_node+0x53>
	remove_from_list(root, pop);
	return pop;
}

static void allocate_unused_nodes() {
	struct memory_node* new_nodes = pcalloc(1);
20000e54:	83 ec 0c             	sub    $0xc,%esp
20000e57:	6a 01                	push   $0x1
20000e59:	e8 88 fe ff ff       	call   20000ce6 <pcalloc>
	memset(new_nodes, 0, PAGESIZE);
20000e5e:	83 c4 0c             	add    $0xc,%esp
	remove_from_list(root, pop);
	return pop;
}

static void allocate_unused_nodes() {
	struct memory_node* new_nodes = pcalloc(1);
20000e61:	89 c3                	mov    %eax,%ebx
	memset(new_nodes, 0, PAGESIZE);
20000e63:	68 00 10 00 00       	push   $0x1000
20000e68:	6a 00                	push   $0x0
20000e6a:	50                   	push   %eax
20000e6b:	e8 b0 fd ff ff       	call   20000c20 <memset>
20000e70:	8b 15 24 50 04 20    	mov    0x20045024,%edx
20000e76:	8d 43 0c             	lea    0xc(%ebx),%eax
	for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
		append_to_list(&first_unused, &(new_nodes[i]));
	}
}

static struct memory_node* pop_unused_node() {
20000e79:	8d 8b fc 0f 00 00    	lea    0xffc(%ebx),%ecx
20000e7f:	83 c4 10             	add    $0x10,%esp
		cur = cur->next;
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
20000e82:	89 50 08             	mov    %edx,0x8(%eax)
20000e85:	89 c2                	mov    %eax,%edx
20000e87:	83 c0 0c             	add    $0xc,%eax

static void allocate_unused_nodes() {
	struct memory_node* new_nodes = pcalloc(1);
	memset(new_nodes, 0, PAGESIZE);

	for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
20000e8a:	39 c8                	cmp    %ecx,%eax
20000e8c:	75 f4                	jne    20000e82 <pop_unused_node+0x3c>
20000e8e:	8d 83 f0 0f 00 00    	lea    0xff0(%ebx),%eax
20000e94:	a3 24 50 04 20       	mov    %eax,0x20045024
	element->next = *root;
	*root = element;
}

static struct memory_node* pop_from_list(struct memory_node** root) {
	if (*root == NULL) return NULL;
20000e99:	85 c0                	test   %eax,%eax
20000e9b:	74 b7                	je     20000e54 <pop_unused_node+0xe>
	struct memory_node* cur = *root;

	while (cur != NULL) {
		if (cur == element) {
			if (last == NULL) {
				*root = cur->next;
20000e9d:	8b 50 08             	mov    0x8(%eax),%edx
}

static struct memory_node* pop_unused_node() {
	struct memory_node* ret = pop_from_list(&first_unused);

	while (ret == NULL) {
20000ea0:	85 c0                	test   %eax,%eax
	struct memory_node* cur = *root;

	while (cur != NULL) {
		if (cur == element) {
			if (last == NULL) {
				*root = cur->next;
20000ea2:	89 15 24 50 04 20    	mov    %edx,0x20045024
}

static struct memory_node* pop_unused_node() {
	struct memory_node* ret = pop_from_list(&first_unused);

	while (ret == NULL) {
20000ea8:	74 aa                	je     20000e54 <pop_unused_node+0xe>
		allocate_unused_nodes();
		ret = pop_from_list(&first_unused);
	}

	return ret;
}
20000eaa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
20000ead:	c9                   	leave  
20000eae:	c3                   	ret    

20000eaf <malloc>:
	append_to_list(&first_free, tf);
}

uint32_t malloced = 0;

void* malloc(size_t size) {
20000eaf:	55                   	push   %ebp
	if (size == 0)
20000eb0:	31 c0                	xor    %eax,%eax
	append_to_list(&first_free, tf);
}

uint32_t malloced = 0;

void* malloc(size_t size) {
20000eb2:	89 e5                	mov    %esp,%ebp
20000eb4:	57                   	push   %edi
20000eb5:	56                   	push   %esi
20000eb6:	53                   	push   %ebx
20000eb7:	83 ec 1c             	sub    $0x1c,%esp
20000eba:	8b 75 08             	mov    0x8(%ebp),%esi
	if (size == 0)
20000ebd:	85 f6                	test   %esi,%esi
20000ebf:	0f 84 aa 00 00 00    	je     20000f6f <malloc+0xc0>
		return NULL;

	malloced += size;

	struct memory_node* cur = first_free;
20000ec5:	a1 2c 50 04 20       	mov    0x2004502c,%eax

void* malloc(size_t size) {
	if (size == 0)
		return NULL;

	malloced += size;
20000eca:	01 35 30 50 04 20    	add    %esi,0x20045030

	struct memory_node* cur = first_free;
20000ed0:	89 c3                	mov    %eax,%ebx

	while (cur != NULL) {
20000ed2:	eb 07                	jmp    20000edb <malloc+0x2c>
		if (cur->size >= size) {
20000ed4:	39 33                	cmp    %esi,(%ebx)
20000ed6:	73 0c                	jae    20000ee4 <malloc+0x35>
			break;
		}
		cur = cur->next;
20000ed8:	8b 5b 08             	mov    0x8(%ebx),%ebx

	malloced += size;

	struct memory_node* cur = first_free;

	while (cur != NULL) {
20000edb:	85 db                	test   %ebx,%ebx
20000edd:	75 f5                	jne    20000ed4 <malloc+0x25>
20000edf:	e9 93 00 00 00       	jmp    20000f77 <malloc+0xc8>

		append_to_list(&first_used, fill);

		return (void*) fill->address;
	} else {
		uint32_t freesize = cur->size - size;
20000ee4:	8b 3b                	mov    (%ebx),%edi

		cur->size = size;
20000ee6:	31 d2                	xor    %edx,%edx

		append_to_list(&first_used, fill);

		return (void*) fill->address;
	} else {
		uint32_t freesize = cur->size - size;
20000ee8:	29 f7                	sub    %esi,%edi

		cur->size = size;
20000eea:	89 33                	mov    %esi,(%ebx)
20000eec:	eb 4b                	jmp    20000f39 <malloc+0x8a>

		fill->address = (uint32_t) addr;
		fill->size = (uint32_t) size;

		if (pgs * PAGESIZE > size) {
			struct memory_node* free = pop_unused_node();
20000eee:	e8 53 ff ff ff       	call   20000e46 <pop_unused_node>

			free->address = fill->address + fill->size;
20000ef3:	8b 13                	mov    (%ebx),%edx
20000ef5:	03 53 04             	add    0x4(%ebx),%edx
			free->size = pgs * PAGESIZE - size;
20000ef8:	29 f7                	sub    %esi,%edi
		fill->size = (uint32_t) size;

		if (pgs * PAGESIZE > size) {
			struct memory_node* free = pop_unused_node();

			free->address = fill->address + fill->size;
20000efa:	89 50 04             	mov    %edx,0x4(%eax)
		cur = cur->next;
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
20000efd:	8b 15 2c 50 04 20    	mov    0x2004502c,%edx
20000f03:	89 50 08             	mov    %edx,0x8(%eax)

		if (pgs * PAGESIZE > size) {
			struct memory_node* free = pop_unused_node();

			free->address = fill->address + fill->size;
			free->size = pgs * PAGESIZE - size;
20000f06:	89 38                	mov    %edi,(%eax)
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
	*root = element;
20000f08:	a3 2c 50 04 20       	mov    %eax,0x2004502c
		cur = cur->next;
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
20000f0d:	a1 28 50 04 20       	mov    0x20045028,%eax
20000f12:	89 43 08             	mov    %eax,0x8(%ebx)
	*root = element;
20000f15:	89 1d 28 50 04 20    	mov    %ebx,0x20045028
20000f1b:	eb 4f                	jmp    20000f6c <malloc+0xbd>
static void remove_from_list(struct memory_node** root, struct memory_node* element) {
	struct memory_node* last = 0;
	struct memory_node* cur = *root;

	while (cur != NULL) {
		if (cur == element) {
20000f1d:	39 d8                	cmp    %ebx,%eax
20000f1f:	75 13                	jne    20000f34 <malloc+0x85>
			if (last == NULL) {
20000f21:	85 d2                	test   %edx,%edx
20000f23:	8b 43 08             	mov    0x8(%ebx),%eax
20000f26:	75 07                	jne    20000f2f <malloc+0x80>
				*root = cur->next;
20000f28:	a3 2c 50 04 20       	mov    %eax,0x2004502c
20000f2d:	eb 0e                	jmp    20000f3d <malloc+0x8e>
				return;
			} else {
				last->next = cur->next;
20000f2f:	89 42 08             	mov    %eax,0x8(%edx)
20000f32:	eb 09                	jmp    20000f3d <malloc+0x8e>
				return;
			}
		}
		last = cur;
		cur = cur->next;
20000f34:	89 c2                	mov    %eax,%edx
20000f36:	8b 40 08             	mov    0x8(%eax),%eax

static void remove_from_list(struct memory_node** root, struct memory_node* element) {
	struct memory_node* last = 0;
	struct memory_node* cur = *root;

	while (cur != NULL) {
20000f39:	85 c0                	test   %eax,%eax
20000f3b:	75 e0                	jne    20000f1d <malloc+0x6e>
		cur = cur->next;
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
20000f3d:	a1 28 50 04 20       	mov    0x20045028,%eax
		cur->size = size;

		remove_from_list(&first_free, cur);
		append_to_list(&first_used, cur);

		if (freesize > 0) {
20000f42:	85 ff                	test   %edi,%edi
		cur = cur->next;
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
20000f44:	89 43 08             	mov    %eax,0x8(%ebx)
	*root = element;
20000f47:	89 1d 28 50 04 20    	mov    %ebx,0x20045028
		cur->size = size;

		remove_from_list(&first_free, cur);
		append_to_list(&first_used, cur);

		if (freesize > 0) {
20000f4d:	74 1d                	je     20000f6c <malloc+0xbd>
			struct memory_node* free = pop_unused_node();
20000f4f:	e8 f2 fe ff ff       	call   20000e46 <pop_unused_node>

			free->address = cur->address + cur->size;
20000f54:	8b 13                	mov    (%ebx),%edx
20000f56:	03 53 04             	add    0x4(%ebx),%edx
20000f59:	89 50 04             	mov    %edx,0x4(%eax)
		cur = cur->next;
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
20000f5c:	8b 15 2c 50 04 20    	mov    0x2004502c,%edx
20000f62:	89 50 08             	mov    %edx,0x8(%eax)

		if (freesize > 0) {
			struct memory_node* free = pop_unused_node();

			free->address = cur->address + cur->size;
			free->size = freesize;
20000f65:	89 38                	mov    %edi,(%eax)
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
	*root = element;
20000f67:	a3 2c 50 04 20       	mov    %eax,0x2004502c
			free->size = freesize;

			append_to_list(&first_free, free);
		}

		return (void*) cur->address;
20000f6c:	8b 43 04             	mov    0x4(%ebx),%eax
	}
}
20000f6f:	8d 65 f4             	lea    -0xc(%ebp),%esp
20000f72:	5b                   	pop    %ebx
20000f73:	5e                   	pop    %esi
20000f74:	5f                   	pop    %edi
20000f75:	5d                   	pop    %ebp
20000f76:	c3                   	ret    
	}

	if (cur == NULL) {
		uint32_t pgs = size / PAGESIZE;

		if ((size % PAGESIZE) != 0)
20000f77:	89 f0                	mov    %esi,%eax
		}
		cur = cur->next;
	}

	if (cur == NULL) {
		uint32_t pgs = size / PAGESIZE;
20000f79:	89 f7                	mov    %esi,%edi
20000f7b:	c1 ef 0c             	shr    $0xc,%edi

		if ((size % PAGESIZE) != 0)
20000f7e:	25 ff 0f 00 00       	and    $0xfff,%eax
			pgs++;
20000f83:	83 f8 01             	cmp    $0x1,%eax
20000f86:	83 df ff             	sbb    $0xffffffff,%edi

		void* addr = pcalloc(pgs);
20000f89:	83 ec 0c             	sub    $0xc,%esp
20000f8c:	57                   	push   %edi
20000f8d:	e8 54 fd ff ff       	call   20000ce6 <pcalloc>
		struct memory_node* fill = pop_unused_node();

		fill->address = (uint32_t) addr;
		fill->size = (uint32_t) size;

		if (pgs * PAGESIZE > size) {
20000f92:	c1 e7 0c             	shl    $0xc,%edi
		if ((size % PAGESIZE) != 0)
			pgs++;

		void* addr = pcalloc(pgs);

		struct memory_node* fill = pop_unused_node();
20000f95:	89 45 e4             	mov    %eax,-0x1c(%ebp)
20000f98:	e8 a9 fe ff ff       	call   20000e46 <pop_unused_node>

		fill->address = (uint32_t) addr;
20000f9d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
		fill->size = (uint32_t) size;

		if (pgs * PAGESIZE > size) {
20000fa0:	83 c4 10             	add    $0x10,%esp
		if ((size % PAGESIZE) != 0)
			pgs++;

		void* addr = pcalloc(pgs);

		struct memory_node* fill = pop_unused_node();
20000fa3:	89 c3                	mov    %eax,%ebx

		fill->address = (uint32_t) addr;
20000fa5:	89 50 04             	mov    %edx,0x4(%eax)
		fill->size = (uint32_t) size;
20000fa8:	89 30                	mov    %esi,(%eax)

		if (pgs * PAGESIZE > size) {
20000faa:	39 f7                	cmp    %esi,%edi
20000fac:	0f 86 5b ff ff ff    	jbe    20000f0d <malloc+0x5e>
20000fb2:	e9 37 ff ff ff       	jmp    20000eee <malloc+0x3f>

20000fb7 <realloc>:
	}

	return p;
}

void* realloc(void* ptr, size_t size) {
20000fb7:	55                   	push   %ebp
20000fb8:	89 e5                	mov    %esp,%ebp
20000fba:	56                   	push   %esi
20000fbb:	53                   	push   %ebx
	struct memory_node* cur = first_used;
20000fbc:	8b 1d 28 50 04 20    	mov    0x20045028,%ebx
	}

	return p;
}

void* realloc(void* ptr, size_t size) {
20000fc2:	8b 55 08             	mov    0x8(%ebp),%edx
20000fc5:	8b 45 0c             	mov    0xc(%ebp),%eax
	struct memory_node* cur = first_used;

	while (cur != NULL) {
20000fc8:	eb 40                	jmp    2000100a <realloc+0x53>
		if (cur->address == (uint32_t) ptr) {
20000fca:	3b 53 04             	cmp    0x4(%ebx),%edx
20000fcd:	75 38                	jne    20001007 <realloc+0x50>
			if (size == 0) {
20000fcf:	85 c0                	test   %eax,%eax
20000fd1:	75 0d                	jne    20000fe0 <realloc+0x29>
				free(ptr);
20000fd3:	83 ec 0c             	sub    $0xc,%esp
20000fd6:	31 f6                	xor    %esi,%esi
20000fd8:	52                   	push   %edx
20000fd9:	e8 6e fd ff ff       	call   20000d4c <free>
20000fde:	eb 22                	jmp    20001002 <realloc+0x4b>
				return NULL;
			} else {
				void* new = malloc(size);
20000fe0:	83 ec 0c             	sub    $0xc,%esp
20000fe3:	50                   	push   %eax
20000fe4:	e8 c6 fe ff ff       	call   20000eaf <malloc>
				memcpy(new, (void*) cur->address, cur->size);
20000fe9:	83 c4 0c             	add    $0xc,%esp
		if (cur->address == (uint32_t) ptr) {
			if (size == 0) {
				free(ptr);
				return NULL;
			} else {
				void* new = malloc(size);
20000fec:	89 c6                	mov    %eax,%esi
				memcpy(new, (void*) cur->address, cur->size);
20000fee:	ff 33                	pushl  (%ebx)
20000ff0:	ff 73 04             	pushl  0x4(%ebx)
20000ff3:	50                   	push   %eax
20000ff4:	e8 43 fc ff ff       	call   20000c3c <memcpy>
				free((void*) cur->address);
20000ff9:	59                   	pop    %ecx
20000ffa:	ff 73 04             	pushl  0x4(%ebx)
20000ffd:	e8 4a fd ff ff       	call   20000d4c <free>

				return new;
20001002:	83 c4 10             	add    $0x10,%esp
20001005:	eb 09                	jmp    20001010 <realloc+0x59>
			}
		}
		cur = cur->next;
20001007:	8b 5b 08             	mov    0x8(%ebx),%ebx
}

void* realloc(void* ptr, size_t size) {
	struct memory_node* cur = first_used;

	while (cur != NULL) {
2000100a:	85 db                	test   %ebx,%ebx
2000100c:	75 bc                	jne    20000fca <realloc+0x13>
2000100e:	31 f6                	xor    %esi,%esi
			}
		}
		cur = cur->next;
	}
	return NULL;
}
20001010:	8d 65 f8             	lea    -0x8(%ebp),%esp
20001013:	89 f0                	mov    %esi,%eax
20001015:	5b                   	pop    %ebx
20001016:	5e                   	pop    %esi
20001017:	5d                   	pop    %ebp
20001018:	c3                   	ret    

20001019 <calloc>:

		return (void*) cur->address;
	}
}

void* calloc(size_t num, size_t size) {
20001019:	55                   	push   %ebp
2000101a:	89 e5                	mov    %esp,%ebp
2000101c:	56                   	push   %esi
2000101d:	53                   	push   %ebx
2000101e:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	size_t gsize = num * size;
	void* p = malloc(gsize);
20001021:	83 ec 0c             	sub    $0xc,%esp
		return (void*) cur->address;
	}
}

void* calloc(size_t num, size_t size) {
	size_t gsize = num * size;
20001024:	0f af 5d 08          	imul   0x8(%ebp),%ebx
	void* p = malloc(gsize);
20001028:	53                   	push   %ebx
20001029:	e8 81 fe ff ff       	call   20000eaf <malloc>

	if (p != NULL) {
2000102e:	83 c4 10             	add    $0x10,%esp
	}
}

void* calloc(size_t num, size_t size) {
	size_t gsize = num * size;
	void* p = malloc(gsize);
20001031:	89 c6                	mov    %eax,%esi

	if (p != NULL) {
20001033:	85 c0                	test   %eax,%eax
20001035:	74 0d                	je     20001044 <calloc+0x2b>
		memset(p, 0, gsize);
20001037:	50                   	push   %eax
20001038:	53                   	push   %ebx
20001039:	6a 00                	push   $0x0
2000103b:	56                   	push   %esi
2000103c:	e8 df fb ff ff       	call   20000c20 <memset>
20001041:	83 c4 10             	add    $0x10,%esp
	}

	return p;
}
20001044:	8d 65 f8             	lea    -0x8(%ebp),%esp
20001047:	89 f0                	mov    %esi,%eax
20001049:	5b                   	pop    %ebx
2000104a:	5e                   	pop    %esi
2000104b:	5d                   	pop    %ebp
2000104c:	c3                   	ret    
