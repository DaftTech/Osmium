
../../initrfs/init:     file format elf32-i386
../../initrfs/init
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20000049

Program Header:
    LOAD off    0x00001000 vaddr 0x20000000 paddr 0x20000000 align 2**12
         filesz 0x000000b4 memsz 0x000000b4 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006e4  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .comment      00000036  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY
  3 .stabstr      000007a2  00000000  00000000  000017ce  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20000000 l    d  .text	00000000 .text
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 process.c
00000000 l    df *ABS*	00000000 syscall.c
20000064 g     F .text	00000050 syscall
20000049 g     F .text	0000001a _start
20000000 g     F .text	0000000a main
2000000c g     F .text	0000003d exit



Disassembly of section .text:

20000000 <main>:
int main(void* initrfsPtr) {
20000000:	55                   	push   %ebp
20000001:	89 e5                	mov    %esp,%ebp
	return 1337;
20000003:	b8 39 05 00 00       	mov    $0x539,%eax
}
20000008:	5d                   	pop    %ebp
20000009:	c3                   	ret    
	...

2000000c <exit>:
  int result = main(args);

  exit(result);
}

void exit(int returncode) {
2000000c:	55                   	push   %ebp
2000000d:	89 e5                	mov    %esp,%ebp
2000000f:	83 ec 34             	sub    $0x34,%esp
        .ebx = returncode,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
20000012:	8b 45 08             	mov    0x8(%ebp),%eax
20000015:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
2000001c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
2000001f:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000022:	50                   	push   %eax
        .ebx = returncode,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
20000023:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
2000002a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000031:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000038:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
2000003f:	e8 20 00 00 00       	call   20000064 <syscall>
20000044:	83 c4 10             	add    $0x10,%esp
20000047:	eb fe                	jmp    20000047 <exit+0x3b>

20000049 <_start>:
#include "process.h"

extern int main(void* args);

void _start(void* args) {
20000049:	55                   	push   %ebp
2000004a:	89 e5                	mov    %esp,%ebp
2000004c:	83 ec 14             	sub    $0x14,%esp
  int result = main(args);
2000004f:	ff 75 08             	pushl  0x8(%ebp)
20000052:	e8 a9 ff ff ff       	call   20000000 <main>

  exit(result);
20000057:	83 c4 10             	add    $0x10,%esp
2000005a:	89 45 08             	mov    %eax,0x8(%ebp)
}
2000005d:	c9                   	leave  
extern int main(void* args);

void _start(void* args) {
  int result = main(args);

  exit(result);
2000005e:	e9 a9 ff ff ff       	jmp    2000000c <exit>
	...

20000064 <syscall>:
#include "syscall.h"

void syscall(struct regstate* state) {
20000064:	55                   	push   %ebp
20000065:	89 e5                	mov    %esp,%ebp
20000067:	57                   	push   %edi
20000068:	56                   	push   %esi
20000069:	53                   	push   %ebx
2000006a:	83 ec 10             	sub    $0x10,%esp
	asm("int $0x30"
2000006d:	8b 55 08             	mov    0x8(%ebp),%edx
20000070:	8b 45 08             	mov    0x8(%ebp),%eax
20000073:	8b 72 0c             	mov    0xc(%edx),%esi
20000076:	8b 00                	mov    (%eax),%eax
20000078:	89 75 e4             	mov    %esi,-0x1c(%ebp)
2000007b:	8b 5a 04             	mov    0x4(%edx),%ebx
2000007e:	8b 4a 08             	mov    0x8(%edx),%ecx
20000081:	8b 72 10             	mov    0x10(%edx),%esi
20000084:	8b 7a 14             	mov    0x14(%edx),%edi
20000087:	89 45 ec             	mov    %eax,-0x14(%ebp)
2000008a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
2000008d:	cd 30                	int    $0x30
2000008f:	89 55 e8             	mov    %edx,-0x18(%ebp)
20000092:	8b 55 08             	mov    0x8(%ebp),%edx
20000095:	89 45 f0             	mov    %eax,-0x10(%ebp)
20000098:	89 02                	mov    %eax,(%edx)
2000009a:	8b 45 e8             	mov    -0x18(%ebp),%eax
2000009d:	89 5a 04             	mov    %ebx,0x4(%edx)
200000a0:	89 4a 08             	mov    %ecx,0x8(%edx)
200000a3:	89 42 0c             	mov    %eax,0xc(%edx)
200000a6:	89 72 10             	mov    %esi,0x10(%edx)
200000a9:	89 7a 14             	mov    %edi,0x14(%edx)
			"b" (state->ebx),
			"c" (state->ecx),
			"d" (state->edx),
			"S" (state->esi),
			"D" (state->edi));
}
200000ac:	83 c4 10             	add    $0x10,%esp
200000af:	5b                   	pop    %ebx
200000b0:	5e                   	pop    %esi
200000b1:	5f                   	pop    %edi
200000b2:	5d                   	pop    %ebp
200000b3:	c3                   	ret    
