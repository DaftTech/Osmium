
../../initrfs/drivers/keyboard:     file format elf32-i386
../../initrfs/drivers/keyboard
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x2000058c

Program Header:
    LOAD off    0x00001000 vaddr 0x20000000 paddr 0x20000000 align 2**12
         filesz 0x00001212 memsz 0x00001212 flags r-x
    LOAD off    0x00003000 vaddr 0x20002000 paddr 0x20002000 align 2**12
         filesz 0x000010d0 memsz 0x0000302c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001212  20000000  20000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000101  20002000  20002000  00003000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  2 .rodata       0000006c  20003000  20003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata.str1.1 00000064  2000306c  2000306c  0000406c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .bss          0000102c  20004000  20004000  000040d0  2**2
                  ALLOC
  5 .stab         00004764  00000000  00000000  000040d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      000000a2  00000000  00000000  00008834  2**0
                  CONTENTS, READONLY
  7 .stabstr      00001b2f  00000000  00000000  000088d6  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20000000 l    d  .text	00000000 .text
20002000 l    d  .data	00000000 .data
20003000 l    d  .rodata	00000000 .rodata
2000306c l    d  .rodata.str1.1	00000000 .rodata.str1.1
20004000 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 main.c
20002000 l     O .data	00000100 sc_to_kc
20004000 l     O .bss	00000004 e1_code.1013
20004004 l     O .bss	00000004 e0_code.1012
20004008 l     O .bss	00000002 e1_prev.1014
00000000 l    df *ABS*	00000000 process.c
00000000 l    df *ABS*	00000000 syscall.c
00000000 l    df *ABS*	00000000 console.c
20002100 l     O .data	00000001 color
2000400c l     O .bss	00000004 kprintf_res
00000000 l    df *ABS*	00000000 rpc.c
20004010 l     O .bss	00001000 rpcHandlers
20003054 l     O .rodata	00000018 C.2.870
00000000 l    df *ABS*	00000000 driver.c
00000000 l    df *ABS*	00000000 memory.c
00000000 l    df *ABS*	00000000 stdlib.c
20000e42 l     F .text	00000069 pop_unused_node
00000000 l    df *ABS*	00000000 string.c
2000110c g     F .text	00000031 strcpy
20000a73 g     F .text	0000003e inb
20000be1 g     F .text	00000039 register_driver
20000611 g     F .text	0000003e kputc
200009bb g     F .text	0000003c fModify
200005b4 g     F .text	00000050 syscall
20000833 g     F .text	00000042 rpc_init
20000604 g     F .text	0000000d setclr
20000c38 g     F .text	00000026 memcpy
20000ce2 g     F .text	00000057 pcalloc
20000ca5 g     F .text	0000003d pfree
20000eab g     F .text	00000108 malloc
20000b6a g     F .text	0000003c register_irq_rpc
200003be g     F .text	00000017 execn
20001067 g     F .text	000000a5 strtoknc
200003d5 g     F .text	0000003c thread
200007a8 g     F .text	0000003d rpc_check_future
200007e5 g     F .text	0000004e rpc_map
20005018 g     O .bss	00000004 first_free
20000780 g     F .text	00000028 rpc_register_handler
20000a35 g     F .text	0000003e inw
2000501c g     O .bss	00000004 malloced
20001015 g     F .text	00000034 calloc
20000411 g     F .text	0000003e getargsptr
20000944 g     F .text	0000003c fWrite
20000384 g     F .text	0000003a exec
2000048c g     F .text	000000ec execp
2000058c g     F .text	00000026 _start
20005028 g     O .bss	00000004 dd
200009f7 g     F .text	0000003e inl
200000c5 g     F .text	000001e7 irq
20000fb3 g     F .text	00000062 realloc
20001176 g     F .text	00000052 strtok
20000c5e g     F .text	00000047 memcmp
20000d39 g     F .text	0000000f palloc
20000b2c g     F .text	0000003e outb
20005010 g     O .bss	00000004 first_unused
20000000 g     F .text	0000003d send_command
20000c1c g     F .text	0000001c memset
200002ac g     F .text	000000d5 main
200008be g     F .text	0000004a rpc_handler
20005024 g     O .bss	00000004 fr
20000676 g     F .text	0000003b kputn
200011c8 g     F .text	0000004a strcmp
20000980 g     F .text	0000003b fCall
20005020 g     O .bss	00000004 sp
2000064f g     F .text	00000027 kputs
20005014 g     O .bss	00000004 first_used
20000aee g     F .text	0000003e outw
20000875 g     F .text	00000049 rpc_return
20000ab1 g     F .text	0000003d outl
200006b1 g     F .text	000000ce kprintf
2000113d g     F .text	00000039 strclone
2000044f g     F .text	0000003d exit
20000578 g     F .text	00000014 execpn
20000908 g     F .text	0000003c fRead
2000104c g     F .text	0000001b strlen
2000003d g     F .text	00000088 translate_scancode
20000ba6 g     F .text	0000003b register_path
20000d48 g     F .text	000000fa free



Disassembly of section .text:

20000000 <send_command>:
#include "stdint.h"

struct driver_data* dd;

void send_command(uint8_t command)
{
20000000:	55                   	push   %ebp
20000001:	89 e5                	mov    %esp,%ebp
20000003:	83 ec 18             	sub    $0x18,%esp
20000006:	8b 45 08             	mov    0x8(%ebp),%eax
20000009:	88 45 f4             	mov    %al,-0xc(%ebp)
    // Warten bis die Tastatur bereit ist, und der Befehlspuffer leer ist
    while ((inb(0x64) & 0x2)) {}
2000000c:	83 ec 0c             	sub    $0xc,%esp
2000000f:	6a 64                	push   $0x64
20000011:	e8 5d 0a 00 00       	call   20000a73 <inb>
20000016:	83 c4 10             	add    $0x10,%esp
20000019:	25 ff 00 00 00       	and    $0xff,%eax
2000001e:	83 e0 02             	and    $0x2,%eax
20000021:	85 c0                	test   %eax,%eax
20000023:	75 e7                	jne    2000000c <send_command+0xc>
    outb(0x60, command);
20000025:	b8 00 00 00 00       	mov    $0x0,%eax
2000002a:	8a 45 f4             	mov    -0xc(%ebp),%al
2000002d:	83 ec 08             	sub    $0x8,%esp
20000030:	50                   	push   %eax
20000031:	6a 60                	push   $0x60
20000033:	e8 f4 0a 00 00       	call   20000b2c <outb>
20000038:	83 c4 10             	add    $0x10,%esp
}
2000003b:	c9                   	leave  
2000003c:	c3                   	ret    

2000003d <translate_scancode>:
         00,  00,  00,  00,  00,  00,  00,  00
    },
};

uint8_t translate_scancode(int set, uint16_t scancode)
{
2000003d:	55                   	push   %ebp
2000003e:	89 e5                	mov    %esp,%ebp
20000040:	83 ec 28             	sub    $0x28,%esp
20000043:	8b 45 0c             	mov    0xc(%ebp),%eax
20000046:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    uint8_t keycode = 0;
2000004a:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)

    switch (set) {
2000004e:	8b 45 08             	mov    0x8(%ebp),%eax
20000051:	83 f8 01             	cmp    $0x1,%eax
20000054:	74 1c                	je     20000072 <translate_scancode+0x35>
20000056:	83 f8 02             	cmp    $0x2,%eax
20000059:	74 2a                	je     20000085 <translate_scancode+0x48>
2000005b:	85 c0                	test   %eax,%eax
2000005d:	75 3f                	jne    2000009e <translate_scancode+0x61>
        // Normale scancodes
        case 0:
            keycode = sc_to_kc[0][scancode];
2000005f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
20000062:	25 ff ff 00 00       	and    $0xffff,%eax
20000067:	8a 80 00 20 00 20    	mov    0x20002000(%eax),%al
2000006d:	88 45 f7             	mov    %al,-0x9(%ebp)
            break;
20000070:	eb 2c                	jmp    2000009e <translate_scancode+0x61>

        // e0-Scancodes
        case 1:
            keycode = sc_to_kc[1][scancode];
20000072:	8b 45 e4             	mov    -0x1c(%ebp),%eax
20000075:	25 ff ff 00 00       	and    $0xffff,%eax
2000007a:	8a 80 80 20 00 20    	mov    0x20002080(%eax),%al
20000080:	88 45 f7             	mov    %al,-0x9(%ebp)
            break;
20000083:	eb 19                	jmp    2000009e <translate_scancode+0x61>

        // e1-Scancodes
        case 2:
            // TODO: Hier waere eigentlich eine Tabelle auch schoen
            switch (scancode) {
20000085:	8b 45 e4             	mov    -0x1c(%ebp),%eax
20000088:	25 ff ff 00 00       	and    $0xffff,%eax
2000008d:	3d 1d 45 00 00       	cmp    $0x451d,%eax
20000092:	75 06                	jne    2000009a <translate_scancode+0x5d>
                // Pause
                case 0x451D:
                    keycode = 119;
20000094:	c6 45 f7 77          	movb   $0x77,-0x9(%ebp)
                    break;
20000098:	eb 04                	jmp    2000009e <translate_scancode+0x61>

                default:
                    keycode = 0x0;
2000009a:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
            };
            break;
    }

    if (keycode == 0) {
2000009e:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
200000a2:	75 1c                	jne    200000c0 <translate_scancode+0x83>
        kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
200000a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
200000a7:	25 ff ff 00 00       	and    $0xffff,%eax
200000ac:	83 ec 04             	sub    $0x4,%esp
200000af:	ff 75 08             	pushl  0x8(%ebp)
200000b2:	50                   	push   %eax
200000b3:	68 00 30 00 20       	push   $0x20003000
200000b8:	e8 f4 05 00 00       	call   200006b1 <kprintf>
200000bd:	83 c4 10             	add    $0x10,%esp
    }

    return keycode;
200000c0:	8a 45 f7             	mov    -0x9(%ebp),%al
}
200000c3:	c9                   	leave  
200000c4:	c3                   	ret    

200000c5 <irq>:

int irq(int irq, void* data) {
200000c5:	55                   	push   %ebp
200000c6:	89 e5                	mov    %esp,%ebp
200000c8:	83 ec 18             	sub    $0x18,%esp
	uint8_t scancode;
	uint8_t keycode = 0;
200000cb:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
	int break_code = 0;
200000cf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	// Wird auf 1 gesetzt, sobald e1 gelesen wurde, und auf 2, sobald das erste
	// Datenbyte gelesen wurde
	static int      e1_code = 0;
	static uint16_t  e1_prev = 0;

	scancode = inb(0x60);
200000d6:	83 ec 0c             	sub    $0xc,%esp
200000d9:	6a 60                	push   $0x60
200000db:	e8 93 09 00 00       	call   20000a73 <inb>
200000e0:	83 c4 10             	add    $0x10,%esp
200000e3:	88 45 ee             	mov    %al,-0x12(%ebp)

	// Um einen Breakcode handelt es sich, wenn das oberste Bit gesetzt ist und
	// es kein e0 oder e1 fuer einen Extended-scancode ist
	if ((scancode & 0x80) &&
200000e6:	8a 45 ee             	mov    -0x12(%ebp),%al
200000e9:	84 c0                	test   %al,%al
200000eb:	79 29                	jns    20000116 <irq+0x51>
		(e1_code || (scancode != 0xE1)) &&
200000ed:	a1 00 40 00 20       	mov    0x20004000,%eax

	scancode = inb(0x60);

	// Um einen Breakcode handelt es sich, wenn das oberste Bit gesetzt ist und
	// es kein e0 oder e1 fuer einen Extended-scancode ist
	if ((scancode & 0x80) &&
200000f2:	85 c0                	test   %eax,%eax
200000f4:	75 06                	jne    200000fc <irq+0x37>
200000f6:	80 7d ee e1          	cmpb   $0xe1,-0x12(%ebp)
200000fa:	74 1a                	je     20000116 <irq+0x51>
		(e1_code || (scancode != 0xE1)) &&
		(e0_code || (scancode != 0xE0)))
200000fc:	a1 04 40 00 20       	mov    0x20004004,%eax

	scancode = inb(0x60);

	// Um einen Breakcode handelt es sich, wenn das oberste Bit gesetzt ist und
	// es kein e0 oder e1 fuer einen Extended-scancode ist
	if ((scancode & 0x80) &&
20000101:	85 c0                	test   %eax,%eax
20000103:	75 06                	jne    2000010b <irq+0x46>
20000105:	80 7d ee e0          	cmpb   $0xe0,-0x12(%ebp)
20000109:	74 0b                	je     20000116 <irq+0x51>
		(e1_code || (scancode != 0xE1)) &&
		(e0_code || (scancode != 0xE0)))
	{
		break_code = 1;
2000010b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		scancode &= ~0x80;
20000112:	80 65 ee 7f          	andb   $0x7f,-0x12(%ebp)
	}

	if (e0_code) {
20000116:	a1 04 40 00 20       	mov    0x20004004,%eax
2000011b:	85 c0                	test   %eax,%eax
2000011d:	74 58                	je     20000177 <irq+0xb2>
		// Fake shift abfangen und ignorieren
		if ((scancode == 0x2A) || (scancode == 0x36)) {
2000011f:	80 7d ee 2a          	cmpb   $0x2a,-0x12(%ebp)
20000123:	74 06                	je     2000012b <irq+0x66>
20000125:	80 7d ee 36          	cmpb   $0x36,-0x12(%ebp)
20000129:	75 24                	jne    2000014f <irq+0x8a>
			e0_code = 0;
2000012b:	c7 05 04 40 00 20 00 	movl   $0x0,0x20004004
20000132:	00 00 00 
			kprintf("E0 ret\n");
20000135:	83 ec 0c             	sub    $0xc,%esp
20000138:	68 26 30 00 20       	push   $0x20003026
2000013d:	e8 6f 05 00 00       	call   200006b1 <kprintf>
20000142:	83 c4 10             	add    $0x10,%esp
			return 0;
20000145:	b8 00 00 00 00       	mov    $0x0,%eax
2000014a:	e9 5b 01 00 00       	jmp    200002aa <irq+0x1e5>
		}

		keycode = translate_scancode(1, scancode);
2000014f:	b8 00 00 00 00       	mov    $0x0,%eax
20000154:	8a 45 ee             	mov    -0x12(%ebp),%al
20000157:	83 ec 08             	sub    $0x8,%esp
2000015a:	50                   	push   %eax
2000015b:	6a 01                	push   $0x1
2000015d:	e8 db fe ff ff       	call   2000003d <translate_scancode>
20000162:	83 c4 10             	add    $0x10,%esp
20000165:	88 45 ef             	mov    %al,-0x11(%ebp)
		e0_code = 0;
20000168:	c7 05 04 40 00 20 00 	movl   $0x0,0x20004004
2000016f:	00 00 00 
20000172:	e9 af 00 00 00       	jmp    20000226 <irq+0x161>
	} else if (e1_code == 2) {
20000177:	a1 00 40 00 20       	mov    0x20004000,%eax
2000017c:	83 f8 02             	cmp    $0x2,%eax
2000017f:	75 43                	jne    200001c4 <irq+0xff>
		// Fertiger e1-Scancode
		// Zweiten Scancode in hoeherwertiges Byte packen
		e1_prev |= ((uint16_t) scancode << 8);
20000181:	b8 00 00 00 00       	mov    $0x0,%eax
20000186:	8a 45 ee             	mov    -0x12(%ebp),%al
20000189:	c1 e0 08             	shl    $0x8,%eax
2000018c:	89 c2                	mov    %eax,%edx
2000018e:	66 a1 08 40 00 20    	mov    0x20004008,%ax
20000194:	09 d0                	or     %edx,%eax
20000196:	66 a3 08 40 00 20    	mov    %ax,0x20004008
		keycode = translate_scancode(2, e1_prev);
2000019c:	66 a1 08 40 00 20    	mov    0x20004008,%ax
200001a2:	25 ff ff 00 00       	and    $0xffff,%eax
200001a7:	83 ec 08             	sub    $0x8,%esp
200001aa:	50                   	push   %eax
200001ab:	6a 02                	push   $0x2
200001ad:	e8 8b fe ff ff       	call   2000003d <translate_scancode>
200001b2:	83 c4 10             	add    $0x10,%esp
200001b5:	88 45 ef             	mov    %al,-0x11(%ebp)
		e1_code = 0;
200001b8:	c7 05 00 40 00 20 00 	movl   $0x0,0x20004000
200001bf:	00 00 00 
200001c2:	eb 62                	jmp    20000226 <irq+0x161>
	} else if (e1_code == 1) {
200001c4:	a1 00 40 00 20       	mov    0x20004000,%eax
200001c9:	83 f8 01             	cmp    $0x1,%eax
200001cc:	75 1b                	jne    200001e9 <irq+0x124>
		// Erstes Byte fuer e1-Scancode
		e1_prev = scancode;
200001ce:	b8 00 00 00 00       	mov    $0x0,%eax
200001d3:	8a 45 ee             	mov    -0x12(%ebp),%al
200001d6:	66 a3 08 40 00 20    	mov    %ax,0x20004008
		e1_code++;
200001dc:	a1 00 40 00 20       	mov    0x20004000,%eax
200001e1:	40                   	inc    %eax
200001e2:	a3 00 40 00 20       	mov    %eax,0x20004000
200001e7:	eb 3d                	jmp    20000226 <irq+0x161>
	} else if (scancode == 0xE0) {
200001e9:	80 7d ee e0          	cmpb   $0xe0,-0x12(%ebp)
200001ed:	75 0c                	jne    200001fb <irq+0x136>
		// Anfang eines e0-Codes
		e0_code = 1;
200001ef:	c7 05 04 40 00 20 01 	movl   $0x1,0x20004004
200001f6:	00 00 00 
200001f9:	eb 2b                	jmp    20000226 <irq+0x161>
	} else if (scancode == 0xE1) {
200001fb:	80 7d ee e1          	cmpb   $0xe1,-0x12(%ebp)
200001ff:	75 0c                	jne    2000020d <irq+0x148>
		// Anfang eines e1-Codes
		e1_code = 1;
20000201:	c7 05 00 40 00 20 01 	movl   $0x1,0x20004000
20000208:	00 00 00 
2000020b:	eb 19                	jmp    20000226 <irq+0x161>
	} else {
		// Normaler Scancode
		keycode = translate_scancode(0, scancode);
2000020d:	b8 00 00 00 00       	mov    $0x0,%eax
20000212:	8a 45 ee             	mov    -0x12(%ebp),%al
20000215:	83 ec 08             	sub    $0x8,%esp
20000218:	50                   	push   %eax
20000219:	6a 00                	push   $0x0
2000021b:	e8 1d fe ff ff       	call   2000003d <translate_scancode>
20000220:	83 c4 10             	add    $0x10,%esp
20000223:	88 45 ef             	mov    %al,-0x11(%ebp)
	}

	if(keycode != 0) {
20000226:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
2000022a:	74 79                	je     200002a5 <irq+0x1e0>
		dd->data[0] = keycode;
2000022c:	a1 28 50 00 20       	mov    0x20005028,%eax
20000231:	8a 55 ef             	mov    -0x11(%ebp),%dl
20000234:	88 50 14             	mov    %dl,0x14(%eax)
		dd->data[1] = break_code;
20000237:	a1 28 50 00 20       	mov    0x20005028,%eax
2000023c:	8b 55 f0             	mov    -0x10(%ebp),%edx
2000023f:	88 50 15             	mov    %dl,0x15(%eax)
		dd->data[2] = 0;
20000242:	a1 28 50 00 20       	mov    0x20005028,%eax
20000247:	c6 40 16 00          	movb   $0x0,0x16(%eax)
		dd->length = 2;
2000024b:	a1 28 50 00 20       	mov    0x20005028,%eax
20000250:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)

		FUTURE fut = fWrite("/dev/kbdRaw", dd);
20000257:	a1 28 50 00 20       	mov    0x20005028,%eax
2000025c:	83 ec 08             	sub    $0x8,%esp
2000025f:	50                   	push   %eax
20000260:	68 2e 30 00 20       	push   $0x2000302e
20000265:	e8 da 06 00 00       	call   20000944 <fWrite>
2000026a:	83 c4 10             	add    $0x10,%esp
2000026d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		while(rpc_check_future(fut));// kprintf("Waiting for future %x\n", fut);
20000270:	83 ec 0c             	sub    $0xc,%esp
20000273:	ff 75 f4             	pushl  -0xc(%ebp)
20000276:	e8 2d 05 00 00       	call   200007a8 <rpc_check_future>
2000027b:	83 c4 10             	add    $0x10,%esp
2000027e:	85 c0                	test   %eax,%eax
20000280:	75 ee                	jne    20000270 <irq+0x1ab>

		kprintf(" >%x:%x< ", keycode, break_code);
20000282:	b8 00 00 00 00       	mov    $0x0,%eax
20000287:	8a 45 ef             	mov    -0x11(%ebp),%al
2000028a:	83 ec 04             	sub    $0x4,%esp
2000028d:	ff 75 f0             	pushl  -0x10(%ebp)
20000290:	50                   	push   %eax
20000291:	68 3a 30 00 20       	push   $0x2000303a
20000296:	e8 16 04 00 00       	call   200006b1 <kprintf>
2000029b:	83 c4 10             	add    $0x10,%esp
		return 1;
2000029e:	b8 01 00 00 00       	mov    $0x1,%eax
200002a3:	eb 05                	jmp    200002aa <irq+0x1e5>
	}

	return 0;
200002a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
200002aa:	c9                   	leave  
200002ab:	c3                   	ret    

200002ac <main>:


int main(void* initrfsPtr) {
200002ac:	8d 4c 24 04          	lea    0x4(%esp),%ecx
200002b0:	83 e4 f0             	and    $0xfffffff0,%esp
200002b3:	ff 71 fc             	pushl  -0x4(%ecx)
200002b6:	55                   	push   %ebp
200002b7:	89 e5                	mov    %esp,%ebp
200002b9:	51                   	push   %ecx
200002ba:	83 ec 14             	sub    $0x14,%esp
	dd = palloc();
200002bd:	e8 77 0a 00 00       	call   20000d39 <palloc>
200002c2:	a3 28 50 00 20       	mov    %eax,0x20005028

    // Tastaturpuffer leeren
    while (inb(0x64) & 0x1) {
200002c7:	eb 0d                	jmp    200002d6 <main+0x2a>
        inb(0x60);
200002c9:	83 ec 0c             	sub    $0xc,%esp
200002cc:	6a 60                	push   $0x60
200002ce:	e8 a0 07 00 00       	call   20000a73 <inb>
200002d3:	83 c4 10             	add    $0x10,%esp

int main(void* initrfsPtr) {
	dd = palloc();

    // Tastaturpuffer leeren
    while (inb(0x64) & 0x1) {
200002d6:	83 ec 0c             	sub    $0xc,%esp
200002d9:	6a 64                	push   $0x64
200002db:	e8 93 07 00 00       	call   20000a73 <inb>
200002e0:	83 c4 10             	add    $0x10,%esp
200002e3:	25 ff 00 00 00       	and    $0xff,%eax
200002e8:	83 e0 01             	and    $0x1,%eax
200002eb:	84 c0                	test   %al,%al
200002ed:	75 da                	jne    200002c9 <main+0x1d>
        inb(0x60);
    }

    // IRQ-Handler fuer Tastatur-IRQ(1) registrieren
	int rpcID = rpc_register_handler(irq);
200002ef:	83 ec 0c             	sub    $0xc,%esp
200002f2:	68 c5 00 00 20       	push   $0x200000c5
200002f7:	e8 84 04 00 00       	call   20000780 <rpc_register_handler>
200002fc:	83 c4 10             	add    $0x10,%esp
200002ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
    register_irq_rpc(0x21, rpcID);
20000302:	83 ec 08             	sub    $0x8,%esp
20000305:	ff 75 f0             	pushl  -0x10(%ebp)
20000308:	6a 21                	push   $0x21
2000030a:	e8 5b 08 00 00       	call   20000b6a <register_irq_rpc>
2000030f:	83 c4 10             	add    $0x10,%esp

	strcpy(dd->data, "/dev/kbdRaw");
20000312:	a1 28 50 00 20       	mov    0x20005028,%eax
20000317:	83 c0 14             	add    $0x14,%eax
2000031a:	83 ec 08             	sub    $0x8,%esp
2000031d:	68 2e 30 00 20       	push   $0x2000302e
20000322:	50                   	push   %eax
20000323:	e8 e4 0d 00 00       	call   2000110c <strcpy>
20000328:	83 c4 10             	add    $0x10,%esp

	FUTURE fut = fCall("fifo", CALL_CREATE, dd);
2000032b:	a1 28 50 00 20       	mov    0x20005028,%eax
20000330:	83 ec 04             	sub    $0x4,%esp
20000333:	50                   	push   %eax
20000334:	68 00 01 00 00       	push   $0x100
20000339:	68 44 30 00 20       	push   $0x20003044
2000033e:	e8 3d 06 00 00       	call   20000980 <fCall>
20000343:	83 c4 10             	add    $0x10,%esp
20000346:	89 45 f4             	mov    %eax,-0xc(%ebp)
	while(rpc_check_future(fut));
20000349:	83 ec 0c             	sub    $0xc,%esp
2000034c:	ff 75 f4             	pushl  -0xc(%ebp)
2000034f:	e8 54 04 00 00       	call   200007a8 <rpc_check_future>
20000354:	83 c4 10             	add    $0x10,%esp
20000357:	85 c0                	test   %eax,%eax
20000359:	75 ee                	jne    20000349 <main+0x9d>

    // Tastatur aktivieren
    send_command(0xF4);
2000035b:	83 ec 0c             	sub    $0xc,%esp
2000035e:	68 f4 00 00 00       	push   $0xf4
20000363:	e8 98 fc ff ff       	call   20000000 <send_command>
20000368:	83 c4 10             	add    $0x10,%esp

	fCall("initrfs", 0, 0); //TELL init we are finished here
2000036b:	83 ec 04             	sub    $0x4,%esp
2000036e:	6a 00                	push   $0x0
20000370:	6a 00                	push   $0x0
20000372:	68 49 30 00 20       	push   $0x20003049
20000377:	e8 04 06 00 00       	call   20000980 <fCall>
2000037c:	83 c4 10             	add    $0x10,%esp
	while(1) {
	}
2000037f:	eb fe                	jmp    2000037f <main+0xd3>
20000381:	00 00                	add    %al,(%eax)
	...

20000384 <exec>:

THREAD execn(void* elf, uint32_t elfSize) {
	return exec(elf, elfSize, 0, 0);
}

THREAD exec(void* elf, uint32_t elfSize, void* data, uint32_t dataSize) {
20000384:	55                   	push   %ebp
20000385:	89 e5                	mov    %esp,%ebp
20000387:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x501,
			.ebx = (uint32_t)data,
			.ecx = (uint32_t)dataSize,
			.edx = (uint32_t)elf,
			.esi = (uint32_t)elfSize,
			.edi = 0 };
2000038a:	8b 45 10             	mov    0x10(%ebp),%eax
2000038d:	c7 45 e0 01 05 00 00 	movl   $0x501,-0x20(%ebp)
20000394:	89 45 e4             	mov    %eax,-0x1c(%ebp)
20000397:	8b 45 14             	mov    0x14(%ebp),%eax
2000039a:	89 45 e8             	mov    %eax,-0x18(%ebp)
2000039d:	8b 45 08             	mov    0x8(%ebp),%eax
200003a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
200003a3:	8b 45 0c             	mov    0xc(%ebp),%eax
200003a6:	89 45 f0             	mov    %eax,-0x10(%ebp)

	syscall(&state);
200003a9:	8d 45 e0             	lea    -0x20(%ebp),%eax
200003ac:	50                   	push   %eax
			.eax = 0x501,
			.ebx = (uint32_t)data,
			.ecx = (uint32_t)dataSize,
			.edx = (uint32_t)elf,
			.esi = (uint32_t)elfSize,
			.edi = 0 };
200003ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
200003b4:	e8 fb 01 00 00       	call   200005b4 <syscall>

	return state.eax;
}
200003b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
200003bc:	c9                   	leave  
200003bd:	c3                   	ret    

200003be <execn>:

THREAD execpn(char* path) {
	return execp(path, 0, 0);
}

THREAD execn(void* elf, uint32_t elfSize) {
200003be:	55                   	push   %ebp
200003bf:	89 e5                	mov    %esp,%ebp
200003c1:	83 ec 08             	sub    $0x8,%esp
	return exec(elf, elfSize, 0, 0);
200003c4:	6a 00                	push   $0x0
200003c6:	6a 00                	push   $0x0
200003c8:	ff 75 0c             	pushl  0xc(%ebp)
200003cb:	ff 75 08             	pushl  0x8(%ebp)
200003ce:	e8 b1 ff ff ff       	call   20000384 <exec>
}
200003d3:	c9                   	leave  
200003d4:	c3                   	ret    

200003d5 <thread>:

	return (void*) state.eax;
}


THREAD thread(void* function, void* args) {
200003d5:	55                   	push   %ebp
200003d6:	89 e5                	mov    %esp,%ebp
200003d8:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x500,
			.ebx = (uint32_t)function,
			.ecx = (uint32_t)args,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
200003db:	8b 45 08             	mov    0x8(%ebp),%eax
200003de:	c7 45 e0 00 05 00 00 	movl   $0x500,-0x20(%ebp)
200003e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
200003e8:	8b 45 0c             	mov    0xc(%ebp),%eax
200003eb:	89 45 e8             	mov    %eax,-0x18(%ebp)

	syscall(&state);
200003ee:	8d 45 e0             	lea    -0x20(%ebp),%eax
200003f1:	50                   	push   %eax
			.eax = 0x500,
			.ebx = (uint32_t)function,
			.ecx = (uint32_t)args,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
200003f2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
200003f9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000400:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000407:	e8 a8 01 00 00       	call   200005b4 <syscall>

	return state.eax;
}
2000040c:	8b 45 e0             	mov    -0x20(%ebp),%eax
2000040f:	c9                   	leave  
20000410:	c3                   	ret    

20000411 <getargsptr>:

	while (1) {
	}
}

void* getargsptr() {
20000411:	55                   	push   %ebp
20000412:	89 e5                	mov    %esp,%ebp
20000414:	83 ec 34             	sub    $0x34,%esp
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };

	syscall(&state);
20000417:	8d 45 e0             	lea    -0x20(%ebp),%eax
			.eax = 0x2,
			.ebx = 0,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
2000041a:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)

	syscall(&state);
20000421:	50                   	push   %eax
			.eax = 0x2,
			.ebx = 0,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000422:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
20000429:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000430:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000437:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
2000043e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000445:	e8 6a 01 00 00       	call   200005b4 <syscall>

	return (void*) state.eax;
}
2000044a:	8b 45 e0             	mov    -0x20(%ebp),%eax
2000044d:	c9                   	leave  
2000044e:	c3                   	ret    

2000044f <exit>:
	int result = main(getargsptr());

	exit(result);
}

void exit(int returncode) {
2000044f:	55                   	push   %ebp
20000450:	89 e5                	mov    %esp,%ebp
20000452:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x1,
			.ebx = returncode,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000455:	8b 45 08             	mov    0x8(%ebp),%eax
20000458:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
2000045f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	syscall(&state);
20000462:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000465:	50                   	push   %eax
			.eax = 0x1,
			.ebx = returncode,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000466:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
2000046d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000474:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
2000047b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000482:	e8 2d 01 00 00       	call   200005b4 <syscall>
20000487:	83 c4 10             	add    $0x10,%esp
2000048a:	eb fe                	jmp    2000048a <exit+0x3b>

2000048c <execp>:
	syscall(&state);

	return state.eax;
}

THREAD execp(char* path, void* data, uint32_t datasize) {
2000048c:	55                   	push   %ebp
2000048d:	89 e5                	mov    %esp,%ebp
2000048f:	57                   	push   %edi
20000490:	56                   	push   %esi
20000491:	53                   	push   %ebx
20000492:	83 ec 1c             	sub    $0x1c,%esp
		if(driverData->pos + driverData->bytesDone >= elfsize) {
			elfsize *= 2;
			elf = realloc(elf, elfsize);
		}

		if(driverData->bytesDone) memcpy(elf + driverData->pos, driverData->data, driverData->bytesDone);
20000495:	bf d8 0e 00 00       	mov    $0xed8,%edi

	return state.eax;
}

THREAD execp(char* path, void* data, uint32_t datasize) {
	struct driver_data* driverData = palloc();
2000049a:	e8 9a 08 00 00       	call   20000d39 <palloc>

	uint32_t elfsize = MAX_IO_BUFFER;
	void* elf = malloc(elfsize); //256KB for init load
2000049f:	83 ec 0c             	sub    $0xc,%esp

	return state.eax;
}

THREAD execp(char* path, void* data, uint32_t datasize) {
	struct driver_data* driverData = palloc();
200004a2:	89 c3                	mov    %eax,%ebx

	uint32_t elfsize = MAX_IO_BUFFER;
	void* elf = malloc(elfsize); //256KB for init load
200004a4:	68 d8 0e 00 00       	push   $0xed8
200004a9:	e8 fd 09 00 00       	call   20000eab <malloc>

	driverData->length = MAX_IO_BUFFER;
200004ae:	c7 43 08 d8 0e 00 00 	movl   $0xed8,0x8(%ebx)

THREAD execp(char* path, void* data, uint32_t datasize) {
	struct driver_data* driverData = palloc();

	uint32_t elfsize = MAX_IO_BUFFER;
	void* elf = malloc(elfsize); //256KB for init load
200004b5:	89 c6                	mov    %eax,%esi

	driverData->length = MAX_IO_BUFFER;

	kprintf("Reading init...\n");
200004b7:	c7 04 24 6c 30 00 20 	movl   $0x2000306c,(%esp)
200004be:	e8 ee 01 00 00       	call   200006b1 <kprintf>
		if(driverData->pos + driverData->bytesDone >= elfsize) {
			elfsize *= 2;
			elf = realloc(elf, elfsize);
		}

		if(driverData->bytesDone) memcpy(elf + driverData->pos, driverData->data, driverData->bytesDone);
200004c3:	8d 43 14             	lea    0x14(%ebx),%eax
200004c6:	83 c4 10             	add    $0x10,%esp
200004c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	driverData->length = MAX_IO_BUFFER;

	kprintf("Reading init...\n");

	do {
		FUTURE f = fRead(path, driverData);
200004cc:	50                   	push   %eax
200004cd:	50                   	push   %eax
200004ce:	53                   	push   %ebx
200004cf:	ff 75 08             	pushl  0x8(%ebp)
200004d2:	e8 31 04 00 00       	call   20000908 <fRead>
200004d7:	83 c4 10             	add    $0x10,%esp
200004da:	89 c2                	mov    %eax,%edx
		while(rpc_check_future(f));
200004dc:	83 ec 0c             	sub    $0xc,%esp
200004df:	89 55 e0             	mov    %edx,-0x20(%ebp)
200004e2:	52                   	push   %edx
200004e3:	e8 c0 02 00 00       	call   200007a8 <rpc_check_future>
200004e8:	83 c4 10             	add    $0x10,%esp
200004eb:	8b 55 e0             	mov    -0x20(%ebp),%edx
200004ee:	85 c0                	test   %eax,%eax
200004f0:	75 ea                	jne    200004dc <execp+0x50>

		if(driverData->pos + driverData->bytesDone >= elfsize) {
200004f2:	8b 43 0c             	mov    0xc(%ebx),%eax
200004f5:	31 d2                	xor    %edx,%edx
200004f7:	03 03                	add    (%ebx),%eax
200004f9:	13 53 04             	adc    0x4(%ebx),%edx
200004fc:	83 fa 00             	cmp    $0x0,%edx
200004ff:	77 04                	ja     20000505 <execp+0x79>
20000501:	39 f8                	cmp    %edi,%eax
20000503:	72 10                	jb     20000515 <execp+0x89>
			elfsize *= 2;
20000505:	01 ff                	add    %edi,%edi
			elf = realloc(elf, elfsize);
20000507:	51                   	push   %ecx
20000508:	51                   	push   %ecx
20000509:	57                   	push   %edi
2000050a:	56                   	push   %esi
2000050b:	e8 a3 0a 00 00       	call   20000fb3 <realloc>
20000510:	83 c4 10             	add    $0x10,%esp
20000513:	89 c6                	mov    %eax,%esi
		}

		if(driverData->bytesDone) memcpy(elf + driverData->pos, driverData->data, driverData->bytesDone);
20000515:	8b 43 0c             	mov    0xc(%ebx),%eax
20000518:	85 c0                	test   %eax,%eax
2000051a:	74 12                	je     2000052e <execp+0xa2>
2000051c:	52                   	push   %edx
2000051d:	50                   	push   %eax
2000051e:	ff 75 e4             	pushl  -0x1c(%ebp)
20000521:	8b 03                	mov    (%ebx),%eax
20000523:	01 f0                	add    %esi,%eax
20000525:	50                   	push   %eax
20000526:	e8 0d 07 00 00       	call   20000c38 <memcpy>
2000052b:	83 c4 10             	add    $0x10,%esp

		driverData->pos += driverData->bytesDone;
2000052e:	8b 43 0c             	mov    0xc(%ebx),%eax
20000531:	31 d2                	xor    %edx,%edx
20000533:	01 03                	add    %eax,(%ebx)
20000535:	11 53 04             	adc    %edx,0x4(%ebx)
	} while(driverData->bytesDone != 0);
20000538:	83 7b 0c 00          	cmpl   $0x0,0xc(%ebx)
2000053c:	75 8e                	jne    200004cc <execp+0x40>

	kprintf("Executing init from init...\n");
2000053e:	83 ec 0c             	sub    $0xc,%esp
20000541:	68 7d 30 00 20       	push   $0x2000307d
20000546:	e8 66 01 00 00       	call   200006b1 <kprintf>
	THREAD ret = exec(elf, driverData->pos, data, datasize);
2000054b:	ff 75 10             	pushl  0x10(%ebp)
2000054e:	ff 75 0c             	pushl  0xc(%ebp)
20000551:	ff 33                	pushl  (%ebx)
20000553:	56                   	push   %esi
20000554:	e8 2b fe ff ff       	call   20000384 <exec>

	pfree(driverData);
20000559:	83 c4 14             	add    $0x14,%esp
2000055c:	89 45 e0             	mov    %eax,-0x20(%ebp)
2000055f:	53                   	push   %ebx
20000560:	e8 40 07 00 00       	call   20000ca5 <pfree>
	free(elf);
20000565:	89 34 24             	mov    %esi,(%esp)
20000568:	e8 db 07 00 00       	call   20000d48 <free>

	return ret;
}
2000056d:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000570:	8d 65 f4             	lea    -0xc(%ebp),%esp
20000573:	5b                   	pop    %ebx
20000574:	5e                   	pop    %esi
20000575:	5f                   	pop    %edi
20000576:	5d                   	pop    %ebp
20000577:	c3                   	ret    

20000578 <execpn>:

THREAD execpn(char* path) {
20000578:	55                   	push   %ebp
20000579:	89 e5                	mov    %esp,%ebp
2000057b:	83 ec 0c             	sub    $0xc,%esp
	return execp(path, 0, 0);
2000057e:	6a 00                	push   $0x0
20000580:	6a 00                	push   $0x0
20000582:	ff 75 08             	pushl  0x8(%ebp)
20000585:	e8 02 ff ff ff       	call   2000048c <execp>
}
2000058a:	c9                   	leave  
2000058b:	c3                   	ret    

2000058c <_start>:
	syscall(&state);

	return state.eax;
}

void _start() {
2000058c:	55                   	push   %ebp
2000058d:	89 e5                	mov    %esp,%ebp
2000058f:	83 ec 08             	sub    $0x8,%esp
	rpc_init();
20000592:	e8 9c 02 00 00       	call   20000833 <rpc_init>

	int result = main(getargsptr());
20000597:	e8 75 fe ff ff       	call   20000411 <getargsptr>
2000059c:	83 ec 0c             	sub    $0xc,%esp
2000059f:	50                   	push   %eax
200005a0:	e8 07 fd ff ff       	call   200002ac <main>

	exit(result);
200005a5:	89 04 24             	mov    %eax,(%esp)
200005a8:	e8 a2 fe ff ff       	call   2000044f <exit>
200005ad:	83 c4 10             	add    $0x10,%esp
}
200005b0:	c9                   	leave  
200005b1:	c3                   	ret    
	...

200005b4 <syscall>:
#include "syscall.h"

void syscall(struct regstate* state) {
200005b4:	55                   	push   %ebp
200005b5:	89 e5                	mov    %esp,%ebp
200005b7:	57                   	push   %edi
200005b8:	56                   	push   %esi
200005b9:	53                   	push   %ebx
200005ba:	83 ec 10             	sub    $0x10,%esp
	asm("int $0x30"
200005bd:	8b 55 08             	mov    0x8(%ebp),%edx
200005c0:	8b 45 08             	mov    0x8(%ebp),%eax
200005c3:	8b 72 0c             	mov    0xc(%edx),%esi
200005c6:	8b 00                	mov    (%eax),%eax
200005c8:	89 75 e4             	mov    %esi,-0x1c(%ebp)
200005cb:	8b 5a 04             	mov    0x4(%edx),%ebx
200005ce:	8b 4a 08             	mov    0x8(%edx),%ecx
200005d1:	8b 72 10             	mov    0x10(%edx),%esi
200005d4:	8b 7a 14             	mov    0x14(%edx),%edi
200005d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
200005da:	8b 55 e4             	mov    -0x1c(%ebp),%edx
200005dd:	cd 30                	int    $0x30
200005df:	89 55 e8             	mov    %edx,-0x18(%ebp)
200005e2:	8b 55 08             	mov    0x8(%ebp),%edx
200005e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
200005e8:	89 02                	mov    %eax,(%edx)
200005ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
200005ed:	89 5a 04             	mov    %ebx,0x4(%edx)
200005f0:	89 4a 08             	mov    %ecx,0x8(%edx)
200005f3:	89 42 0c             	mov    %eax,0xc(%edx)
200005f6:	89 72 10             	mov    %esi,0x10(%edx)
200005f9:	89 7a 14             	mov    %edi,0x14(%edx)
			"b" (state->ebx),
			"c" (state->ecx),
			"d" (state->edx),
			"S" (state->esi),
			"D" (state->edi));
}
200005fc:	83 c4 10             	add    $0x10,%esp
200005ff:	5b                   	pop    %ebx
20000600:	5e                   	pop    %esi
20000601:	5f                   	pop    %edi
20000602:	5d                   	pop    %ebp
20000603:	c3                   	ret    

20000604 <setclr>:
        x /= base;
    } while (x);
    kputs(p);
}

void setclr(char clr) {
20000604:	55                   	push   %ebp
20000605:	89 e5                	mov    %esp,%ebp
    color = clr;
20000607:	8b 45 08             	mov    0x8(%ebp),%eax
}
2000060a:	5d                   	pop    %ebp
    } while (x);
    kputs(p);
}

void setclr(char clr) {
    color = clr;
2000060b:	a2 00 21 00 20       	mov    %al,0x20002100
}
20000610:	c3                   	ret    

20000611 <kputc>:
static int x = 0;
static int y = 0;
static int kprintf_res = 0;
static char color = 0x07;

void kputc(char c) {
20000611:	55                   	push   %ebp
20000612:	89 e5                	mov    %esp,%ebp
20000614:	83 ec 34             	sub    $0x34,%esp
20000617:	0f be 45 08          	movsbl 0x8(%ebp),%eax
			.eax = 0x100,
			.ebx = (uint32_t) c,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
2000061b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	syscall(&state);
2000061e:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000621:	50                   	push   %eax
			.eax = 0x100,
			.ebx = (uint32_t) c,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000622:	c7 45 e0 00 01 00 00 	movl   $0x100,-0x20(%ebp)
20000629:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000630:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000637:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
2000063e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000645:	e8 6a ff ff ff       	call   200005b4 <syscall>
2000064a:	83 c4 10             	add    $0x10,%esp
}
2000064d:	c9                   	leave  
2000064e:	c3                   	ret    

2000064f <kputs>:

void kputs(const char* s) {
2000064f:	55                   	push   %ebp
20000650:	89 e5                	mov    %esp,%ebp
20000652:	53                   	push   %ebx
20000653:	83 ec 04             	sub    $0x4,%esp
20000656:	8b 5d 08             	mov    0x8(%ebp),%ebx
    while (*s) {
20000659:	eb 10                	jmp    2000066b <kputs+0x1c>
        kputc(*s++);
2000065b:	83 ec 0c             	sub    $0xc,%esp
2000065e:	43                   	inc    %ebx
2000065f:	0f be c0             	movsbl %al,%eax
20000662:	50                   	push   %eax
20000663:	e8 a9 ff ff ff       	call   20000611 <kputc>
20000668:	83 c4 10             	add    $0x10,%esp

	syscall(&state);
}

void kputs(const char* s) {
    while (*s) {
2000066b:	8a 03                	mov    (%ebx),%al
2000066d:	84 c0                	test   %al,%al
2000066f:	75 ea                	jne    2000065b <kputs+0xc>
        kputc(*s++);
    }
}
20000671:	8b 5d fc             	mov    -0x4(%ebp),%ebx
20000674:	c9                   	leave  
20000675:	c3                   	ret    

20000676 <kputn>:

void kputn(unsigned long x, int base) {
20000676:	55                   	push   %ebp
20000677:	89 e5                	mov    %esp,%ebp
20000679:	53                   	push   %ebx
2000067a:	83 ec 54             	sub    $0x54,%esp
2000067d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
20000680:	8b 45 08             	mov    0x8(%ebp),%eax
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* p;

    if (base > 36) {
20000683:	83 fb 24             	cmp    $0x24,%ebx
20000686:	7f 24                	jg     200006ac <kputn+0x36>
        return;
    }

    p = buf + 64;
    *p = '\0';
20000688:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
2000068c:	8d 4d f7             	lea    -0x9(%ebp),%ecx
    do {
        *--p = digits[x % base];
2000068f:	31 d2                	xor    %edx,%edx
20000691:	49                   	dec    %ecx
20000692:	f7 f3                	div    %ebx
        x /= base;
    } while (x);
20000694:	85 c0                	test   %eax,%eax
    }

    p = buf + 64;
    *p = '\0';
    do {
        *--p = digits[x % base];
20000696:	8a 92 9a 30 00 20    	mov    0x2000309a(%edx),%dl
2000069c:	88 11                	mov    %dl,(%ecx)
        x /= base;
    } while (x);
2000069e:	75 ef                	jne    2000068f <kputn+0x19>
    kputs(p);
200006a0:	83 ec 0c             	sub    $0xc,%esp
200006a3:	51                   	push   %ecx
200006a4:	e8 a6 ff ff ff       	call   2000064f <kputs>
200006a9:	83 c4 10             	add    $0x10,%esp
}
200006ac:	8b 5d fc             	mov    -0x4(%ebp),%ebx
200006af:	c9                   	leave  
200006b0:	c3                   	ret    

200006b1 <kprintf>:

void setclr(char clr) {
    color = clr;
}

int kprintf(const char* fmt, ...) {
200006b1:	55                   	push   %ebp
200006b2:	89 e5                	mov    %esp,%ebp
200006b4:	57                   	push   %edi
200006b5:	56                   	push   %esi
200006b6:	53                   	push   %ebx
200006b7:	83 ec 0c             	sub    $0xc,%esp
200006ba:	8d 5d 0c             	lea    0xc(%ebp),%ebx
200006bd:	8b 75 08             	mov    0x8(%ebp),%esi
    const char* s;
    unsigned long n;
    char c;

    va_start(ap, fmt);
    kprintf_res = 0;
200006c0:	c7 05 0c 40 00 20 00 	movl   $0x0,0x2000400c
200006c7:	00 00 00 
    while (*fmt) {
200006ca:	e9 99 00 00 00       	jmp    20000768 <kprintf+0xb7>
        if (*fmt == '%') {
200006cf:	3c 25                	cmp    $0x25,%al
200006d1:	0f 85 81 00 00 00    	jne    20000758 <kprintf+0xa7>
            fmt++;
200006d7:	46                   	inc    %esi
            switch (*fmt) {
200006d8:	8a 06                	mov    (%esi),%al
200006da:	3c 70                	cmp    $0x70,%al
200006dc:	74 40                	je     2000071e <kprintf+0x6d>
200006de:	7f 1a                	jg     200006fa <kprintf+0x49>
200006e0:	3c 63                	cmp    $0x63,%al
200006e2:	74 4c                	je     20000730 <kprintf+0x7f>
200006e4:	7f 0e                	jg     200006f4 <kprintf+0x43>
200006e6:	84 c0                	test   %al,%al
200006e8:	0f 84 84 00 00 00    	je     20000772 <kprintf+0xc1>
200006ee:	3c 25                	cmp    $0x25,%al
200006f0:	75 56                	jne    20000748 <kprintf+0x97>
200006f2:	eb 4d                	jmp    20000741 <kprintf+0x90>
200006f4:	3c 64                	cmp    $0x64,%al
200006f6:	75 50                	jne    20000748 <kprintf+0x97>
200006f8:	eb 1b                	jmp    20000715 <kprintf+0x64>
200006fa:	3c 75                	cmp    $0x75,%al
200006fc:	74 17                	je     20000715 <kprintf+0x64>
200006fe:	3c 78                	cmp    $0x78,%al
20000700:	74 1c                	je     2000071e <kprintf+0x6d>
20000702:	3c 73                	cmp    $0x73,%al
20000704:	75 42                	jne    20000748 <kprintf+0x97>
            case 's':
                s = va_arg(ap, char*);
                kputs(s);
20000706:	83 ec 0c             	sub    $0xc,%esp
    while (*fmt) {
        if (*fmt == '%') {
            fmt++;
            switch (*fmt) {
            case 's':
                s = va_arg(ap, char*);
20000709:	8d 7b 04             	lea    0x4(%ebx),%edi
                kputs(s);
2000070c:	ff 33                	pushl  (%ebx)
2000070e:	e8 3c ff ff ff       	call   2000064f <kputs>
20000713:	eb 17                	jmp    2000072c <kprintf+0x7b>
                break;
            case 'd':
            case 'u':
                n = va_arg(ap, unsigned long int);
20000715:	8d 7b 04             	lea    0x4(%ebx),%edi
                kputn(n, 10);
20000718:	51                   	push   %ecx
20000719:	51                   	push   %ecx
2000071a:	6a 0a                	push   $0xa
2000071c:	eb 07                	jmp    20000725 <kprintf+0x74>
                break;
            case 'x':
            case 'p':
                n = va_arg(ap, unsigned long int);
2000071e:	8d 7b 04             	lea    0x4(%ebx),%edi
                kputn(n, 16);
20000721:	52                   	push   %edx
20000722:	52                   	push   %edx
20000723:	6a 10                	push   $0x10
20000725:	ff 33                	pushl  (%ebx)
20000727:	e8 4a ff ff ff       	call   20000676 <kputn>
2000072c:	89 fb                	mov    %edi,%ebx
2000072e:	eb 34                	jmp    20000764 <kprintf+0xb3>
                break;
            case 'c':
                c = va_arg(ap, int);
                kputc(c);
20000730:	83 ec 0c             	sub    $0xc,%esp
            case 'p':
                n = va_arg(ap, unsigned long int);
                kputn(n, 16);
                break;
            case 'c':
                c = va_arg(ap, int);
20000733:	8d 7b 04             	lea    0x4(%ebx),%edi
                kputc(c);
20000736:	0f be 03             	movsbl (%ebx),%eax
20000739:	50                   	push   %eax
2000073a:	e8 d2 fe ff ff       	call   20000611 <kputc>
2000073f:	eb eb                	jmp    2000072c <kprintf+0x7b>
                break;
            case '%':
                kputc('%');
20000741:	83 ec 0c             	sub    $0xc,%esp
20000744:	6a 25                	push   $0x25
20000746:	eb 17                	jmp    2000075f <kprintf+0xae>
                break;
            case '\0':
                goto out;
            default:
                kputc('%');
20000748:	83 ec 0c             	sub    $0xc,%esp
2000074b:	6a 25                	push   $0x25
2000074d:	e8 bf fe ff ff       	call   20000611 <kputc>
                kputc(*fmt);
20000752:	58                   	pop    %eax
20000753:	0f be 06             	movsbl (%esi),%eax
20000756:	eb 06                	jmp    2000075e <kprintf+0xad>
                break;
            }
        } else {
            kputc(*fmt);
20000758:	83 ec 0c             	sub    $0xc,%esp
2000075b:	0f be c0             	movsbl %al,%eax
2000075e:	50                   	push   %eax
2000075f:	e8 ad fe ff ff       	call   20000611 <kputc>
20000764:	83 c4 10             	add    $0x10,%esp
        }

        fmt++;
20000767:	46                   	inc    %esi
    unsigned long n;
    char c;

    va_start(ap, fmt);
    kprintf_res = 0;
    while (*fmt) {
20000768:	8a 06                	mov    (%esi),%al
2000076a:	84 c0                	test   %al,%al
2000076c:	0f 85 5d ff ff ff    	jne    200006cf <kprintf+0x1e>

    out:
    va_end(ap);

    return kprintf_res;
}
20000772:	a1 0c 40 00 20       	mov    0x2000400c,%eax
20000777:	8d 65 f4             	lea    -0xc(%ebp),%esp
2000077a:	5b                   	pop    %ebx
2000077b:	5e                   	pop    %esi
2000077c:	5f                   	pop    %edi
2000077d:	5d                   	pop    %ebp
2000077e:	c3                   	ret    
	...

20000780 <rpc_register_handler>:
	syscall(&state);

	return state.eax;
}

int rpc_register_handler(int(*fptr)(int, void*)) {
20000780:	55                   	push   %ebp
20000781:	31 c0                	xor    %eax,%eax
20000783:	89 e5                	mov    %esp,%ebp
	for(int i = 0; i < RPC_HANDLERS; i++) {
		if(rpcHandlers[i] == (int(*)(int, void*))0) {
20000785:	83 3c 85 10 40 00 20 	cmpl   $0x0,0x20004010(,%eax,4)
2000078c:	00 
2000078d:	75 0c                	jne    2000079b <rpc_register_handler+0x1b>
			rpcHandlers[i] = fptr;
2000078f:	8b 55 08             	mov    0x8(%ebp),%edx
20000792:	89 14 85 10 40 00 20 	mov    %edx,0x20004010(,%eax,4)
			return i;
20000799:	eb 0b                	jmp    200007a6 <rpc_register_handler+0x26>

	return state.eax;
}

int rpc_register_handler(int(*fptr)(int, void*)) {
	for(int i = 0; i < RPC_HANDLERS; i++) {
2000079b:	40                   	inc    %eax
2000079c:	3d 00 04 00 00       	cmp    $0x400,%eax
200007a1:	75 e2                	jne    20000785 <rpc_register_handler+0x5>
200007a3:	83 c8 ff             	or     $0xffffffff,%eax
			rpcHandlers[i] = fptr;
			return i;
		}
	}
	return -1;
}
200007a6:	5d                   	pop    %ebp
200007a7:	c3                   	ret    

200007a8 <rpc_check_future>:
	*rpcARG0 = state.ecx;
	return (void*) state.eax;
}


int rpc_check_future(FUTURE fut) {
200007a8:	55                   	push   %ebp
200007a9:	89 e5                	mov    %esp,%ebp
200007ab:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x203,
			.ebx = fut,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
200007ae:	8b 45 08             	mov    0x8(%ebp),%eax
200007b1:	c7 45 e0 03 02 00 00 	movl   $0x203,-0x20(%ebp)
200007b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	syscall(&state);
200007bb:	8d 45 e0             	lea    -0x20(%ebp),%eax
200007be:	50                   	push   %eax
			.eax = 0x203,
			.ebx = fut,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
200007bf:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
200007c6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
200007cd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
200007d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
200007db:	e8 d4 fd ff ff       	call   200005b4 <syscall>

	return state.eax;
}
200007e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
200007e3:	c9                   	leave  
200007e4:	c3                   	ret    

200007e5 <rpc_map>:
			.edi = 0 };

	syscall(&state);
}

void* rpc_map(uint32_t* rpcID, uint32_t* rpcARG0) {
200007e5:	55                   	push   %ebp
200007e6:	89 e5                	mov    %esp,%ebp
200007e8:	83 ec 34             	sub    $0x34,%esp
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };

	syscall(&state);
200007eb:	8d 45 e0             	lea    -0x20(%ebp),%eax
			.eax = 0x200,
			.ebx = 0,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
200007ee:	c7 45 e0 00 02 00 00 	movl   $0x200,-0x20(%ebp)

	syscall(&state);
200007f5:	50                   	push   %eax
			.eax = 0x200,
			.ebx = 0,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
200007f6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
200007fd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000804:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
2000080b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000812:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000819:	e8 96 fd ff ff       	call   200005b4 <syscall>

	*rpcID = state.ebx;
2000081e:	8b 45 08             	mov    0x8(%ebp),%eax
20000821:	8b 55 e4             	mov    -0x1c(%ebp),%edx
20000824:	89 10                	mov    %edx,(%eax)
	*rpcARG0 = state.ecx;
20000826:	8b 45 0c             	mov    0xc(%ebp),%eax
20000829:	8b 55 e8             	mov    -0x18(%ebp),%edx
2000082c:	89 10                	mov    %edx,(%eax)
	return (void*) state.eax;
}
2000082e:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000831:	c9                   	leave  
20000832:	c3                   	ret    

20000833 <rpc_init>:
	kprintf("RET RPC NO WORK\n");
	while(1) {
	}
}

void rpc_init() {
20000833:	55                   	push   %ebp
20000834:	31 c0                	xor    %eax,%eax
20000836:	89 e5                	mov    %esp,%ebp
20000838:	57                   	push   %edi
20000839:	56                   	push   %esi
2000083a:	83 ec 20             	sub    $0x20,%esp
	for(int i = 0; i < RPC_HANDLERS; i++) {
		rpcHandlers[i] = (int(*)(int, void*))0;
2000083d:	c7 04 85 10 40 00 20 	movl   $0x0,0x20004010(,%eax,4)
20000844:	00 00 00 00 
	while(1) {
	}
}

void rpc_init() {
	for(int i = 0; i < RPC_HANDLERS; i++) {
20000848:	40                   	inc    %eax
20000849:	3d 00 04 00 00       	cmp    $0x400,%eax
2000084e:	75 ed                	jne    2000083d <rpc_init+0xa>
			.eax = 0x202,
			.ebx = (uint32_t)&rpc_handler,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000850:	8d 7d e0             	lea    -0x20(%ebp),%edi
20000853:	be 54 30 00 20       	mov    $0x20003054,%esi
20000858:	b9 06 00 00 00       	mov    $0x6,%ecx

	syscall(&state);
2000085d:	83 ec 0c             	sub    $0xc,%esp
			.eax = 0x202,
			.ebx = (uint32_t)&rpc_handler,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000860:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	syscall(&state);
20000862:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000865:	50                   	push   %eax
20000866:	e8 49 fd ff ff       	call   200005b4 <syscall>
2000086b:	83 c4 10             	add    $0x10,%esp
}
2000086e:	8d 65 f8             	lea    -0x8(%ebp),%esp
20000871:	5e                   	pop    %esi
20000872:	5f                   	pop    %edi
20000873:	5d                   	pop    %ebp
20000874:	c3                   	ret    

20000875 <rpc_return>:

#define RPC_HANDLERS 1024

static int(*rpcHandlers[RPC_HANDLERS])(int, void*);

void rpc_return(int returnCode) {
20000875:	55                   	push   %ebp
20000876:	89 e5                	mov    %esp,%ebp
20000878:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x201,
			.ebx = returnCode,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
2000087b:	8b 45 08             	mov    0x8(%ebp),%eax
2000087e:	c7 45 e0 01 02 00 00 	movl   $0x201,-0x20(%ebp)
20000885:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	syscall(&state);
20000888:	8d 45 e0             	lea    -0x20(%ebp),%eax
2000088b:	50                   	push   %eax
			.eax = 0x201,
			.ebx = returnCode,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
2000088c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000893:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
2000089a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
200008a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
200008a8:	e8 07 fd ff ff       	call   200005b4 <syscall>

	kprintf("RET RPC NO WORK\n");
200008ad:	c7 04 24 bf 30 00 20 	movl   $0x200030bf,(%esp)
200008b4:	e8 f8 fd ff ff       	call   200006b1 <kprintf>
200008b9:	83 c4 10             	add    $0x10,%esp
200008bc:	eb fe                	jmp    200008bc <rpc_return+0x47>

200008be <rpc_handler>:
		}
	}
	return -1;
}

void rpc_handler() {
200008be:	55                   	push   %ebp
200008bf:	89 e5                	mov    %esp,%ebp
200008c1:	83 ec 20             	sub    $0x20,%esp
	uint32_t rpcID;
	uint32_t rpcARG0;
	void* rpcData = rpc_map(&rpcID, &rpcARG0);
200008c4:	8d 45 f0             	lea    -0x10(%ebp),%eax
200008c7:	50                   	push   %eax
200008c8:	8d 45 f4             	lea    -0xc(%ebp),%eax
200008cb:	50                   	push   %eax
200008cc:	e8 14 ff ff ff       	call   200007e5 <rpc_map>

	int returnValue = -1;

	if(rpcID < RPC_HANDLERS && rpcHandlers[rpcID] != 0) {
200008d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
200008d4:	83 c4 10             	add    $0x10,%esp
200008d7:	81 fa ff 03 00 00    	cmp    $0x3ff,%edx
200008dd:	77 18                	ja     200008f7 <rpc_handler+0x39>
200008df:	8b 14 95 10 40 00 20 	mov    0x20004010(,%edx,4),%edx
200008e6:	85 d2                	test   %edx,%edx
200008e8:	74 0d                	je     200008f7 <rpc_handler+0x39>
		returnValue = rpcHandlers[rpcID](rpcARG0, rpcData);
200008ea:	51                   	push   %ecx
200008eb:	51                   	push   %ecx
200008ec:	50                   	push   %eax
200008ed:	ff 75 f0             	pushl  -0x10(%ebp)
200008f0:	ff d2                	call   *%edx
200008f2:	83 c4 10             	add    $0x10,%esp
200008f5:	eb 03                	jmp    200008fa <rpc_handler+0x3c>
200008f7:	83 c8 ff             	or     $0xffffffff,%eax
	}

	rpc_return(returnValue);
200008fa:	83 ec 0c             	sub    $0xc,%esp
200008fd:	50                   	push   %eax
200008fe:	e8 72 ff ff ff       	call   20000875 <rpc_return>
20000903:	83 c4 10             	add    $0x10,%esp
}
20000906:	c9                   	leave  
20000907:	c3                   	ret    

20000908 <fRead>:
	syscall(&state);

	return state.eax;
}

FUTURE fRead(char* path, struct driver_data* drvData) {
20000908:	55                   	push   %ebp
20000909:	89 e5                	mov    %esp,%ebp
2000090b:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x305,
			.ebx = (uint32_t)path,
			.ecx = (uint32_t)drvData,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
2000090e:	8b 45 08             	mov    0x8(%ebp),%eax
20000911:	c7 45 e0 05 03 00 00 	movl   $0x305,-0x20(%ebp)
20000918:	89 45 e4             	mov    %eax,-0x1c(%ebp)
2000091b:	8b 45 0c             	mov    0xc(%ebp),%eax
2000091e:	89 45 e8             	mov    %eax,-0x18(%ebp)

	syscall(&state);
20000921:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000924:	50                   	push   %eax
			.eax = 0x305,
			.ebx = (uint32_t)path,
			.ecx = (uint32_t)drvData,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000925:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
2000092c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000933:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
2000093a:	e8 75 fc ff ff       	call   200005b4 <syscall>

	return state.eax;
}
2000093f:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000942:	c9                   	leave  
20000943:	c3                   	ret    

20000944 <fWrite>:
	syscall(&state);

	return state.eax;
}

FUTURE fWrite(char* path, struct driver_data* drvData) {
20000944:	55                   	push   %ebp
20000945:	89 e5                	mov    %esp,%ebp
20000947:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x304,
			.ebx = (uint32_t)path,
			.ecx = (uint32_t)drvData,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
2000094a:	8b 45 08             	mov    0x8(%ebp),%eax
2000094d:	c7 45 e0 04 03 00 00 	movl   $0x304,-0x20(%ebp)
20000954:	89 45 e4             	mov    %eax,-0x1c(%ebp)
20000957:	8b 45 0c             	mov    0xc(%ebp),%eax
2000095a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	syscall(&state);
2000095d:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000960:	50                   	push   %eax
			.eax = 0x304,
			.ebx = (uint32_t)path,
			.ecx = (uint32_t)drvData,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000961:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000968:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
2000096f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000976:	e8 39 fc ff ff       	call   200005b4 <syscall>

	return state.eax;
}
2000097b:	8b 45 e0             	mov    -0x20(%ebp),%eax
2000097e:	c9                   	leave  
2000097f:	c3                   	ret    

20000980 <fCall>:
	syscall(&state);

	return state.eax;
}

FUTURE fCall(char* driverName, int callID, struct driver_data* drvData) {
20000980:	55                   	push   %ebp
20000981:	89 e5                	mov    %esp,%ebp
20000983:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x303,
			.ebx = (uint32_t)driverName,
			.ecx = (uint32_t)drvData,
			.edx = callID,
			.esi = 0,
			.edi = 0 };
20000986:	8b 45 08             	mov    0x8(%ebp),%eax
20000989:	c7 45 e0 03 03 00 00 	movl   $0x303,-0x20(%ebp)
20000990:	89 45 e4             	mov    %eax,-0x1c(%ebp)
20000993:	8b 45 10             	mov    0x10(%ebp),%eax
20000996:	89 45 e8             	mov    %eax,-0x18(%ebp)
20000999:	8b 45 0c             	mov    0xc(%ebp),%eax
2000099c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	syscall(&state);
2000099f:	8d 45 e0             	lea    -0x20(%ebp),%eax
200009a2:	50                   	push   %eax
			.eax = 0x303,
			.ebx = (uint32_t)driverName,
			.ecx = (uint32_t)drvData,
			.edx = callID,
			.esi = 0,
			.edi = 0 };
200009a3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
200009aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
200009b1:	e8 fe fb ff ff       	call   200005b4 <syscall>

	return state.eax;
}
200009b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
200009b9:	c9                   	leave  
200009ba:	c3                   	ret    

200009bb <fModify>:
	syscall(&state);

	return state.eax;
}

FUTURE fModify(char* path, struct driver_data* drvData) {
200009bb:	55                   	push   %ebp
200009bc:	89 e5                	mov    %esp,%ebp
200009be:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x302,
			.ebx = (uint32_t)path,
			.ecx = (uint32_t)drvData,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
200009c1:	8b 45 08             	mov    0x8(%ebp),%eax
200009c4:	c7 45 e0 02 03 00 00 	movl   $0x302,-0x20(%ebp)
200009cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
200009ce:	8b 45 0c             	mov    0xc(%ebp),%eax
200009d1:	89 45 e8             	mov    %eax,-0x18(%ebp)

	syscall(&state);
200009d4:	8d 45 e0             	lea    -0x20(%ebp),%eax
200009d7:	50                   	push   %eax
			.eax = 0x302,
			.ebx = (uint32_t)path,
			.ecx = (uint32_t)drvData,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
200009d8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
200009df:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
200009e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
200009ed:	e8 c2 fb ff ff       	call   200005b4 <syscall>

	return state.eax;
}
200009f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
200009f5:	c9                   	leave  
200009f6:	c3                   	ret    

200009f7 <inl>:
	syscall(&state);

	return state.eax;
}

uint32_t inl(uint16_t port) {
200009f7:	55                   	push   %ebp
200009f8:	89 e5                	mov    %esp,%ebp
200009fa:	83 ec 34             	sub    $0x34,%esp
200009fd:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
			.eax = 0x606,
			.ebx = port,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000a01:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	syscall(&state);
20000a04:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000a07:	50                   	push   %eax
			.eax = 0x606,
			.ebx = port,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000a08:	c7 45 e0 06 06 00 00 	movl   $0x606,-0x20(%ebp)
20000a0f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000a16:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000a1d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000a24:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000a2b:	e8 84 fb ff ff       	call   200005b4 <syscall>

	return state.eax;
}
20000a30:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000a33:	c9                   	leave  
20000a34:	c3                   	ret    

20000a35 <inw>:
	syscall(&state);

	return state.eax;
}

uint16_t inw(uint16_t port) {
20000a35:	55                   	push   %ebp
20000a36:	89 e5                	mov    %esp,%ebp
20000a38:	83 ec 34             	sub    $0x34,%esp
20000a3b:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
			.eax = 0x605,
			.ebx = port,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000a3f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	syscall(&state);
20000a42:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000a45:	50                   	push   %eax
			.eax = 0x605,
			.ebx = port,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000a46:	c7 45 e0 05 06 00 00 	movl   $0x605,-0x20(%ebp)
20000a4d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000a54:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000a5b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000a62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000a69:	e8 46 fb ff ff       	call   200005b4 <syscall>

	return state.eax;
}
20000a6e:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000a71:	c9                   	leave  
20000a72:	c3                   	ret    

20000a73 <inb>:
			.edi = 0 };

	syscall(&state);
}

uint8_t inb(uint16_t port) {
20000a73:	55                   	push   %ebp
20000a74:	89 e5                	mov    %esp,%ebp
20000a76:	83 ec 34             	sub    $0x34,%esp
20000a79:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
			.eax = 0x604,
			.ebx = port,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000a7d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	syscall(&state);
20000a80:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000a83:	50                   	push   %eax
			.eax = 0x604,
			.ebx = port,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000a84:	c7 45 e0 04 06 00 00 	movl   $0x604,-0x20(%ebp)
20000a8b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000a92:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000a99:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000aa0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000aa7:	e8 08 fb ff ff       	call   200005b4 <syscall>

	return state.eax;
}
20000aac:	8a 45 e0             	mov    -0x20(%ebp),%al
20000aaf:	c9                   	leave  
20000ab0:	c3                   	ret    

20000ab1 <outl>:
			.edi = 0 };

	syscall(&state);
}

void outl(uint16_t port, uint32_t value) {
20000ab1:	55                   	push   %ebp
20000ab2:	89 e5                	mov    %esp,%ebp
20000ab4:	83 ec 34             	sub    $0x34,%esp
20000ab7:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
			.eax = 0x603,
			.ebx = port,
			.ecx = value,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000abb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
20000abe:	8b 45 0c             	mov    0xc(%ebp),%eax
20000ac1:	89 45 e8             	mov    %eax,-0x18(%ebp)

	syscall(&state);
20000ac4:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000ac7:	50                   	push   %eax
			.eax = 0x603,
			.ebx = port,
			.ecx = value,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000ac8:	c7 45 e0 03 06 00 00 	movl   $0x603,-0x20(%ebp)
20000acf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000ad6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000add:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000ae4:	e8 cb fa ff ff       	call   200005b4 <syscall>
20000ae9:	83 c4 10             	add    $0x10,%esp
}
20000aec:	c9                   	leave  
20000aed:	c3                   	ret    

20000aee <outw>:
			.edi = 0 };

	syscall(&state);
}

void outw(uint16_t port, uint16_t value) {
20000aee:	55                   	push   %ebp
20000aef:	89 e5                	mov    %esp,%ebp
20000af1:	83 ec 34             	sub    $0x34,%esp
20000af4:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
20000af8:	0f b7 55 08          	movzwl 0x8(%ebp),%edx
			.eax = 0x602,
			.ebx = port,
			.ecx = value,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000afc:	89 45 e8             	mov    %eax,-0x18(%ebp)

	syscall(&state);
20000aff:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000b02:	50                   	push   %eax
			.eax = 0x602,
			.ebx = port,
			.ecx = value,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000b03:	c7 45 e0 02 06 00 00 	movl   $0x602,-0x20(%ebp)
20000b0a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
20000b0d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000b14:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000b1b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000b22:	e8 8d fa ff ff       	call   200005b4 <syscall>
20000b27:	83 c4 10             	add    $0x10,%esp
}
20000b2a:	c9                   	leave  
20000b2b:	c3                   	ret    

20000b2c <outb>:
	syscall(&state);

	return state.eax;
}

void outb(uint16_t port, uint8_t value) {
20000b2c:	55                   	push   %ebp
20000b2d:	89 e5                	mov    %esp,%ebp
20000b2f:	83 ec 34             	sub    $0x34,%esp
20000b32:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
			.eax = 0x601,
			.ebx = port,
			.ecx = value,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000b36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
20000b39:	c7 45 e0 01 06 00 00 	movl   $0x601,-0x20(%ebp)
20000b40:	0f b6 45 0c          	movzbl 0xc(%ebp),%eax
20000b44:	89 45 e8             	mov    %eax,-0x18(%ebp)

	syscall(&state);
20000b47:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000b4a:	50                   	push   %eax
			.eax = 0x601,
			.ebx = port,
			.ecx = value,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000b4b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000b52:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000b59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000b60:	e8 4f fa ff ff       	call   200005b4 <syscall>
20000b65:	83 c4 10             	add    $0x10,%esp
}
20000b68:	c9                   	leave  
20000b69:	c3                   	ret    

20000b6a <register_irq_rpc>:
	syscall(&state);

	return state.eax;
}

int register_irq_rpc(uint32_t irqID, int rpcID) {
20000b6a:	55                   	push   %ebp
20000b6b:	89 e5                	mov    %esp,%ebp
20000b6d:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x600,
			.ebx = irqID,
			.ecx = rpcID,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000b70:	8b 45 08             	mov    0x8(%ebp),%eax
20000b73:	c7 45 e0 00 06 00 00 	movl   $0x600,-0x20(%ebp)
20000b7a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
20000b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
20000b80:	89 45 e8             	mov    %eax,-0x18(%ebp)

	syscall(&state);
20000b83:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000b86:	50                   	push   %eax
			.eax = 0x600,
			.ebx = irqID,
			.ecx = rpcID,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000b87:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000b8e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000b95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000b9c:	e8 13 fa ff ff       	call   200005b4 <syscall>

	return state.eax;
}
20000ba1:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000ba4:	c9                   	leave  
20000ba5:	c3                   	ret    

20000ba6 <register_path>:
	syscall(&state);

	return state.eax;
}

int register_path(char* path, int driverID, int resourceID) {
20000ba6:	55                   	push   %ebp
20000ba7:	89 e5                	mov    %esp,%ebp
20000ba9:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x301,
			.ebx = (uint32_t)path,
			.ecx = driverID,
			.edx = resourceID,
			.esi = 0,
			.edi = 0 };
20000bac:	8b 45 08             	mov    0x8(%ebp),%eax
20000baf:	c7 45 e0 01 03 00 00 	movl   $0x301,-0x20(%ebp)
20000bb6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
20000bb9:	8b 45 0c             	mov    0xc(%ebp),%eax
20000bbc:	89 45 e8             	mov    %eax,-0x18(%ebp)
20000bbf:	8b 45 10             	mov    0x10(%ebp),%eax
20000bc2:	89 45 ec             	mov    %eax,-0x14(%ebp)

	syscall(&state);
20000bc5:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000bc8:	50                   	push   %eax
			.eax = 0x301,
			.ebx = (uint32_t)path,
			.ecx = driverID,
			.edx = resourceID,
			.esi = 0,
			.edi = 0 };
20000bc9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000bd0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000bd7:	e8 d8 f9 ff ff       	call   200005b4 <syscall>

	return state.eax;
}
20000bdc:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000bdf:	c9                   	leave  
20000be0:	c3                   	ret    

20000be1 <register_driver>:
#include "driver.h"
#include "syscall.h"
#include "memory.h"

int register_driver(int dModifyID, int dInfoID, int dReadID, int dWriteID, char* drvName) {
20000be1:	55                   	push   %ebp
20000be2:	89 e5                	mov    %esp,%ebp
20000be4:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x300,
			.ebx = dModifyID,
			.ecx = dInfoID,
			.edx = dReadID,
			.esi = dWriteID,
			.edi = (uint32_t)drvName };
20000be7:	8b 45 08             	mov    0x8(%ebp),%eax
20000bea:	c7 45 e0 00 03 00 00 	movl   $0x300,-0x20(%ebp)
20000bf1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
20000bf4:	8b 45 0c             	mov    0xc(%ebp),%eax
20000bf7:	89 45 e8             	mov    %eax,-0x18(%ebp)
20000bfa:	8b 45 10             	mov    0x10(%ebp),%eax
20000bfd:	89 45 ec             	mov    %eax,-0x14(%ebp)
20000c00:	8b 45 14             	mov    0x14(%ebp),%eax
20000c03:	89 45 f0             	mov    %eax,-0x10(%ebp)
20000c06:	8b 45 18             	mov    0x18(%ebp),%eax
20000c09:	89 45 f4             	mov    %eax,-0xc(%ebp)

	syscall(&state);
20000c0c:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000c0f:	50                   	push   %eax
20000c10:	e8 9f f9 ff ff       	call   200005b4 <syscall>

	return state.eax;
}
20000c15:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000c18:	c9                   	leave  
20000c19:	c3                   	ret    
	...

20000c1c <memset>:
			.edi = 0 };

	syscall(&state);
}

void* memset(void* buf, int c, uint32_t n) {
20000c1c:	55                   	push   %ebp
20000c1d:	89 e5                	mov    %esp,%ebp
20000c1f:	53                   	push   %ebx
20000c20:	8b 45 08             	mov    0x8(%ebp),%eax
20000c23:	8b 5d 0c             	mov    0xc(%ebp),%ebx
20000c26:	8b 4d 10             	mov    0x10(%ebp),%ecx
	unsigned char* p = buf;
20000c29:	89 c2                	mov    %eax,%edx

	while (n--) {
20000c2b:	eb 04                	jmp    20000c31 <memset+0x15>
		*p++ = c;
20000c2d:	88 1a                	mov    %bl,(%edx)
20000c2f:	49                   	dec    %ecx
20000c30:	42                   	inc    %edx
}

void* memset(void* buf, int c, uint32_t n) {
	unsigned char* p = buf;

	while (n--) {
20000c31:	85 c9                	test   %ecx,%ecx
20000c33:	75 f8                	jne    20000c2d <memset+0x11>
		*p++ = c;
	}

	return buf;
}
20000c35:	5b                   	pop    %ebx
20000c36:	5d                   	pop    %ebp
20000c37:	c3                   	ret    

20000c38 <memcpy>:

void* memcpy(void* dest, const void* src, uint32_t n) {
20000c38:	55                   	push   %ebp
	unsigned char* d = dest;
	const unsigned char* s = src;

	if (n == 0)
20000c39:	31 c9                	xor    %ecx,%ecx
	}

	return buf;
}

void* memcpy(void* dest, const void* src, uint32_t n) {
20000c3b:	89 e5                	mov    %esp,%ebp
20000c3d:	56                   	push   %esi
20000c3e:	53                   	push   %ebx
20000c3f:	8b 75 10             	mov    0x10(%ebp),%esi
20000c42:	8b 45 08             	mov    0x8(%ebp),%eax
20000c45:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	unsigned char* d = dest;
	const unsigned char* s = src;

	if (n == 0)
20000c48:	85 f6                	test   %esi,%esi
20000c4a:	75 04                	jne    20000c50 <memcpy+0x18>
20000c4c:	31 c0                	xor    %eax,%eax
20000c4e:	eb 0a                	jmp    20000c5a <memcpy+0x22>
		return 0;

	while (n--) {
		*(d++) = *(s++);
20000c50:	8a 14 0b             	mov    (%ebx,%ecx,1),%dl
20000c53:	88 14 08             	mov    %dl,(%eax,%ecx,1)
20000c56:	41                   	inc    %ecx
	const unsigned char* s = src;

	if (n == 0)
		return 0;

	while (n--) {
20000c57:	4e                   	dec    %esi
20000c58:	75 f6                	jne    20000c50 <memcpy+0x18>
		*(d++) = *(s++);
	}

	return dest;
}
20000c5a:	5b                   	pop    %ebx
20000c5b:	5e                   	pop    %esi
20000c5c:	5d                   	pop    %ebp
20000c5d:	c3                   	ret    

20000c5e <memcmp>:

int memcmp(const void* ptr1, const void* ptr2, uint32_t num) {
20000c5e:	55                   	push   %ebp
	if (ptr1 == 0)
20000c5f:	83 c8 ff             	or     $0xffffffff,%eax
	}

	return dest;
}

int memcmp(const void* ptr1, const void* ptr2, uint32_t num) {
20000c62:	89 e5                	mov    %esp,%ebp
20000c64:	57                   	push   %edi
20000c65:	56                   	push   %esi
20000c66:	53                   	push   %ebx
20000c67:	8b 75 08             	mov    0x8(%ebp),%esi
20000c6a:	8b 7d 0c             	mov    0xc(%ebp),%edi
20000c6d:	8b 5d 10             	mov    0x10(%ebp),%ebx
	if (ptr1 == 0)
20000c70:	85 f6                	test   %esi,%esi
20000c72:	74 2c                	je     20000ca0 <memcmp+0x42>
		return -1;
	if (ptr2 == 0)
20000c74:	b8 01 00 00 00       	mov    $0x1,%eax
20000c79:	85 ff                	test   %edi,%edi
20000c7b:	74 23                	je     20000ca0 <memcmp+0x42>
		return 1;
	if (num == 0)
20000c7d:	31 d2                	xor    %edx,%edx
20000c7f:	85 db                	test   %ebx,%ebx
20000c81:	75 17                	jne    20000c9a <memcmp+0x3c>
20000c83:	eb 19                	jmp    20000c9e <memcmp+0x40>

	const uint8_t* pa = ptr1;
	const uint8_t* pb = ptr2;

	for (uint32_t i = 0; i < num; i++) {
		if (pa[i] != pb[i]) {
20000c85:	8a 04 16             	mov    (%esi,%edx,1),%al
20000c88:	8a 0c 17             	mov    (%edi,%edx,1),%cl
20000c8b:	38 c8                	cmp    %cl,%al
20000c8d:	74 0a                	je     20000c99 <memcmp+0x3b>
			return pa[i] - pb[i];
20000c8f:	0f b6 c0             	movzbl %al,%eax
20000c92:	0f b6 c9             	movzbl %cl,%ecx
20000c95:	29 c8                	sub    %ecx,%eax
20000c97:	eb 07                	jmp    20000ca0 <memcmp+0x42>
		return 0;

	const uint8_t* pa = ptr1;
	const uint8_t* pb = ptr2;

	for (uint32_t i = 0; i < num; i++) {
20000c99:	42                   	inc    %edx
20000c9a:	39 da                	cmp    %ebx,%edx
20000c9c:	72 e7                	jb     20000c85 <memcmp+0x27>
20000c9e:	31 c0                	xor    %eax,%eax
		if (pa[i] != pb[i]) {
			return pa[i] - pb[i];
		}
	}
	return 0;
}
20000ca0:	5b                   	pop    %ebx
20000ca1:	5e                   	pop    %esi
20000ca2:	5f                   	pop    %edi
20000ca3:	5d                   	pop    %ebp
20000ca4:	c3                   	ret    

20000ca5 <pfree>:
	memset((void*)state.eax, 0, pages * 0x1000);

	return (void*)state.eax;
}

void pfree(void* page) {
20000ca5:	55                   	push   %ebp
20000ca6:	89 e5                	mov    %esp,%ebp
20000ca8:	83 ec 34             	sub    $0x34,%esp
			.eax = 0x401,
			.ebx = (uint32_t)page,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000cab:	8b 45 08             	mov    0x8(%ebp),%eax
20000cae:	c7 45 e0 01 04 00 00 	movl   $0x401,-0x20(%ebp)
20000cb5:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	syscall(&state);
20000cb8:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000cbb:	50                   	push   %eax
			.eax = 0x401,
			.ebx = (uint32_t)page,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000cbc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000cc3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000cca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000cd1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000cd8:	e8 d7 f8 ff ff       	call   200005b4 <syscall>
20000cdd:	83 c4 10             	add    $0x10,%esp
}
20000ce0:	c9                   	leave  
20000ce1:	c3                   	ret    

20000ce2 <pcalloc>:

void* palloc() {
	return pcalloc(1);
}

void* pcalloc(uint32_t pages) {
20000ce2:	55                   	push   %ebp
20000ce3:	89 e5                	mov    %esp,%ebp
20000ce5:	53                   	push   %ebx
20000ce6:	83 ec 30             	sub    $0x30,%esp
20000ce9:	8b 5d 08             	mov    0x8(%ebp),%ebx
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };

	syscall(&state);
20000cec:	8d 45 e0             	lea    -0x20(%ebp),%eax
20000cef:	50                   	push   %eax
			.eax = 0x400,
			.ebx = pages,
			.ecx = 0,
			.edx = 0,
			.esi = 0,
			.edi = 0 };
20000cf0:	c7 45 e0 00 04 00 00 	movl   $0x400,-0x20(%ebp)
20000cf7:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
20000cfa:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
20000d01:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
20000d08:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
20000d0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	syscall(&state);
20000d16:	e8 99 f8 ff ff       	call   200005b4 <syscall>

	memset((void*)state.eax, 0, pages * 0x1000);
20000d1b:	89 da                	mov    %ebx,%edx

	syscall(&state);
}

void* memset(void* buf, int c, uint32_t n) {
	unsigned char* p = buf;
20000d1d:	8b 45 e0             	mov    -0x20(%ebp),%eax
			.esi = 0,
			.edi = 0 };

	syscall(&state);

	memset((void*)state.eax, 0, pages * 0x1000);
20000d20:	c1 e2 0c             	shl    $0xc,%edx

	syscall(&state);
}

void* memset(void* buf, int c, uint32_t n) {
	unsigned char* p = buf;
20000d23:	83 c4 10             	add    $0x10,%esp
20000d26:	eb 05                	jmp    20000d2d <pcalloc+0x4b>

	while (n--) {
		*p++ = c;
20000d28:	c6 00 00             	movb   $0x0,(%eax)
20000d2b:	4a                   	dec    %edx
20000d2c:	40                   	inc    %eax
}

void* memset(void* buf, int c, uint32_t n) {
	unsigned char* p = buf;

	while (n--) {
20000d2d:	85 d2                	test   %edx,%edx
20000d2f:	75 f7                	jne    20000d28 <pcalloc+0x46>
	syscall(&state);

	memset((void*)state.eax, 0, pages * 0x1000);

	return (void*)state.eax;
}
20000d31:	8b 45 e0             	mov    -0x20(%ebp),%eax
20000d34:	8b 5d fc             	mov    -0x4(%ebp),%ebx
20000d37:	c9                   	leave  
20000d38:	c3                   	ret    

20000d39 <palloc>:
#include "memory.h"
#include "syscall.h"

void* palloc() {
20000d39:	55                   	push   %ebp
20000d3a:	89 e5                	mov    %esp,%ebp
20000d3c:	83 ec 14             	sub    $0x14,%esp
	return pcalloc(1);
20000d3f:	6a 01                	push   $0x1
20000d41:	e8 9c ff ff ff       	call   20000ce2 <pcalloc>
}
20000d46:	c9                   	leave  
20000d47:	c3                   	ret    

20000d48 <free>:
		cur = cur->next;
	}
	return NULL;
}

void free(void* ptr) {
20000d48:	55                   	push   %ebp
20000d49:	89 e5                	mov    %esp,%ebp
20000d4b:	57                   	push   %edi
20000d4c:	56                   	push   %esi
20000d4d:	53                   	push   %ebx
20000d4e:	83 ec 2c             	sub    $0x2c,%esp
20000d51:	8b 45 08             	mov    0x8(%ebp),%eax
	struct memory_node* cur = first_used;
20000d54:	8b 1d 14 50 00 20    	mov    0x20005014,%ebx

	while (cur != NULL) {
20000d5a:	e9 d3 00 00 00       	jmp    20000e32 <free+0xea>
		if (cur->address == (uint32_t) ptr) {
20000d5f:	3b 43 04             	cmp    0x4(%ebx),%eax
20000d62:	0f 85 c7 00 00 00    	jne    20000e2f <free+0xe7>
			memset(ptr, 0, cur->size);
20000d68:	52                   	push   %edx
20000d69:	ff 33                	pushl  (%ebx)
20000d6b:	6a 00                	push   $0x0
20000d6d:	50                   	push   %eax
20000d6e:	e8 a9 fe ff ff       	call   20000c1c <memset>
			malloced -= cur->size;
20000d73:	8b 03                	mov    (%ebx),%eax
20000d75:	29 05 1c 50 00 20    	sub    %eax,0x2000501c
struct memory_node* first_used = 0;
struct memory_node* first_free = 0;

static void remove_from_list(struct memory_node** root, struct memory_node* element) {
	struct memory_node* last = 0;
	struct memory_node* cur = *root;
20000d7b:	31 d2                	xor    %edx,%edx
20000d7d:	a1 14 50 00 20       	mov    0x20005014,%eax
20000d82:	83 c4 10             	add    $0x10,%esp
20000d85:	eb 22                	jmp    20000da9 <free+0x61>

	while (cur != NULL) {
		if (cur == element) {
20000d87:	39 d8                	cmp    %ebx,%eax
20000d89:	75 19                	jne    20000da4 <free+0x5c>
			if (last == NULL) {
20000d8b:	85 d2                	test   %edx,%edx
20000d8d:	8b 43 08             	mov    0x8(%ebx),%eax
20000d90:	75 0d                	jne    20000d9f <free+0x57>
				*root = cur->next;
20000d92:	a3 14 50 00 20       	mov    %eax,0x20005014
20000d97:	8b 15 18 50 00 20    	mov    0x20005018,%edx
20000d9d:	eb 10                	jmp    20000daf <free+0x67>
				return;
			} else {
				last->next = cur->next;
20000d9f:	89 42 08             	mov    %eax,0x8(%edx)
20000da2:	eb f3                	jmp    20000d97 <free+0x4f>
				return;
			}
		}
		last = cur;
		cur = cur->next;
20000da4:	89 c2                	mov    %eax,%edx
20000da6:	8b 40 08             	mov    0x8(%eax),%eax

static void remove_from_list(struct memory_node** root, struct memory_node* element) {
	struct memory_node* last = 0;
	struct memory_node* cur = *root;

	while (cur != NULL) {
20000da9:	85 c0                	test   %eax,%eax
20000dab:	75 da                	jne    20000d87 <free+0x3f>
20000dad:	eb e8                	jmp    20000d97 <free+0x4f>
20000daf:	89 d0                	mov    %edx,%eax
20000db1:	eb 6d                	jmp    20000e20 <free+0xd8>
	struct memory_node* cur;

	editedList: cur = first_free;

	while (cur != NULL) {
		if (cur->address + cur->size == tf->address) {
20000db3:	8b 48 04             	mov    0x4(%eax),%ecx
20000db6:	8b 30                	mov    (%eax),%esi
20000db8:	8b 7b 04             	mov    0x4(%ebx),%edi
20000dbb:	89 7d d4             	mov    %edi,-0x2c(%ebp)
20000dbe:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
20000dc1:	89 7d e4             	mov    %edi,-0x1c(%ebp)
20000dc4:	8b 7d d4             	mov    -0x2c(%ebp),%edi
20000dc7:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
20000dca:	75 18                	jne    20000de4 <free+0x9c>
			tf->address = cur->address;
20000dcc:	89 4b 04             	mov    %ecx,0x4(%ebx)
20000dcf:	31 f6                	xor    %esi,%esi
20000dd1:	89 d1                	mov    %edx,%ecx
20000dd3:	eb 09                	jmp    20000dde <free+0x96>
static void remove_from_list(struct memory_node** root, struct memory_node* element) {
	struct memory_node* last = 0;
	struct memory_node* cur = *root;

	while (cur != NULL) {
		if (cur == element) {
20000dd5:	39 c1                	cmp    %eax,%ecx
20000dd7:	74 29                	je     20000e02 <free+0xba>
				last->next = cur->next;
				return;
			}
		}
		last = cur;
		cur = cur->next;
20000dd9:	89 ce                	mov    %ecx,%esi
20000ddb:	8b 49 08             	mov    0x8(%ecx),%ecx

static void remove_from_list(struct memory_node** root, struct memory_node* element) {
	struct memory_node* last = 0;
	struct memory_node* cur = *root;

	while (cur != NULL) {
20000dde:	85 c9                	test   %ecx,%ecx
20000de0:	75 f3                	jne    20000dd5 <free+0x8d>
20000de2:	eb cb                	jmp    20000daf <free+0x67>
			tf->address = cur->address;
			remove_from_list(&first_free, cur);
			goto editedList;
		}

		if (cur->address == tf->address + tf->size) {
20000de4:	8b 3b                	mov    (%ebx),%edi
20000de6:	89 7d e4             	mov    %edi,-0x1c(%ebp)
20000de9:	8b 7d d4             	mov    -0x2c(%ebp),%edi
20000dec:	03 7d e4             	add    -0x1c(%ebp),%edi
20000def:	39 f9                	cmp    %edi,%ecx
20000df1:	75 2a                	jne    20000e1d <free+0xd5>
			tf->size += cur->size;
20000df3:	03 75 e4             	add    -0x1c(%ebp),%esi
20000df6:	89 d1                	mov    %edx,%ecx
20000df8:	89 33                	mov    %esi,(%ebx)
20000dfa:	31 f6                	xor    %esi,%esi
20000dfc:	eb 19                	jmp    20000e17 <free+0xcf>
static void remove_from_list(struct memory_node** root, struct memory_node* element) {
	struct memory_node* last = 0;
	struct memory_node* cur = *root;

	while (cur != NULL) {
		if (cur == element) {
20000dfe:	39 c1                	cmp    %eax,%ecx
20000e00:	75 10                	jne    20000e12 <free+0xca>
			if (last == NULL) {
20000e02:	85 f6                	test   %esi,%esi
20000e04:	8b 41 08             	mov    0x8(%ecx),%eax
20000e07:	75 04                	jne    20000e0d <free+0xc5>
				*root = cur->next;
20000e09:	89 c2                	mov    %eax,%edx
20000e0b:	eb a2                	jmp    20000daf <free+0x67>
				return;
			} else {
				last->next = cur->next;
20000e0d:	89 46 08             	mov    %eax,0x8(%esi)
20000e10:	eb 9d                	jmp    20000daf <free+0x67>
				return;
			}
		}
		last = cur;
		cur = cur->next;
20000e12:	89 ce                	mov    %ecx,%esi
20000e14:	8b 49 08             	mov    0x8(%ecx),%ecx

static void remove_from_list(struct memory_node** root, struct memory_node* element) {
	struct memory_node* last = 0;
	struct memory_node* cur = *root;

	while (cur != NULL) {
20000e17:	85 c9                	test   %ecx,%ecx
20000e19:	75 e3                	jne    20000dfe <free+0xb6>
20000e1b:	eb 92                	jmp    20000daf <free+0x67>
			tf->size += cur->size;
			remove_from_list(&first_free, cur);
			goto editedList;
		}

		cur = cur->next;
20000e1d:	8b 40 08             	mov    0x8(%eax),%eax

	struct memory_node* cur;

	editedList: cur = first_free;

	while (cur != NULL) {
20000e20:	85 c0                	test   %eax,%eax
20000e22:	75 8f                	jne    20000db3 <free+0x6b>
		cur = cur->next;
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
20000e24:	89 53 08             	mov    %edx,0x8(%ebx)
	*root = element;
20000e27:	89 1d 18 50 00 20    	mov    %ebx,0x20005018
		if (cur->address == (uint32_t) ptr) {
			memset(ptr, 0, cur->size);
			malloced -= cur->size;

			merge_into_frees(cur);
			break;
20000e2d:	eb 0b                	jmp    20000e3a <free+0xf2>
		}
		cur = cur->next;
20000e2f:	8b 5b 08             	mov    0x8(%ebx),%ebx
}

void free(void* ptr) {
	struct memory_node* cur = first_used;

	while (cur != NULL) {
20000e32:	85 db                	test   %ebx,%ebx
20000e34:	0f 85 25 ff ff ff    	jne    20000d5f <free+0x17>
			merge_into_frees(cur);
			break;
		}
		cur = cur->next;
	}
}
20000e3a:	8d 65 f4             	lea    -0xc(%ebp),%esp
20000e3d:	5b                   	pop    %ebx
20000e3e:	5e                   	pop    %esi
20000e3f:	5f                   	pop    %edi
20000e40:	5d                   	pop    %ebp
20000e41:	c3                   	ret    

20000e42 <pop_unused_node>:
	for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
		append_to_list(&first_unused, &(new_nodes[i]));
	}
}

static struct memory_node* pop_unused_node() {
20000e42:	55                   	push   %ebp
20000e43:	89 e5                	mov    %esp,%ebp
20000e45:	53                   	push   %ebx
20000e46:	83 ec 04             	sub    $0x4,%esp
	element->next = *root;
	*root = element;
}

static struct memory_node* pop_from_list(struct memory_node** root) {
	if (*root == NULL) return NULL;
20000e49:	a1 10 50 00 20       	mov    0x20005010,%eax
20000e4e:	eb 45                	jmp    20000e95 <pop_unused_node+0x53>
	remove_from_list(root, pop);
	return pop;
}

static void allocate_unused_nodes() {
	struct memory_node* new_nodes = pcalloc(1);
20000e50:	83 ec 0c             	sub    $0xc,%esp
20000e53:	6a 01                	push   $0x1
20000e55:	e8 88 fe ff ff       	call   20000ce2 <pcalloc>
	memset(new_nodes, 0, PAGESIZE);
20000e5a:	83 c4 0c             	add    $0xc,%esp
	remove_from_list(root, pop);
	return pop;
}

static void allocate_unused_nodes() {
	struct memory_node* new_nodes = pcalloc(1);
20000e5d:	89 c3                	mov    %eax,%ebx
	memset(new_nodes, 0, PAGESIZE);
20000e5f:	68 00 10 00 00       	push   $0x1000
20000e64:	6a 00                	push   $0x0
20000e66:	50                   	push   %eax
20000e67:	e8 b0 fd ff ff       	call   20000c1c <memset>
20000e6c:	8b 15 10 50 00 20    	mov    0x20005010,%edx
20000e72:	8d 43 0c             	lea    0xc(%ebx),%eax
	for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
		append_to_list(&first_unused, &(new_nodes[i]));
	}
}

static struct memory_node* pop_unused_node() {
20000e75:	8d 8b fc 0f 00 00    	lea    0xffc(%ebx),%ecx
20000e7b:	83 c4 10             	add    $0x10,%esp
		cur = cur->next;
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
20000e7e:	89 50 08             	mov    %edx,0x8(%eax)
20000e81:	89 c2                	mov    %eax,%edx
20000e83:	83 c0 0c             	add    $0xc,%eax

static void allocate_unused_nodes() {
	struct memory_node* new_nodes = pcalloc(1);
	memset(new_nodes, 0, PAGESIZE);

	for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
20000e86:	39 c8                	cmp    %ecx,%eax
20000e88:	75 f4                	jne    20000e7e <pop_unused_node+0x3c>
20000e8a:	8d 83 f0 0f 00 00    	lea    0xff0(%ebx),%eax
20000e90:	a3 10 50 00 20       	mov    %eax,0x20005010
	element->next = *root;
	*root = element;
}

static struct memory_node* pop_from_list(struct memory_node** root) {
	if (*root == NULL) return NULL;
20000e95:	85 c0                	test   %eax,%eax
20000e97:	74 b7                	je     20000e50 <pop_unused_node+0xe>
	struct memory_node* cur = *root;

	while (cur != NULL) {
		if (cur == element) {
			if (last == NULL) {
				*root = cur->next;
20000e99:	8b 50 08             	mov    0x8(%eax),%edx
}

static struct memory_node* pop_unused_node() {
	struct memory_node* ret = pop_from_list(&first_unused);

	while (ret == NULL) {
20000e9c:	85 c0                	test   %eax,%eax
	struct memory_node* cur = *root;

	while (cur != NULL) {
		if (cur == element) {
			if (last == NULL) {
				*root = cur->next;
20000e9e:	89 15 10 50 00 20    	mov    %edx,0x20005010
}

static struct memory_node* pop_unused_node() {
	struct memory_node* ret = pop_from_list(&first_unused);

	while (ret == NULL) {
20000ea4:	74 aa                	je     20000e50 <pop_unused_node+0xe>
		allocate_unused_nodes();
		ret = pop_from_list(&first_unused);
	}

	return ret;
}
20000ea6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
20000ea9:	c9                   	leave  
20000eaa:	c3                   	ret    

20000eab <malloc>:
	append_to_list(&first_free, tf);
}

uint32_t malloced = 0;

void* malloc(size_t size) {
20000eab:	55                   	push   %ebp
	if (size == 0)
20000eac:	31 c0                	xor    %eax,%eax
	append_to_list(&first_free, tf);
}

uint32_t malloced = 0;

void* malloc(size_t size) {
20000eae:	89 e5                	mov    %esp,%ebp
20000eb0:	57                   	push   %edi
20000eb1:	56                   	push   %esi
20000eb2:	53                   	push   %ebx
20000eb3:	83 ec 1c             	sub    $0x1c,%esp
20000eb6:	8b 75 08             	mov    0x8(%ebp),%esi
	if (size == 0)
20000eb9:	85 f6                	test   %esi,%esi
20000ebb:	0f 84 aa 00 00 00    	je     20000f6b <malloc+0xc0>
		return NULL;

	malloced += size;

	struct memory_node* cur = first_free;
20000ec1:	a1 18 50 00 20       	mov    0x20005018,%eax

void* malloc(size_t size) {
	if (size == 0)
		return NULL;

	malloced += size;
20000ec6:	01 35 1c 50 00 20    	add    %esi,0x2000501c

	struct memory_node* cur = first_free;
20000ecc:	89 c3                	mov    %eax,%ebx

	while (cur != NULL) {
20000ece:	eb 07                	jmp    20000ed7 <malloc+0x2c>
		if (cur->size >= size) {
20000ed0:	39 33                	cmp    %esi,(%ebx)
20000ed2:	73 0c                	jae    20000ee0 <malloc+0x35>
			break;
		}
		cur = cur->next;
20000ed4:	8b 5b 08             	mov    0x8(%ebx),%ebx

	malloced += size;

	struct memory_node* cur = first_free;

	while (cur != NULL) {
20000ed7:	85 db                	test   %ebx,%ebx
20000ed9:	75 f5                	jne    20000ed0 <malloc+0x25>
20000edb:	e9 93 00 00 00       	jmp    20000f73 <malloc+0xc8>

		append_to_list(&first_used, fill);

		return (void*) fill->address;
	} else {
		uint32_t freesize = cur->size - size;
20000ee0:	8b 3b                	mov    (%ebx),%edi

		cur->size = size;
20000ee2:	31 d2                	xor    %edx,%edx

		append_to_list(&first_used, fill);

		return (void*) fill->address;
	} else {
		uint32_t freesize = cur->size - size;
20000ee4:	29 f7                	sub    %esi,%edi

		cur->size = size;
20000ee6:	89 33                	mov    %esi,(%ebx)
20000ee8:	eb 4b                	jmp    20000f35 <malloc+0x8a>

		fill->address = (uint32_t) addr;
		fill->size = (uint32_t) size;

		if (pgs * PAGESIZE > size) {
			struct memory_node* free = pop_unused_node();
20000eea:	e8 53 ff ff ff       	call   20000e42 <pop_unused_node>

			free->address = fill->address + fill->size;
20000eef:	8b 13                	mov    (%ebx),%edx
20000ef1:	03 53 04             	add    0x4(%ebx),%edx
			free->size = pgs * PAGESIZE - size;
20000ef4:	29 f7                	sub    %esi,%edi
		fill->size = (uint32_t) size;

		if (pgs * PAGESIZE > size) {
			struct memory_node* free = pop_unused_node();

			free->address = fill->address + fill->size;
20000ef6:	89 50 04             	mov    %edx,0x4(%eax)
		cur = cur->next;
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
20000ef9:	8b 15 18 50 00 20    	mov    0x20005018,%edx
20000eff:	89 50 08             	mov    %edx,0x8(%eax)

		if (pgs * PAGESIZE > size) {
			struct memory_node* free = pop_unused_node();

			free->address = fill->address + fill->size;
			free->size = pgs * PAGESIZE - size;
20000f02:	89 38                	mov    %edi,(%eax)
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
	*root = element;
20000f04:	a3 18 50 00 20       	mov    %eax,0x20005018
		cur = cur->next;
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
20000f09:	a1 14 50 00 20       	mov    0x20005014,%eax
20000f0e:	89 43 08             	mov    %eax,0x8(%ebx)
	*root = element;
20000f11:	89 1d 14 50 00 20    	mov    %ebx,0x20005014
20000f17:	eb 4f                	jmp    20000f68 <malloc+0xbd>
static void remove_from_list(struct memory_node** root, struct memory_node* element) {
	struct memory_node* last = 0;
	struct memory_node* cur = *root;

	while (cur != NULL) {
		if (cur == element) {
20000f19:	39 d8                	cmp    %ebx,%eax
20000f1b:	75 13                	jne    20000f30 <malloc+0x85>
			if (last == NULL) {
20000f1d:	85 d2                	test   %edx,%edx
20000f1f:	8b 43 08             	mov    0x8(%ebx),%eax
20000f22:	75 07                	jne    20000f2b <malloc+0x80>
				*root = cur->next;
20000f24:	a3 18 50 00 20       	mov    %eax,0x20005018
20000f29:	eb 0e                	jmp    20000f39 <malloc+0x8e>
				return;
			} else {
				last->next = cur->next;
20000f2b:	89 42 08             	mov    %eax,0x8(%edx)
20000f2e:	eb 09                	jmp    20000f39 <malloc+0x8e>
				return;
			}
		}
		last = cur;
		cur = cur->next;
20000f30:	89 c2                	mov    %eax,%edx
20000f32:	8b 40 08             	mov    0x8(%eax),%eax

static void remove_from_list(struct memory_node** root, struct memory_node* element) {
	struct memory_node* last = 0;
	struct memory_node* cur = *root;

	while (cur != NULL) {
20000f35:	85 c0                	test   %eax,%eax
20000f37:	75 e0                	jne    20000f19 <malloc+0x6e>
		cur = cur->next;
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
20000f39:	a1 14 50 00 20       	mov    0x20005014,%eax
		cur->size = size;

		remove_from_list(&first_free, cur);
		append_to_list(&first_used, cur);

		if (freesize > 0) {
20000f3e:	85 ff                	test   %edi,%edi
		cur = cur->next;
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
20000f40:	89 43 08             	mov    %eax,0x8(%ebx)
	*root = element;
20000f43:	89 1d 14 50 00 20    	mov    %ebx,0x20005014
		cur->size = size;

		remove_from_list(&first_free, cur);
		append_to_list(&first_used, cur);

		if (freesize > 0) {
20000f49:	74 1d                	je     20000f68 <malloc+0xbd>
			struct memory_node* free = pop_unused_node();
20000f4b:	e8 f2 fe ff ff       	call   20000e42 <pop_unused_node>

			free->address = cur->address + cur->size;
20000f50:	8b 13                	mov    (%ebx),%edx
20000f52:	03 53 04             	add    0x4(%ebx),%edx
20000f55:	89 50 04             	mov    %edx,0x4(%eax)
		cur = cur->next;
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
20000f58:	8b 15 18 50 00 20    	mov    0x20005018,%edx
20000f5e:	89 50 08             	mov    %edx,0x8(%eax)

		if (freesize > 0) {
			struct memory_node* free = pop_unused_node();

			free->address = cur->address + cur->size;
			free->size = freesize;
20000f61:	89 38                	mov    %edi,(%eax)
	}
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
	element->next = *root;
	*root = element;
20000f63:	a3 18 50 00 20       	mov    %eax,0x20005018
			free->size = freesize;

			append_to_list(&first_free, free);
		}

		return (void*) cur->address;
20000f68:	8b 43 04             	mov    0x4(%ebx),%eax
	}
}
20000f6b:	8d 65 f4             	lea    -0xc(%ebp),%esp
20000f6e:	5b                   	pop    %ebx
20000f6f:	5e                   	pop    %esi
20000f70:	5f                   	pop    %edi
20000f71:	5d                   	pop    %ebp
20000f72:	c3                   	ret    
	}

	if (cur == NULL) {
		uint32_t pgs = size / PAGESIZE;

		if ((size % PAGESIZE) != 0)
20000f73:	89 f0                	mov    %esi,%eax
		}
		cur = cur->next;
	}

	if (cur == NULL) {
		uint32_t pgs = size / PAGESIZE;
20000f75:	89 f7                	mov    %esi,%edi
20000f77:	c1 ef 0c             	shr    $0xc,%edi

		if ((size % PAGESIZE) != 0)
20000f7a:	25 ff 0f 00 00       	and    $0xfff,%eax
			pgs++;
20000f7f:	83 f8 01             	cmp    $0x1,%eax
20000f82:	83 df ff             	sbb    $0xffffffff,%edi

		void* addr = pcalloc(pgs);
20000f85:	83 ec 0c             	sub    $0xc,%esp
20000f88:	57                   	push   %edi
20000f89:	e8 54 fd ff ff       	call   20000ce2 <pcalloc>
		struct memory_node* fill = pop_unused_node();

		fill->address = (uint32_t) addr;
		fill->size = (uint32_t) size;

		if (pgs * PAGESIZE > size) {
20000f8e:	c1 e7 0c             	shl    $0xc,%edi
		if ((size % PAGESIZE) != 0)
			pgs++;

		void* addr = pcalloc(pgs);

		struct memory_node* fill = pop_unused_node();
20000f91:	89 45 e4             	mov    %eax,-0x1c(%ebp)
20000f94:	e8 a9 fe ff ff       	call   20000e42 <pop_unused_node>

		fill->address = (uint32_t) addr;
20000f99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
		fill->size = (uint32_t) size;

		if (pgs * PAGESIZE > size) {
20000f9c:	83 c4 10             	add    $0x10,%esp
		if ((size % PAGESIZE) != 0)
			pgs++;

		void* addr = pcalloc(pgs);

		struct memory_node* fill = pop_unused_node();
20000f9f:	89 c3                	mov    %eax,%ebx

		fill->address = (uint32_t) addr;
20000fa1:	89 50 04             	mov    %edx,0x4(%eax)
		fill->size = (uint32_t) size;
20000fa4:	89 30                	mov    %esi,(%eax)

		if (pgs * PAGESIZE > size) {
20000fa6:	39 f7                	cmp    %esi,%edi
20000fa8:	0f 86 5b ff ff ff    	jbe    20000f09 <malloc+0x5e>
20000fae:	e9 37 ff ff ff       	jmp    20000eea <malloc+0x3f>

20000fb3 <realloc>:
	}

	return p;
}

void* realloc(void* ptr, size_t size) {
20000fb3:	55                   	push   %ebp
20000fb4:	89 e5                	mov    %esp,%ebp
20000fb6:	56                   	push   %esi
20000fb7:	53                   	push   %ebx
	struct memory_node* cur = first_used;
20000fb8:	8b 1d 14 50 00 20    	mov    0x20005014,%ebx
	}

	return p;
}

void* realloc(void* ptr, size_t size) {
20000fbe:	8b 55 08             	mov    0x8(%ebp),%edx
20000fc1:	8b 45 0c             	mov    0xc(%ebp),%eax
	struct memory_node* cur = first_used;

	while (cur != NULL) {
20000fc4:	eb 40                	jmp    20001006 <realloc+0x53>
		if (cur->address == (uint32_t) ptr) {
20000fc6:	3b 53 04             	cmp    0x4(%ebx),%edx
20000fc9:	75 38                	jne    20001003 <realloc+0x50>
			if (size == 0) {
20000fcb:	85 c0                	test   %eax,%eax
20000fcd:	75 0d                	jne    20000fdc <realloc+0x29>
				free(ptr);
20000fcf:	83 ec 0c             	sub    $0xc,%esp
20000fd2:	31 f6                	xor    %esi,%esi
20000fd4:	52                   	push   %edx
20000fd5:	e8 6e fd ff ff       	call   20000d48 <free>
20000fda:	eb 22                	jmp    20000ffe <realloc+0x4b>
				return NULL;
			} else {
				void* new = malloc(size);
20000fdc:	83 ec 0c             	sub    $0xc,%esp
20000fdf:	50                   	push   %eax
20000fe0:	e8 c6 fe ff ff       	call   20000eab <malloc>
				memcpy(new, (void*) cur->address, cur->size);
20000fe5:	83 c4 0c             	add    $0xc,%esp
		if (cur->address == (uint32_t) ptr) {
			if (size == 0) {
				free(ptr);
				return NULL;
			} else {
				void* new = malloc(size);
20000fe8:	89 c6                	mov    %eax,%esi
				memcpy(new, (void*) cur->address, cur->size);
20000fea:	ff 33                	pushl  (%ebx)
20000fec:	ff 73 04             	pushl  0x4(%ebx)
20000fef:	50                   	push   %eax
20000ff0:	e8 43 fc ff ff       	call   20000c38 <memcpy>
				free((void*) cur->address);
20000ff5:	59                   	pop    %ecx
20000ff6:	ff 73 04             	pushl  0x4(%ebx)
20000ff9:	e8 4a fd ff ff       	call   20000d48 <free>

				return new;
20000ffe:	83 c4 10             	add    $0x10,%esp
20001001:	eb 09                	jmp    2000100c <realloc+0x59>
			}
		}
		cur = cur->next;
20001003:	8b 5b 08             	mov    0x8(%ebx),%ebx
}

void* realloc(void* ptr, size_t size) {
	struct memory_node* cur = first_used;

	while (cur != NULL) {
20001006:	85 db                	test   %ebx,%ebx
20001008:	75 bc                	jne    20000fc6 <realloc+0x13>
2000100a:	31 f6                	xor    %esi,%esi
			}
		}
		cur = cur->next;
	}
	return NULL;
}
2000100c:	8d 65 f8             	lea    -0x8(%ebp),%esp
2000100f:	89 f0                	mov    %esi,%eax
20001011:	5b                   	pop    %ebx
20001012:	5e                   	pop    %esi
20001013:	5d                   	pop    %ebp
20001014:	c3                   	ret    

20001015 <calloc>:

		return (void*) cur->address;
	}
}

void* calloc(size_t num, size_t size) {
20001015:	55                   	push   %ebp
20001016:	89 e5                	mov    %esp,%ebp
20001018:	56                   	push   %esi
20001019:	53                   	push   %ebx
2000101a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	size_t gsize = num * size;
	void* p = malloc(gsize);
2000101d:	83 ec 0c             	sub    $0xc,%esp
		return (void*) cur->address;
	}
}

void* calloc(size_t num, size_t size) {
	size_t gsize = num * size;
20001020:	0f af 5d 08          	imul   0x8(%ebp),%ebx
	void* p = malloc(gsize);
20001024:	53                   	push   %ebx
20001025:	e8 81 fe ff ff       	call   20000eab <malloc>

	if (p != NULL) {
2000102a:	83 c4 10             	add    $0x10,%esp
	}
}

void* calloc(size_t num, size_t size) {
	size_t gsize = num * size;
	void* p = malloc(gsize);
2000102d:	89 c6                	mov    %eax,%esi

	if (p != NULL) {
2000102f:	85 c0                	test   %eax,%eax
20001031:	74 0d                	je     20001040 <calloc+0x2b>
		memset(p, 0, gsize);
20001033:	50                   	push   %eax
20001034:	53                   	push   %ebx
20001035:	6a 00                	push   $0x0
20001037:	56                   	push   %esi
20001038:	e8 df fb ff ff       	call   20000c1c <memset>
2000103d:	83 c4 10             	add    $0x10,%esp
	}

	return p;
}
20001040:	8d 65 f8             	lea    -0x8(%ebp),%esp
20001043:	89 f0                	mov    %esi,%eax
20001045:	5b                   	pop    %ebx
20001046:	5e                   	pop    %esi
20001047:	5d                   	pop    %ebp
20001048:	c3                   	ret    
20001049:	00 00                	add    %al,(%eax)
	...

2000104c <strlen>:
    l1 = l1 < l2 ? l1 : l2;

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
2000104c:	55                   	push   %ebp
    if (str == 0)
2000104d:	31 d2                	xor    %edx,%edx
    l1 = l1 < l2 ? l1 : l2;

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
2000104f:	89 e5                	mov    %esp,%ebp
    if (str == 0)
20001051:	31 c0                	xor    %eax,%eax
    l1 = l1 < l2 ? l1 : l2;

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
20001053:	8b 4d 08             	mov    0x8(%ebp),%ecx
    if (str == 0)
20001056:	85 c9                	test   %ecx,%ecx
20001058:	75 03                	jne    2000105d <strlen+0x11>
2000105a:	eb 09                	jmp    20001065 <strlen+0x19>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
2000105c:	42                   	inc    %edx
2000105d:	89 d0                	mov    %edx,%eax
2000105f:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
20001063:	75 f7                	jne    2000105c <strlen+0x10>
        ;
    return i;
}
20001065:	5d                   	pop    %ebp
20001066:	c3                   	ret    

20001067 <strtoknc>:
        return strtoknc(fr, delimiters);
    }
    return strtoknc(0, delimiters);
}

char* strtoknc(char* str, const char* delimiters) {
20001067:	55                   	push   %ebp

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
20001068:	31 c0                	xor    %eax,%eax
        return strtoknc(fr, delimiters);
    }
    return strtoknc(0, delimiters);
}

char* strtoknc(char* str, const char* delimiters) {
2000106a:	89 e5                	mov    %esp,%ebp
2000106c:	57                   	push   %edi
2000106d:	56                   	push   %esi
2000106e:	53                   	push   %ebx
2000106f:	83 ec 04             	sub    $0x4,%esp
20001072:	8b 5d 0c             	mov    0xc(%ebp),%ebx
20001075:	8b 4d 08             	mov    0x8(%ebp),%ecx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
20001078:	85 db                	test   %ebx,%ebx
2000107a:	75 06                	jne    20001082 <strtoknc+0x1b>
2000107c:	e9 83 00 00 00       	jmp    20001104 <strtoknc+0x9d>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
20001081:	40                   	inc    %eax
20001082:	89 c7                	mov    %eax,%edi
20001084:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
20001088:	75 f7                	jne    20001081 <strtoknc+0x1a>
char* strtoknc(char* str, const char* delimiters) {
    int i = 0;
    int len = strlen(delimiters);

    /* check in the delimiters */
    if (len == 0)
2000108a:	85 c0                	test   %eax,%eax
2000108c:	74 76                	je     20001104 <strtoknc+0x9d>
        return 0;

    /* if the original string has nothing left */
    if (!str && !sp)
2000108e:	85 c9                	test   %ecx,%ecx
20001090:	75 0b                	jne    2000109d <strtoknc+0x36>
20001092:	83 3d 20 50 00 20 00 	cmpl   $0x0,0x20005020
20001099:	75 08                	jne    200010a3 <strtoknc+0x3c>
2000109b:	eb 67                	jmp    20001104 <strtoknc+0x9d>
        return 0;

    /* initialize the sp during the first call */
    if (str) {
        sp = str;
2000109d:	89 0d 20 50 00 20    	mov    %ecx,0x20005020
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
200010a3:	a1 20 50 00 20       	mov    0x20005020,%eax
200010a8:	31 c9                	xor    %ecx,%ecx
    while (1) {
        for (i = 0; i < len; i++) {
200010aa:	eb 0b                	jmp    200010b7 <strtoknc+0x50>
            if (*p_start == delimiters[i]) {
200010ac:	8a 10                	mov    (%eax),%dl
200010ae:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
200010b1:	75 03                	jne    200010b6 <strtoknc+0x4f>
                p_start++;
200010b3:	40                   	inc    %eax
                break;
200010b4:	eb 05                	jmp    200010bb <strtoknc+0x54>
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
    while (1) {
        for (i = 0; i < len; i++) {
200010b6:	41                   	inc    %ecx
200010b7:	39 f9                	cmp    %edi,%ecx
200010b9:	7c f1                	jl     200010ac <strtoknc+0x45>
                p_start++;
                break;
            }
        }

        if (i == len) {
200010bb:	39 f9                	cmp    %edi,%ecx
200010bd:	75 e9                	jne    200010a8 <strtoknc+0x41>
            sp = p_start;
200010bf:	a3 20 50 00 20       	mov    %eax,0x20005020
            break;
        }
    }

    /* return NULL if nothing left */
    if (*sp == '\0') {
200010c4:	80 38 00             	cmpb   $0x0,(%eax)
200010c7:	75 28                	jne    200010f1 <strtoknc+0x8a>
        sp = NULL;
200010c9:	c7 05 20 50 00 20 00 	movl   $0x0,0x20005020
200010d0:	00 00 00 
200010d3:	eb 2f                	jmp    20001104 <strtoknc+0x9d>
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
            if (*sp == delimiters[i]) {
200010d5:	8a 55 f3             	mov    -0xd(%ebp),%dl
200010d8:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
200010db:	75 05                	jne    200010e2 <strtoknc+0x7b>
                *sp = '\0';
200010dd:	c6 06 00             	movb   $0x0,(%esi)
                break;
200010e0:	eb 05                	jmp    200010e7 <strtoknc+0x80>
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
200010e2:	41                   	inc    %ecx
200010e3:	39 f9                	cmp    %edi,%ecx
200010e5:	7c ee                	jl     200010d5 <strtoknc+0x6e>
                *sp = '\0';
                break;
            }
        }

        sp++;
200010e7:	ff 05 20 50 00 20    	incl   0x20005020
        if (i < len)
200010ed:	39 f9                	cmp    %edi,%ecx
200010ef:	7c 15                	jl     20001106 <strtoknc+0x9f>
        sp = NULL;
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
200010f1:	8b 35 20 50 00 20    	mov    0x20005020,%esi
200010f7:	8a 16                	mov    (%esi),%dl
200010f9:	88 55 f3             	mov    %dl,-0xd(%ebp)
200010fc:	84 d2                	test   %dl,%dl
200010fe:	74 06                	je     20001106 <strtoknc+0x9f>
20001100:	31 c9                	xor    %ecx,%ecx
20001102:	eb df                	jmp    200010e3 <strtoknc+0x7c>
20001104:	31 c0                	xor    %eax,%eax
        if (i < len)
            break;
    }

    return p_start;
}
20001106:	5a                   	pop    %edx
20001107:	5b                   	pop    %ebx
20001108:	5e                   	pop    %esi
20001109:	5f                   	pop    %edi
2000110a:	5d                   	pop    %ebp
2000110b:	c3                   	ret    

2000110c <strcpy>:
    for (i = 0; str[i] != '\0'; i++)
        ;
    return i;
}

char* strcpy(char* dest, const char* src) {
2000110c:	55                   	push   %ebp

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
2000110d:	31 c0                	xor    %eax,%eax
    for (i = 0; str[i] != '\0'; i++)
        ;
    return i;
}

char* strcpy(char* dest, const char* src) {
2000110f:	89 e5                	mov    %esp,%ebp
20001111:	53                   	push   %ebx
20001112:	83 ec 04             	sub    $0x4,%esp

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
20001115:	31 c9                	xor    %ecx,%ecx
    for (i = 0; str[i] != '\0'; i++)
        ;
    return i;
}

char* strcpy(char* dest, const char* src) {
20001117:	8b 55 0c             	mov    0xc(%ebp),%edx
2000111a:	8b 5d 08             	mov    0x8(%ebp),%ebx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
2000111d:	85 d2                	test   %edx,%edx
2000111f:	75 03                	jne    20001124 <strcpy+0x18>
20001121:	eb 09                	jmp    2000112c <strcpy+0x20>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
20001123:	40                   	inc    %eax
20001124:	89 c1                	mov    %eax,%ecx
20001126:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
2000112a:	75 f7                	jne    20001123 <strcpy+0x17>
        ;
    return i;
}

char* strcpy(char* dest, const char* src) {
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
2000112c:	41                   	inc    %ecx
2000112d:	50                   	push   %eax
2000112e:	51                   	push   %ecx
2000112f:	52                   	push   %edx
20001130:	53                   	push   %ebx
20001131:	e8 02 fb ff ff       	call   20000c38 <memcpy>
    return dest;
}
20001136:	89 d8                	mov    %ebx,%eax
20001138:	8b 5d fc             	mov    -0x4(%ebp),%ebx
2000113b:	c9                   	leave  
2000113c:	c3                   	ret    

2000113d <strclone>:

char* strclone(const char* str) {
2000113d:	55                   	push   %ebp

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
2000113e:	31 c0                	xor    %eax,%eax
char* strcpy(char* dest, const char* src) {
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
    return dest;
}

char* strclone(const char* str) {
20001140:	89 e5                	mov    %esp,%ebp
20001142:	56                   	push   %esi
20001143:	53                   	push   %ebx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
20001144:	31 d2                	xor    %edx,%edx
char* strcpy(char* dest, const char* src) {
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
    return dest;
}

char* strclone(const char* str) {
20001146:	8b 5d 08             	mov    0x8(%ebp),%ebx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
20001149:	85 db                	test   %ebx,%ebx
2000114b:	75 03                	jne    20001150 <strclone+0x13>
2000114d:	eb 09                	jmp    20001158 <strclone+0x1b>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
2000114f:	40                   	inc    %eax
20001150:	89 c2                	mov    %eax,%edx
20001152:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
20001156:	75 f7                	jne    2000114f <strclone+0x12>
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
    return dest;
}

char* strclone(const char* str) {
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
20001158:	83 ec 0c             	sub    $0xc,%esp
2000115b:	42                   	inc    %edx
2000115c:	52                   	push   %edx
2000115d:	e8 49 fd ff ff       	call   20000eab <malloc>
    strcpy(ret, str);
20001162:	5a                   	pop    %edx
20001163:	59                   	pop    %ecx
20001164:	53                   	push   %ebx
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
    return dest;
}

char* strclone(const char* str) {
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
20001165:	89 c6                	mov    %eax,%esi
    strcpy(ret, str);
20001167:	50                   	push   %eax
20001168:	e8 9f ff ff ff       	call   2000110c <strcpy>

    return ret;
}
2000116d:	8d 65 f8             	lea    -0x8(%ebp),%esp
20001170:	89 f0                	mov    %esi,%eax
20001172:	5b                   	pop    %ebx
20001173:	5e                   	pop    %esi
20001174:	5d                   	pop    %ebp
20001175:	c3                   	ret    

20001176 <strtok>:

char* sp = NULL; /* the start position of the string */
void* fr = NULL;

char* strtok(char* str, const char* delimiters) {
20001176:	55                   	push   %ebp
20001177:	89 e5                	mov    %esp,%ebp
20001179:	56                   	push   %esi
2000117a:	53                   	push   %ebx
2000117b:	8b 75 08             	mov    0x8(%ebp),%esi
2000117e:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    if(str != 0) { //TODO better but if you call strtok and after that strtoknc will still be a memory leak. -> Don't use strtoknc
20001181:	85 f6                	test   %esi,%esi
20001183:	74 2e                	je     200011b3 <strtok+0x3d>
        if(fr != 0) {
20001185:	a1 24 50 00 20       	mov    0x20005024,%eax
2000118a:	85 c0                	test   %eax,%eax
2000118c:	74 0c                	je     2000119a <strtok+0x24>
            free(fr);
2000118e:	83 ec 0c             	sub    $0xc,%esp
20001191:	50                   	push   %eax
20001192:	e8 b1 fb ff ff       	call   20000d48 <free>
20001197:	83 c4 10             	add    $0x10,%esp
        }
        fr = strclone(str);
2000119a:	83 ec 0c             	sub    $0xc,%esp
2000119d:	56                   	push   %esi
2000119e:	e8 9a ff ff ff       	call   2000113d <strclone>
        return strtoknc(fr, delimiters);
200011a3:	83 c4 10             	add    $0x10,%esp
char* strtok(char* str, const char* delimiters) {
    if(str != 0) { //TODO better but if you call strtok and after that strtoknc will still be a memory leak. -> Don't use strtoknc
        if(fr != 0) {
            free(fr);
        }
        fr = strclone(str);
200011a6:	a3 24 50 00 20       	mov    %eax,0x20005024
        return strtoknc(fr, delimiters);
200011ab:	89 5d 0c             	mov    %ebx,0xc(%ebp)
200011ae:	89 45 08             	mov    %eax,0x8(%ebp)
200011b1:	eb 0a                	jmp    200011bd <strtok+0x47>
    }
    return strtoknc(0, delimiters);
200011b3:	89 5d 0c             	mov    %ebx,0xc(%ebp)
200011b6:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
200011bd:	8d 65 f8             	lea    -0x8(%ebp),%esp
200011c0:	5b                   	pop    %ebx
200011c1:	5e                   	pop    %esi
200011c2:	5d                   	pop    %ebp
            free(fr);
        }
        fr = strclone(str);
        return strtoknc(fr, delimiters);
    }
    return strtoknc(0, delimiters);
200011c3:	e9 9f fe ff ff       	jmp    20001067 <strtoknc>

200011c8 <strcmp>:
#include "string.h"
#include "stdlib.h"

int strcmp(const char* str1, const char* str2) {
200011c8:	55                   	push   %ebp

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
200011c9:	31 c0                	xor    %eax,%eax
#include "string.h"
#include "stdlib.h"

int strcmp(const char* str1, const char* str2) {
200011cb:	89 e5                	mov    %esp,%ebp
200011cd:	56                   	push   %esi
200011ce:	53                   	push   %ebx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
200011cf:	31 db                	xor    %ebx,%ebx
#include "string.h"
#include "stdlib.h"

int strcmp(const char* str1, const char* str2) {
200011d1:	8b 55 08             	mov    0x8(%ebp),%edx
200011d4:	8b 4d 0c             	mov    0xc(%ebp),%ecx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
200011d7:	85 d2                	test   %edx,%edx
200011d9:	75 03                	jne    200011de <strcmp+0x16>
200011db:	eb 09                	jmp    200011e6 <strcmp+0x1e>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
200011dd:	40                   	inc    %eax
200011de:	89 c3                	mov    %eax,%ebx
200011e0:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
200011e4:	75 f7                	jne    200011dd <strcmp+0x15>

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
200011e6:	31 c0                	xor    %eax,%eax
200011e8:	31 f6                	xor    %esi,%esi
200011ea:	85 c9                	test   %ecx,%ecx
200011ec:	75 03                	jne    200011f1 <strcmp+0x29>
200011ee:	eb 09                	jmp    200011f9 <strcmp+0x31>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
200011f0:	40                   	inc    %eax
200011f1:	89 c6                	mov    %eax,%esi
200011f3:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
200011f7:	75 f7                	jne    200011f0 <strcmp+0x28>
int strcmp(const char* str1, const char* str2) {
    int l1 = strlen(str1);
    int l2 = strlen(str2);
    l1 = l1 < l2 ? l1 : l2;

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
200011f9:	39 de                	cmp    %ebx,%esi
200011fb:	50                   	push   %eax
200011fc:	89 f0                	mov    %esi,%eax
200011fe:	7e 02                	jle    20001202 <strcmp+0x3a>
20001200:	89 d8                	mov    %ebx,%eax
20001202:	40                   	inc    %eax
20001203:	50                   	push   %eax
20001204:	51                   	push   %ecx
20001205:	52                   	push   %edx
20001206:	e8 53 fa ff ff       	call   20000c5e <memcmp>
}
2000120b:	8d 65 f8             	lea    -0x8(%ebp),%esp
2000120e:	5b                   	pop    %ebx
2000120f:	5e                   	pop    %esi
20001210:	5d                   	pop    %ebp
20001211:	c3                   	ret    
